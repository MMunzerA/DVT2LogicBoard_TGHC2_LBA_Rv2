
DVT2LogicBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008800  08008800  00008800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  08008998  08008998  00008998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08012964  08012964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129a4  080129a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080129a4  080129a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080129a4  080129a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129a4  080129a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129a8  080129a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080129ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  2000000c  080129b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000900  20000678  080129b8  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7b2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000300e  00000000  00000000  0003d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  00040800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  00041cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fadc  00000000  00000000  00043088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104ae  00000000  00000000  00062b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b973c  00000000  00000000  00073012  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a0  00000000  00000000  0012c7cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008998 <__do_global_dtors_aux>:
 8008998:	b510      	push	{r4, lr}
 800899a:	4c05      	ldr	r4, [pc, #20]	; (80089b0 <__do_global_dtors_aux+0x18>)
 800899c:	7823      	ldrb	r3, [r4, #0]
 800899e:	b933      	cbnz	r3, 80089ae <__do_global_dtors_aux+0x16>
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <__do_global_dtors_aux+0x1c>)
 80089a2:	b113      	cbz	r3, 80089aa <__do_global_dtors_aux+0x12>
 80089a4:	4804      	ldr	r0, [pc, #16]	; (80089b8 <__do_global_dtors_aux+0x20>)
 80089a6:	f3af 8000 	nop.w
 80089aa:	2301      	movs	r3, #1
 80089ac:	7023      	strb	r3, [r4, #0]
 80089ae:	bd10      	pop	{r4, pc}
 80089b0:	2000000c 	.word	0x2000000c
 80089b4:	00000000 	.word	0x00000000
 80089b8:	0801294c 	.word	0x0801294c

080089bc <frame_dummy>:
 80089bc:	b508      	push	{r3, lr}
 80089be:	4b03      	ldr	r3, [pc, #12]	; (80089cc <frame_dummy+0x10>)
 80089c0:	b11b      	cbz	r3, 80089ca <frame_dummy+0xe>
 80089c2:	4903      	ldr	r1, [pc, #12]	; (80089d0 <frame_dummy+0x14>)
 80089c4:	4803      	ldr	r0, [pc, #12]	; (80089d4 <frame_dummy+0x18>)
 80089c6:	f3af 8000 	nop.w
 80089ca:	bd08      	pop	{r3, pc}
 80089cc:	00000000 	.word	0x00000000
 80089d0:	20000010 	.word	0x20000010
 80089d4:	0801294c 	.word	0x0801294c

080089d8 <__aeabi_drsub>:
 80089d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80089dc:	e002      	b.n	80089e4 <__adddf3>
 80089de:	bf00      	nop

080089e0 <__aeabi_dsub>:
 80089e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080089e4 <__adddf3>:
 80089e4:	b530      	push	{r4, r5, lr}
 80089e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80089ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80089ee:	ea94 0f05 	teq	r4, r5
 80089f2:	bf08      	it	eq
 80089f4:	ea90 0f02 	teqeq	r0, r2
 80089f8:	bf1f      	itttt	ne
 80089fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80089fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008a02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008a06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008a0a:	f000 80e2 	beq.w	8008bd2 <__adddf3+0x1ee>
 8008a0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008a12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008a16:	bfb8      	it	lt
 8008a18:	426d      	neglt	r5, r5
 8008a1a:	dd0c      	ble.n	8008a36 <__adddf3+0x52>
 8008a1c:	442c      	add	r4, r5
 8008a1e:	ea80 0202 	eor.w	r2, r0, r2
 8008a22:	ea81 0303 	eor.w	r3, r1, r3
 8008a26:	ea82 0000 	eor.w	r0, r2, r0
 8008a2a:	ea83 0101 	eor.w	r1, r3, r1
 8008a2e:	ea80 0202 	eor.w	r2, r0, r2
 8008a32:	ea81 0303 	eor.w	r3, r1, r3
 8008a36:	2d36      	cmp	r5, #54	; 0x36
 8008a38:	bf88      	it	hi
 8008a3a:	bd30      	pophi	{r4, r5, pc}
 8008a3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008a40:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008a44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008a48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008a4c:	d002      	beq.n	8008a54 <__adddf3+0x70>
 8008a4e:	4240      	negs	r0, r0
 8008a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008a54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008a5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008a60:	d002      	beq.n	8008a68 <__adddf3+0x84>
 8008a62:	4252      	negs	r2, r2
 8008a64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008a68:	ea94 0f05 	teq	r4, r5
 8008a6c:	f000 80a7 	beq.w	8008bbe <__adddf3+0x1da>
 8008a70:	f1a4 0401 	sub.w	r4, r4, #1
 8008a74:	f1d5 0e20 	rsbs	lr, r5, #32
 8008a78:	db0d      	blt.n	8008a96 <__adddf3+0xb2>
 8008a7a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008a7e:	fa22 f205 	lsr.w	r2, r2, r5
 8008a82:	1880      	adds	r0, r0, r2
 8008a84:	f141 0100 	adc.w	r1, r1, #0
 8008a88:	fa03 f20e 	lsl.w	r2, r3, lr
 8008a8c:	1880      	adds	r0, r0, r2
 8008a8e:	fa43 f305 	asr.w	r3, r3, r5
 8008a92:	4159      	adcs	r1, r3
 8008a94:	e00e      	b.n	8008ab4 <__adddf3+0xd0>
 8008a96:	f1a5 0520 	sub.w	r5, r5, #32
 8008a9a:	f10e 0e20 	add.w	lr, lr, #32
 8008a9e:	2a01      	cmp	r2, #1
 8008aa0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008aa4:	bf28      	it	cs
 8008aa6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008aaa:	fa43 f305 	asr.w	r3, r3, r5
 8008aae:	18c0      	adds	r0, r0, r3
 8008ab0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008ab4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008ab8:	d507      	bpl.n	8008aca <__adddf3+0xe6>
 8008aba:	f04f 0e00 	mov.w	lr, #0
 8008abe:	f1dc 0c00 	rsbs	ip, ip, #0
 8008ac2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008ac6:	eb6e 0101 	sbc.w	r1, lr, r1
 8008aca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008ace:	d31b      	bcc.n	8008b08 <__adddf3+0x124>
 8008ad0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008ad4:	d30c      	bcc.n	8008af0 <__adddf3+0x10c>
 8008ad6:	0849      	lsrs	r1, r1, #1
 8008ad8:	ea5f 0030 	movs.w	r0, r0, rrx
 8008adc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008ae0:	f104 0401 	add.w	r4, r4, #1
 8008ae4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008ae8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008aec:	f080 809a 	bcs.w	8008c24 <__adddf3+0x240>
 8008af0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008af4:	bf08      	it	eq
 8008af6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008afa:	f150 0000 	adcs.w	r0, r0, #0
 8008afe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008b02:	ea41 0105 	orr.w	r1, r1, r5
 8008b06:	bd30      	pop	{r4, r5, pc}
 8008b08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008b0c:	4140      	adcs	r0, r0
 8008b0e:	eb41 0101 	adc.w	r1, r1, r1
 8008b12:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008b16:	f1a4 0401 	sub.w	r4, r4, #1
 8008b1a:	d1e9      	bne.n	8008af0 <__adddf3+0x10c>
 8008b1c:	f091 0f00 	teq	r1, #0
 8008b20:	bf04      	itt	eq
 8008b22:	4601      	moveq	r1, r0
 8008b24:	2000      	moveq	r0, #0
 8008b26:	fab1 f381 	clz	r3, r1
 8008b2a:	bf08      	it	eq
 8008b2c:	3320      	addeq	r3, #32
 8008b2e:	f1a3 030b 	sub.w	r3, r3, #11
 8008b32:	f1b3 0220 	subs.w	r2, r3, #32
 8008b36:	da0c      	bge.n	8008b52 <__adddf3+0x16e>
 8008b38:	320c      	adds	r2, #12
 8008b3a:	dd08      	ble.n	8008b4e <__adddf3+0x16a>
 8008b3c:	f102 0c14 	add.w	ip, r2, #20
 8008b40:	f1c2 020c 	rsb	r2, r2, #12
 8008b44:	fa01 f00c 	lsl.w	r0, r1, ip
 8008b48:	fa21 f102 	lsr.w	r1, r1, r2
 8008b4c:	e00c      	b.n	8008b68 <__adddf3+0x184>
 8008b4e:	f102 0214 	add.w	r2, r2, #20
 8008b52:	bfd8      	it	le
 8008b54:	f1c2 0c20 	rsble	ip, r2, #32
 8008b58:	fa01 f102 	lsl.w	r1, r1, r2
 8008b5c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008b60:	bfdc      	itt	le
 8008b62:	ea41 010c 	orrle.w	r1, r1, ip
 8008b66:	4090      	lslle	r0, r2
 8008b68:	1ae4      	subs	r4, r4, r3
 8008b6a:	bfa2      	ittt	ge
 8008b6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008b70:	4329      	orrge	r1, r5
 8008b72:	bd30      	popge	{r4, r5, pc}
 8008b74:	ea6f 0404 	mvn.w	r4, r4
 8008b78:	3c1f      	subs	r4, #31
 8008b7a:	da1c      	bge.n	8008bb6 <__adddf3+0x1d2>
 8008b7c:	340c      	adds	r4, #12
 8008b7e:	dc0e      	bgt.n	8008b9e <__adddf3+0x1ba>
 8008b80:	f104 0414 	add.w	r4, r4, #20
 8008b84:	f1c4 0220 	rsb	r2, r4, #32
 8008b88:	fa20 f004 	lsr.w	r0, r0, r4
 8008b8c:	fa01 f302 	lsl.w	r3, r1, r2
 8008b90:	ea40 0003 	orr.w	r0, r0, r3
 8008b94:	fa21 f304 	lsr.w	r3, r1, r4
 8008b98:	ea45 0103 	orr.w	r1, r5, r3
 8008b9c:	bd30      	pop	{r4, r5, pc}
 8008b9e:	f1c4 040c 	rsb	r4, r4, #12
 8008ba2:	f1c4 0220 	rsb	r2, r4, #32
 8008ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8008baa:	fa01 f304 	lsl.w	r3, r1, r4
 8008bae:	ea40 0003 	orr.w	r0, r0, r3
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	bd30      	pop	{r4, r5, pc}
 8008bb6:	fa21 f004 	lsr.w	r0, r1, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	bd30      	pop	{r4, r5, pc}
 8008bbe:	f094 0f00 	teq	r4, #0
 8008bc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008bc6:	bf06      	itte	eq
 8008bc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008bcc:	3401      	addeq	r4, #1
 8008bce:	3d01      	subne	r5, #1
 8008bd0:	e74e      	b.n	8008a70 <__adddf3+0x8c>
 8008bd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008bd6:	bf18      	it	ne
 8008bd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008bdc:	d029      	beq.n	8008c32 <__adddf3+0x24e>
 8008bde:	ea94 0f05 	teq	r4, r5
 8008be2:	bf08      	it	eq
 8008be4:	ea90 0f02 	teqeq	r0, r2
 8008be8:	d005      	beq.n	8008bf6 <__adddf3+0x212>
 8008bea:	ea54 0c00 	orrs.w	ip, r4, r0
 8008bee:	bf04      	itt	eq
 8008bf0:	4619      	moveq	r1, r3
 8008bf2:	4610      	moveq	r0, r2
 8008bf4:	bd30      	pop	{r4, r5, pc}
 8008bf6:	ea91 0f03 	teq	r1, r3
 8008bfa:	bf1e      	ittt	ne
 8008bfc:	2100      	movne	r1, #0
 8008bfe:	2000      	movne	r0, #0
 8008c00:	bd30      	popne	{r4, r5, pc}
 8008c02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008c06:	d105      	bne.n	8008c14 <__adddf3+0x230>
 8008c08:	0040      	lsls	r0, r0, #1
 8008c0a:	4149      	adcs	r1, r1
 8008c0c:	bf28      	it	cs
 8008c0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008c18:	bf3c      	itt	cc
 8008c1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008c1e:	bd30      	popcc	{r4, r5, pc}
 8008c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008c24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008c28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c2c:	f04f 0000 	mov.w	r0, #0
 8008c30:	bd30      	pop	{r4, r5, pc}
 8008c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008c36:	bf1a      	itte	ne
 8008c38:	4619      	movne	r1, r3
 8008c3a:	4610      	movne	r0, r2
 8008c3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008c40:	bf1c      	itt	ne
 8008c42:	460b      	movne	r3, r1
 8008c44:	4602      	movne	r2, r0
 8008c46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008c4a:	bf06      	itte	eq
 8008c4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008c50:	ea91 0f03 	teqeq	r1, r3
 8008c54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008c58:	bd30      	pop	{r4, r5, pc}
 8008c5a:	bf00      	nop

08008c5c <__aeabi_ui2d>:
 8008c5c:	f090 0f00 	teq	r0, #0
 8008c60:	bf04      	itt	eq
 8008c62:	2100      	moveq	r1, #0
 8008c64:	4770      	bxeq	lr
 8008c66:	b530      	push	{r4, r5, lr}
 8008c68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008c6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008c70:	f04f 0500 	mov.w	r5, #0
 8008c74:	f04f 0100 	mov.w	r1, #0
 8008c78:	e750      	b.n	8008b1c <__adddf3+0x138>
 8008c7a:	bf00      	nop

08008c7c <__aeabi_i2d>:
 8008c7c:	f090 0f00 	teq	r0, #0
 8008c80:	bf04      	itt	eq
 8008c82:	2100      	moveq	r1, #0
 8008c84:	4770      	bxeq	lr
 8008c86:	b530      	push	{r4, r5, lr}
 8008c88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008c8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008c90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008c94:	bf48      	it	mi
 8008c96:	4240      	negmi	r0, r0
 8008c98:	f04f 0100 	mov.w	r1, #0
 8008c9c:	e73e      	b.n	8008b1c <__adddf3+0x138>
 8008c9e:	bf00      	nop

08008ca0 <__aeabi_f2d>:
 8008ca0:	0042      	lsls	r2, r0, #1
 8008ca2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008ca6:	ea4f 0131 	mov.w	r1, r1, rrx
 8008caa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008cae:	bf1f      	itttt	ne
 8008cb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008cb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008cb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008cbc:	4770      	bxne	lr
 8008cbe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008cc2:	bf08      	it	eq
 8008cc4:	4770      	bxeq	lr
 8008cc6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008cca:	bf04      	itt	eq
 8008ccc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008cd0:	4770      	bxeq	lr
 8008cd2:	b530      	push	{r4, r5, lr}
 8008cd4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008cdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ce0:	e71c      	b.n	8008b1c <__adddf3+0x138>
 8008ce2:	bf00      	nop

08008ce4 <__aeabi_ul2d>:
 8008ce4:	ea50 0201 	orrs.w	r2, r0, r1
 8008ce8:	bf08      	it	eq
 8008cea:	4770      	bxeq	lr
 8008cec:	b530      	push	{r4, r5, lr}
 8008cee:	f04f 0500 	mov.w	r5, #0
 8008cf2:	e00a      	b.n	8008d0a <__aeabi_l2d+0x16>

08008cf4 <__aeabi_l2d>:
 8008cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8008cf8:	bf08      	it	eq
 8008cfa:	4770      	bxeq	lr
 8008cfc:	b530      	push	{r4, r5, lr}
 8008cfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008d02:	d502      	bpl.n	8008d0a <__aeabi_l2d+0x16>
 8008d04:	4240      	negs	r0, r0
 8008d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008d0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008d0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008d12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008d16:	f43f aed8 	beq.w	8008aca <__adddf3+0xe6>
 8008d1a:	f04f 0203 	mov.w	r2, #3
 8008d1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008d22:	bf18      	it	ne
 8008d24:	3203      	addne	r2, #3
 8008d26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008d2a:	bf18      	it	ne
 8008d2c:	3203      	addne	r2, #3
 8008d2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008d32:	f1c2 0320 	rsb	r3, r2, #32
 8008d36:	fa00 fc03 	lsl.w	ip, r0, r3
 8008d3a:	fa20 f002 	lsr.w	r0, r0, r2
 8008d3e:	fa01 fe03 	lsl.w	lr, r1, r3
 8008d42:	ea40 000e 	orr.w	r0, r0, lr
 8008d46:	fa21 f102 	lsr.w	r1, r1, r2
 8008d4a:	4414      	add	r4, r2
 8008d4c:	e6bd      	b.n	8008aca <__adddf3+0xe6>
 8008d4e:	bf00      	nop

08008d50 <__aeabi_dmul>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008d56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008d5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008d5e:	bf1d      	ittte	ne
 8008d60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008d64:	ea94 0f0c 	teqne	r4, ip
 8008d68:	ea95 0f0c 	teqne	r5, ip
 8008d6c:	f000 f8de 	bleq	8008f2c <__aeabi_dmul+0x1dc>
 8008d70:	442c      	add	r4, r5
 8008d72:	ea81 0603 	eor.w	r6, r1, r3
 8008d76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008d7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008d7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008d82:	bf18      	it	ne
 8008d84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d90:	d038      	beq.n	8008e04 <__aeabi_dmul+0xb4>
 8008d92:	fba0 ce02 	umull	ip, lr, r0, r2
 8008d96:	f04f 0500 	mov.w	r5, #0
 8008d9a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008d9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008da2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008da6:	f04f 0600 	mov.w	r6, #0
 8008daa:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008dae:	f09c 0f00 	teq	ip, #0
 8008db2:	bf18      	it	ne
 8008db4:	f04e 0e01 	orrne.w	lr, lr, #1
 8008db8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008dbc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008dc0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008dc4:	d204      	bcs.n	8008dd0 <__aeabi_dmul+0x80>
 8008dc6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008dca:	416d      	adcs	r5, r5
 8008dcc:	eb46 0606 	adc.w	r6, r6, r6
 8008dd0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008dd4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008dd8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008ddc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008de0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008de4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008de8:	bf88      	it	hi
 8008dea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008dee:	d81e      	bhi.n	8008e2e <__aeabi_dmul+0xde>
 8008df0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008df4:	bf08      	it	eq
 8008df6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008dfa:	f150 0000 	adcs.w	r0, r0, #0
 8008dfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008e08:	ea46 0101 	orr.w	r1, r6, r1
 8008e0c:	ea40 0002 	orr.w	r0, r0, r2
 8008e10:	ea81 0103 	eor.w	r1, r1, r3
 8008e14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008e18:	bfc2      	ittt	gt
 8008e1a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008e1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008e22:	bd70      	popgt	{r4, r5, r6, pc}
 8008e24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008e28:	f04f 0e00 	mov.w	lr, #0
 8008e2c:	3c01      	subs	r4, #1
 8008e2e:	f300 80ab 	bgt.w	8008f88 <__aeabi_dmul+0x238>
 8008e32:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008e36:	bfde      	ittt	le
 8008e38:	2000      	movle	r0, #0
 8008e3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008e3e:	bd70      	pople	{r4, r5, r6, pc}
 8008e40:	f1c4 0400 	rsb	r4, r4, #0
 8008e44:	3c20      	subs	r4, #32
 8008e46:	da35      	bge.n	8008eb4 <__aeabi_dmul+0x164>
 8008e48:	340c      	adds	r4, #12
 8008e4a:	dc1b      	bgt.n	8008e84 <__aeabi_dmul+0x134>
 8008e4c:	f104 0414 	add.w	r4, r4, #20
 8008e50:	f1c4 0520 	rsb	r5, r4, #32
 8008e54:	fa00 f305 	lsl.w	r3, r0, r5
 8008e58:	fa20 f004 	lsr.w	r0, r0, r4
 8008e5c:	fa01 f205 	lsl.w	r2, r1, r5
 8008e60:	ea40 0002 	orr.w	r0, r0, r2
 8008e64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008e68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008e6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008e70:	fa21 f604 	lsr.w	r6, r1, r4
 8008e74:	eb42 0106 	adc.w	r1, r2, r6
 8008e78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008e7c:	bf08      	it	eq
 8008e7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	f1c4 040c 	rsb	r4, r4, #12
 8008e88:	f1c4 0520 	rsb	r5, r4, #32
 8008e8c:	fa00 f304 	lsl.w	r3, r0, r4
 8008e90:	fa20 f005 	lsr.w	r0, r0, r5
 8008e94:	fa01 f204 	lsl.w	r2, r1, r4
 8008e98:	ea40 0002 	orr.w	r0, r0, r2
 8008e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ea0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ea4:	f141 0100 	adc.w	r1, r1, #0
 8008ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008eac:	bf08      	it	eq
 8008eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	f1c4 0520 	rsb	r5, r4, #32
 8008eb8:	fa00 f205 	lsl.w	r2, r0, r5
 8008ebc:	ea4e 0e02 	orr.w	lr, lr, r2
 8008ec0:	fa20 f304 	lsr.w	r3, r0, r4
 8008ec4:	fa01 f205 	lsl.w	r2, r1, r5
 8008ec8:	ea43 0302 	orr.w	r3, r3, r2
 8008ecc:	fa21 f004 	lsr.w	r0, r1, r4
 8008ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ed4:	fa21 f204 	lsr.w	r2, r1, r4
 8008ed8:	ea20 0002 	bic.w	r0, r0, r2
 8008edc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008ee0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ee4:	bf08      	it	eq
 8008ee6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f094 0f00 	teq	r4, #0
 8008ef0:	d10f      	bne.n	8008f12 <__aeabi_dmul+0x1c2>
 8008ef2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008ef6:	0040      	lsls	r0, r0, #1
 8008ef8:	eb41 0101 	adc.w	r1, r1, r1
 8008efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008f00:	bf08      	it	eq
 8008f02:	3c01      	subeq	r4, #1
 8008f04:	d0f7      	beq.n	8008ef6 <__aeabi_dmul+0x1a6>
 8008f06:	ea41 0106 	orr.w	r1, r1, r6
 8008f0a:	f095 0f00 	teq	r5, #0
 8008f0e:	bf18      	it	ne
 8008f10:	4770      	bxne	lr
 8008f12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008f16:	0052      	lsls	r2, r2, #1
 8008f18:	eb43 0303 	adc.w	r3, r3, r3
 8008f1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008f20:	bf08      	it	eq
 8008f22:	3d01      	subeq	r5, #1
 8008f24:	d0f7      	beq.n	8008f16 <__aeabi_dmul+0x1c6>
 8008f26:	ea43 0306 	orr.w	r3, r3, r6
 8008f2a:	4770      	bx	lr
 8008f2c:	ea94 0f0c 	teq	r4, ip
 8008f30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008f34:	bf18      	it	ne
 8008f36:	ea95 0f0c 	teqne	r5, ip
 8008f3a:	d00c      	beq.n	8008f56 <__aeabi_dmul+0x206>
 8008f3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008f40:	bf18      	it	ne
 8008f42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008f46:	d1d1      	bne.n	8008eec <__aeabi_dmul+0x19c>
 8008f48:	ea81 0103 	eor.w	r1, r1, r3
 8008f4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	bd70      	pop	{r4, r5, r6, pc}
 8008f56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008f5a:	bf06      	itte	eq
 8008f5c:	4610      	moveq	r0, r2
 8008f5e:	4619      	moveq	r1, r3
 8008f60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008f64:	d019      	beq.n	8008f9a <__aeabi_dmul+0x24a>
 8008f66:	ea94 0f0c 	teq	r4, ip
 8008f6a:	d102      	bne.n	8008f72 <__aeabi_dmul+0x222>
 8008f6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008f70:	d113      	bne.n	8008f9a <__aeabi_dmul+0x24a>
 8008f72:	ea95 0f0c 	teq	r5, ip
 8008f76:	d105      	bne.n	8008f84 <__aeabi_dmul+0x234>
 8008f78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008f7c:	bf1c      	itt	ne
 8008f7e:	4610      	movne	r0, r2
 8008f80:	4619      	movne	r1, r3
 8008f82:	d10a      	bne.n	8008f9a <__aeabi_dmul+0x24a>
 8008f84:	ea81 0103 	eor.w	r1, r1, r3
 8008f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008f8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008f90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f94:	f04f 0000 	mov.w	r0, #0
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008f9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}

08008fa4 <__aeabi_ddiv>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008faa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008fae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008fb2:	bf1d      	ittte	ne
 8008fb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008fb8:	ea94 0f0c 	teqne	r4, ip
 8008fbc:	ea95 0f0c 	teqne	r5, ip
 8008fc0:	f000 f8a7 	bleq	8009112 <__aeabi_ddiv+0x16e>
 8008fc4:	eba4 0405 	sub.w	r4, r4, r5
 8008fc8:	ea81 0e03 	eor.w	lr, r1, r3
 8008fcc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008fd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008fd4:	f000 8088 	beq.w	80090e8 <__aeabi_ddiv+0x144>
 8008fd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008fdc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008fe0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008fe4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008fe8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008fec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008ff0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008ff4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008ff8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008ffc:	429d      	cmp	r5, r3
 8008ffe:	bf08      	it	eq
 8009000:	4296      	cmpeq	r6, r2
 8009002:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8009006:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800900a:	d202      	bcs.n	8009012 <__aeabi_ddiv+0x6e>
 800900c:	085b      	lsrs	r3, r3, #1
 800900e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009012:	1ab6      	subs	r6, r6, r2
 8009014:	eb65 0503 	sbc.w	r5, r5, r3
 8009018:	085b      	lsrs	r3, r3, #1
 800901a:	ea4f 0232 	mov.w	r2, r2, rrx
 800901e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009022:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8009026:	ebb6 0e02 	subs.w	lr, r6, r2
 800902a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800902e:	bf22      	ittt	cs
 8009030:	1ab6      	subcs	r6, r6, r2
 8009032:	4675      	movcs	r5, lr
 8009034:	ea40 000c 	orrcs.w	r0, r0, ip
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	ea4f 0232 	mov.w	r2, r2, rrx
 800903e:	ebb6 0e02 	subs.w	lr, r6, r2
 8009042:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009046:	bf22      	ittt	cs
 8009048:	1ab6      	subcs	r6, r6, r2
 800904a:	4675      	movcs	r5, lr
 800904c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	ea4f 0232 	mov.w	r2, r2, rrx
 8009056:	ebb6 0e02 	subs.w	lr, r6, r2
 800905a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800905e:	bf22      	ittt	cs
 8009060:	1ab6      	subcs	r6, r6, r2
 8009062:	4675      	movcs	r5, lr
 8009064:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8009068:	085b      	lsrs	r3, r3, #1
 800906a:	ea4f 0232 	mov.w	r2, r2, rrx
 800906e:	ebb6 0e02 	subs.w	lr, r6, r2
 8009072:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009076:	bf22      	ittt	cs
 8009078:	1ab6      	subcs	r6, r6, r2
 800907a:	4675      	movcs	r5, lr
 800907c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009080:	ea55 0e06 	orrs.w	lr, r5, r6
 8009084:	d018      	beq.n	80090b8 <__aeabi_ddiv+0x114>
 8009086:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800908a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800908e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009092:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009096:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800909a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800909e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80090a2:	d1c0      	bne.n	8009026 <__aeabi_ddiv+0x82>
 80090a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80090a8:	d10b      	bne.n	80090c2 <__aeabi_ddiv+0x11e>
 80090aa:	ea41 0100 	orr.w	r1, r1, r0
 80090ae:	f04f 0000 	mov.w	r0, #0
 80090b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80090b6:	e7b6      	b.n	8009026 <__aeabi_ddiv+0x82>
 80090b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80090bc:	bf04      	itt	eq
 80090be:	4301      	orreq	r1, r0
 80090c0:	2000      	moveq	r0, #0
 80090c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80090c6:	bf88      	it	hi
 80090c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80090cc:	f63f aeaf 	bhi.w	8008e2e <__aeabi_dmul+0xde>
 80090d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80090d4:	bf04      	itt	eq
 80090d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80090da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80090de:	f150 0000 	adcs.w	r0, r0, #0
 80090e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80090ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80090f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80090f4:	bfc2      	ittt	gt
 80090f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80090fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80090fe:	bd70      	popgt	{r4, r5, r6, pc}
 8009100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009104:	f04f 0e00 	mov.w	lr, #0
 8009108:	3c01      	subs	r4, #1
 800910a:	e690      	b.n	8008e2e <__aeabi_dmul+0xde>
 800910c:	ea45 0e06 	orr.w	lr, r5, r6
 8009110:	e68d      	b.n	8008e2e <__aeabi_dmul+0xde>
 8009112:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009116:	ea94 0f0c 	teq	r4, ip
 800911a:	bf08      	it	eq
 800911c:	ea95 0f0c 	teqeq	r5, ip
 8009120:	f43f af3b 	beq.w	8008f9a <__aeabi_dmul+0x24a>
 8009124:	ea94 0f0c 	teq	r4, ip
 8009128:	d10a      	bne.n	8009140 <__aeabi_ddiv+0x19c>
 800912a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800912e:	f47f af34 	bne.w	8008f9a <__aeabi_dmul+0x24a>
 8009132:	ea95 0f0c 	teq	r5, ip
 8009136:	f47f af25 	bne.w	8008f84 <__aeabi_dmul+0x234>
 800913a:	4610      	mov	r0, r2
 800913c:	4619      	mov	r1, r3
 800913e:	e72c      	b.n	8008f9a <__aeabi_dmul+0x24a>
 8009140:	ea95 0f0c 	teq	r5, ip
 8009144:	d106      	bne.n	8009154 <__aeabi_ddiv+0x1b0>
 8009146:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800914a:	f43f aefd 	beq.w	8008f48 <__aeabi_dmul+0x1f8>
 800914e:	4610      	mov	r0, r2
 8009150:	4619      	mov	r1, r3
 8009152:	e722      	b.n	8008f9a <__aeabi_dmul+0x24a>
 8009154:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009158:	bf18      	it	ne
 800915a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800915e:	f47f aec5 	bne.w	8008eec <__aeabi_dmul+0x19c>
 8009162:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8009166:	f47f af0d 	bne.w	8008f84 <__aeabi_dmul+0x234>
 800916a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800916e:	f47f aeeb 	bne.w	8008f48 <__aeabi_dmul+0x1f8>
 8009172:	e712      	b.n	8008f9a <__aeabi_dmul+0x24a>

08009174 <__aeabi_d2f>:
 8009174:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009178:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800917c:	bf24      	itt	cs
 800917e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8009182:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8009186:	d90d      	bls.n	80091a4 <__aeabi_d2f+0x30>
 8009188:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800918c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8009190:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8009194:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8009198:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800919c:	bf08      	it	eq
 800919e:	f020 0001 	biceq.w	r0, r0, #1
 80091a2:	4770      	bx	lr
 80091a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80091a8:	d121      	bne.n	80091ee <__aeabi_d2f+0x7a>
 80091aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80091ae:	bfbc      	itt	lt
 80091b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80091b4:	4770      	bxlt	lr
 80091b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80091ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80091be:	f1c2 0218 	rsb	r2, r2, #24
 80091c2:	f1c2 0c20 	rsb	ip, r2, #32
 80091c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80091ca:	fa20 f002 	lsr.w	r0, r0, r2
 80091ce:	bf18      	it	ne
 80091d0:	f040 0001 	orrne.w	r0, r0, #1
 80091d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80091d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80091dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80091e0:	ea40 000c 	orr.w	r0, r0, ip
 80091e4:	fa23 f302 	lsr.w	r3, r3, r2
 80091e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091ec:	e7cc      	b.n	8009188 <__aeabi_d2f+0x14>
 80091ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80091f2:	d107      	bne.n	8009204 <__aeabi_d2f+0x90>
 80091f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80091f8:	bf1e      	ittt	ne
 80091fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80091fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8009202:	4770      	bxne	lr
 8009204:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8009208:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800920c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop

08009214 <send_sensor_value>:
  return (int8_t)res;
}


void send_sensor_value(CAN_HandleTypeDef *hcan, uint8_t sensID,uint8_t ReqType)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08e      	sub	sp, #56	; 0x38
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
 8009220:	4613      	mov	r3, r2
 8009222:	70bb      	strb	r3, [r7, #2]
    uint32_t force=0;
 8009224:	2300      	movs	r3, #0
 8009226:	637b      	str	r3, [r7, #52]	; 0x34
    float   hmdt=1.0;
 8009228:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800922c:	633b      	str	r3, [r7, #48]	; 0x30
    float   tmpr=2.0;
 800922e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009232:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t TxMailbox[8];

    switch(ReqType)
 8009234:	78bb      	ldrb	r3, [r7, #2]
 8009236:	3b01      	subs	r3, #1
 8009238:	2b06      	cmp	r3, #6
 800923a:	f200 813a 	bhi.w	80094b2 <send_sensor_value+0x29e>
 800923e:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <send_sensor_value+0x30>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	08009261 	.word	0x08009261
 8009248:	080092b7 	.word	0x080092b7
 800924c:	0800930d 	.word	0x0800930d
 8009250:	08009361 	.word	0x08009361
 8009254:	080093a5 	.word	0x080093a5
 8009258:	080093e7 	.word	0x080093e7
 800925c:	08009429 	.word	0x08009429
    {
        case HUMIDITY_REQ:
			hmdt=humidity_values[sensID];
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	4a9d      	ldr	r2, [pc, #628]	; (80094d8 <send_sensor_value+0x2c4>)
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	633b      	str	r3, [r7, #48]	; 0x30
			TxHeader.ExtId=generate_can_header(CANDeviceID,sensID,ReqType,DATA_REPLY_MSG);
 800926c:	4b9b      	ldr	r3, [pc, #620]	; (80094dc <send_sensor_value+0x2c8>)
 800926e:	7818      	ldrb	r0, [r3, #0]
 8009270:	78ba      	ldrb	r2, [r7, #2]
 8009272:	78f9      	ldrb	r1, [r7, #3]
 8009274:	2300      	movs	r3, #0
 8009276:	f000 fdf8 	bl	8009e6a <generate_can_header>
 800927a:	4602      	mov	r2, r0
 800927c:	4b98      	ldr	r3, [pc, #608]	; (80094e0 <send_sensor_value+0x2cc>)
 800927e:	605a      	str	r2, [r3, #4]
			memcpy(TxData,&hmdt,sizeof(hmdt));
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	4a98      	ldr	r2, [pc, #608]	; (80094e4 <send_sensor_value+0x2d0>)
 8009284:	6013      	str	r3, [r2, #0]
			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f004 fe32 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800928c:	4603      	mov	r3, r0
 800928e:	b2da      	uxtb	r2, r3
 8009290:	4b95      	ldr	r3, [pc, #596]	; (80094e8 <send_sensor_value+0x2d4>)
 8009292:	701a      	strb	r2, [r3, #0]
			{
			  TxHeader.DLC=sizeof(hmdt);;
 8009294:	4b92      	ldr	r3, [pc, #584]	; (80094e0 <send_sensor_value+0x2cc>)
 8009296:	2204      	movs	r2, #4
 8009298:	611a      	str	r2, [r3, #16]
			  if( HAL_CAN_AddTxMessage(hcan,&TxHeader, (uint8_t *)TxData, TxMailbox)!= HAL_OK)
 800929a:	f107 030c 	add.w	r3, r7, #12
 800929e:	4a91      	ldr	r2, [pc, #580]	; (80094e4 <send_sensor_value+0x2d0>)
 80092a0:	498f      	ldr	r1, [pc, #572]	; (80094e0 <send_sensor_value+0x2cc>)
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f004 fd49 	bl	800dd3a <HAL_CAN_AddTxMessage>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8103 	beq.w	80094b6 <send_sensor_value+0x2a2>
			  {
				Error_Handler();
 80092b0:	f001 fba0 	bl	800a9f4 <Error_Handler>
			  }
			}
			break;
 80092b4:	e0ff      	b.n	80094b6 <send_sensor_value+0x2a2>

        case TEMPERATURE_REQ:
			tmpr=temperature_values[sensID];
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	4a8c      	ldr	r2, [pc, #560]	; (80094ec <send_sensor_value+0x2d8>)
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
			TxHeader.ExtId=generate_can_header(CANDeviceID,sensID,ReqType,DATA_REPLY_MSG);
 80092c2:	4b86      	ldr	r3, [pc, #536]	; (80094dc <send_sensor_value+0x2c8>)
 80092c4:	7818      	ldrb	r0, [r3, #0]
 80092c6:	78ba      	ldrb	r2, [r7, #2]
 80092c8:	78f9      	ldrb	r1, [r7, #3]
 80092ca:	2300      	movs	r3, #0
 80092cc:	f000 fdcd 	bl	8009e6a <generate_can_header>
 80092d0:	4602      	mov	r2, r0
 80092d2:	4b83      	ldr	r3, [pc, #524]	; (80094e0 <send_sensor_value+0x2cc>)
 80092d4:	605a      	str	r2, [r3, #4]
			memcpy(TxData,&tmpr,sizeof(tmpr));
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	4a82      	ldr	r2, [pc, #520]	; (80094e4 <send_sensor_value+0x2d0>)
 80092da:	6013      	str	r3, [r2, #0]

			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f004 fe07 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80092e2:	4603      	mov	r3, r0
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	4b80      	ldr	r3, [pc, #512]	; (80094e8 <send_sensor_value+0x2d4>)
 80092e8:	701a      	strb	r2, [r3, #0]
			{
			  TxHeader.DLC=sizeof(tmpr);
 80092ea:	4b7d      	ldr	r3, [pc, #500]	; (80094e0 <send_sensor_value+0x2cc>)
 80092ec:	2204      	movs	r2, #4
 80092ee:	611a      	str	r2, [r3, #16]
			  if( HAL_CAN_AddTxMessage(hcan,&TxHeader, (uint8_t *)TxData, TxMailbox)!= HAL_OK)
 80092f0:	f107 030c 	add.w	r3, r7, #12
 80092f4:	4a7b      	ldr	r2, [pc, #492]	; (80094e4 <send_sensor_value+0x2d0>)
 80092f6:	497a      	ldr	r1, [pc, #488]	; (80094e0 <send_sensor_value+0x2cc>)
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f004 fd1e 	bl	800dd3a <HAL_CAN_AddTxMessage>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 80da 	beq.w	80094ba <send_sensor_value+0x2a6>
			  {
				Error_Handler();
 8009306:	f001 fb75 	bl	800a9f4 <Error_Handler>
			  }
			}
			break;
 800930a:	e0d6      	b.n	80094ba <send_sensor_value+0x2a6>

        case FORCE_REQ:
			force=force_values[sensID];
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	4a78      	ldr	r2, [pc, #480]	; (80094f0 <send_sensor_value+0x2dc>)
 8009310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
			TxHeader.ExtId=generate_can_header(CANDeviceID,sensID,ReqType,DATA_REPLY_MSG);
 8009316:	4b71      	ldr	r3, [pc, #452]	; (80094dc <send_sensor_value+0x2c8>)
 8009318:	7818      	ldrb	r0, [r3, #0]
 800931a:	78ba      	ldrb	r2, [r7, #2]
 800931c:	78f9      	ldrb	r1, [r7, #3]
 800931e:	2300      	movs	r3, #0
 8009320:	f000 fda3 	bl	8009e6a <generate_can_header>
 8009324:	4602      	mov	r2, r0
 8009326:	4b6e      	ldr	r3, [pc, #440]	; (80094e0 <send_sensor_value+0x2cc>)
 8009328:	605a      	str	r2, [r3, #4]
			memcpy(TxData,&force,sizeof(force));
 800932a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932c:	4a6d      	ldr	r2, [pc, #436]	; (80094e4 <send_sensor_value+0x2d0>)
 800932e:	6013      	str	r3, [r2, #0]
			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f004 fddd 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8009336:	4603      	mov	r3, r0
 8009338:	b2da      	uxtb	r2, r3
 800933a:	4b6b      	ldr	r3, [pc, #428]	; (80094e8 <send_sensor_value+0x2d4>)
 800933c:	701a      	strb	r2, [r3, #0]
			{
			  TxHeader.DLC=sizeof(force);
 800933e:	4b68      	ldr	r3, [pc, #416]	; (80094e0 <send_sensor_value+0x2cc>)
 8009340:	2204      	movs	r2, #4
 8009342:	611a      	str	r2, [r3, #16]
			  if( HAL_CAN_AddTxMessage(hcan,&TxHeader, (uint8_t *)TxData, TxMailbox)!= HAL_OK)
 8009344:	f107 030c 	add.w	r3, r7, #12
 8009348:	4a66      	ldr	r2, [pc, #408]	; (80094e4 <send_sensor_value+0x2d0>)
 800934a:	4965      	ldr	r1, [pc, #404]	; (80094e0 <send_sensor_value+0x2cc>)
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f004 fcf4 	bl	800dd3a <HAL_CAN_AddTxMessage>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80b2 	beq.w	80094be <send_sensor_value+0x2aa>
			  {
				Error_Handler();
 800935a:	f001 fb4b 	bl	800a9f4 <Error_Handler>
			  }
			}
			break;
 800935e:	e0ae      	b.n	80094be <send_sensor_value+0x2aa>

        case DEVICEID_REQ:
			TxHeader.ExtId=generate_can_header(CANDeviceID,0,ReqType,DEVICEID_REPLY_MSG);
 8009360:	4b5e      	ldr	r3, [pc, #376]	; (80094dc <send_sensor_value+0x2c8>)
 8009362:	7818      	ldrb	r0, [r3, #0]
 8009364:	78ba      	ldrb	r2, [r7, #2]
 8009366:	2301      	movs	r3, #1
 8009368:	2100      	movs	r1, #0
 800936a:	f000 fd7e 	bl	8009e6a <generate_can_header>
 800936e:	4602      	mov	r2, r0
 8009370:	4b5b      	ldr	r3, [pc, #364]	; (80094e0 <send_sensor_value+0x2cc>)
 8009372:	605a      	str	r2, [r3, #4]

			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f004 fdbb 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800937a:	4603      	mov	r3, r0
 800937c:	b2da      	uxtb	r2, r3
 800937e:	4b5a      	ldr	r3, [pc, #360]	; (80094e8 <send_sensor_value+0x2d4>)
 8009380:	701a      	strb	r2, [r3, #0]
			{
			  TxHeader.DLC=5;
 8009382:	4b57      	ldr	r3, [pc, #348]	; (80094e0 <send_sensor_value+0x2cc>)
 8009384:	2205      	movs	r2, #5
 8009386:	611a      	str	r2, [r3, #16]
			  if( HAL_CAN_AddTxMessage(hcan,&TxHeader, (uint8_t *)RxData, TxMailbox)!= HAL_OK)
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	4a59      	ldr	r2, [pc, #356]	; (80094f4 <send_sensor_value+0x2e0>)
 800938e:	4954      	ldr	r1, [pc, #336]	; (80094e0 <send_sensor_value+0x2cc>)
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f004 fcd2 	bl	800dd3a <HAL_CAN_AddTxMessage>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8092 	beq.w	80094c2 <send_sensor_value+0x2ae>
			  {
				Error_Handler();
 800939e:	f001 fb29 	bl	800a9f4 <Error_Handler>
			  }
			}
        	break;
 80093a2:	e08e      	b.n	80094c2 <send_sensor_value+0x2ae>

        case HUMIDITY_REF_REQ:
			TxHeader.ExtId=generate_can_header(CANDeviceID,0,ReqType,REF_SENSOR_REPLY_MSG);
 80093a4:	4b4d      	ldr	r3, [pc, #308]	; (80094dc <send_sensor_value+0x2c8>)
 80093a6:	7818      	ldrb	r0, [r3, #0]
 80093a8:	78ba      	ldrb	r2, [r7, #2]
 80093aa:	2302      	movs	r3, #2
 80093ac:	2100      	movs	r1, #0
 80093ae:	f000 fd5c 	bl	8009e6a <generate_can_header>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b4a      	ldr	r3, [pc, #296]	; (80094e0 <send_sensor_value+0x2cc>)
 80093b6:	605a      	str	r2, [r3, #4]

			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f004 fd99 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80093be:	4603      	mov	r3, r0
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	4b49      	ldr	r3, [pc, #292]	; (80094e8 <send_sensor_value+0x2d4>)
 80093c4:	701a      	strb	r2, [r3, #0]
			{
			  TxHeader.DLC=sizeof(ref_hum);
 80093c6:	4b46      	ldr	r3, [pc, #280]	; (80094e0 <send_sensor_value+0x2cc>)
 80093c8:	2204      	movs	r2, #4
 80093ca:	611a      	str	r2, [r3, #16]
			  if( HAL_CAN_AddTxMessage(hcan, &TxHeader, (uint8_t *)&ref_hum, TxMailbox)!= HAL_OK)
 80093cc:	f107 030c 	add.w	r3, r7, #12
 80093d0:	4a49      	ldr	r2, [pc, #292]	; (80094f8 <send_sensor_value+0x2e4>)
 80093d2:	4943      	ldr	r1, [pc, #268]	; (80094e0 <send_sensor_value+0x2cc>)
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f004 fcb0 	bl	800dd3a <HAL_CAN_AddTxMessage>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d072      	beq.n	80094c6 <send_sensor_value+0x2b2>
			  {
				Error_Handler();
 80093e0:	f001 fb08 	bl	800a9f4 <Error_Handler>
			  }
			}
        	break;
 80093e4:	e06f      	b.n	80094c6 <send_sensor_value+0x2b2>
        case TEMPERATURE_REF_REQ:
			TxHeader.ExtId=generate_can_header(CANDeviceID,0,ReqType,REF_SENSOR_REPLY_MSG);
 80093e6:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <send_sensor_value+0x2c8>)
 80093e8:	7818      	ldrb	r0, [r3, #0]
 80093ea:	78ba      	ldrb	r2, [r7, #2]
 80093ec:	2302      	movs	r3, #2
 80093ee:	2100      	movs	r1, #0
 80093f0:	f000 fd3b 	bl	8009e6a <generate_can_header>
 80093f4:	4602      	mov	r2, r0
 80093f6:	4b3a      	ldr	r3, [pc, #232]	; (80094e0 <send_sensor_value+0x2cc>)
 80093f8:	605a      	str	r2, [r3, #4]

			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f004 fd78 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8009400:	4603      	mov	r3, r0
 8009402:	b2da      	uxtb	r2, r3
 8009404:	4b38      	ldr	r3, [pc, #224]	; (80094e8 <send_sensor_value+0x2d4>)
 8009406:	701a      	strb	r2, [r3, #0]
			{
			  TxHeader.DLC=sizeof(ref_temp);
 8009408:	4b35      	ldr	r3, [pc, #212]	; (80094e0 <send_sensor_value+0x2cc>)
 800940a:	2204      	movs	r2, #4
 800940c:	611a      	str	r2, [r3, #16]
			  if( HAL_CAN_AddTxMessage(hcan,&TxHeader, (uint8_t *)&ref_temp, TxMailbox)!= HAL_OK)
 800940e:	f107 030c 	add.w	r3, r7, #12
 8009412:	4a3a      	ldr	r2, [pc, #232]	; (80094fc <send_sensor_value+0x2e8>)
 8009414:	4932      	ldr	r1, [pc, #200]	; (80094e0 <send_sensor_value+0x2cc>)
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f004 fc8f 	bl	800dd3a <HAL_CAN_AddTxMessage>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d053      	beq.n	80094ca <send_sensor_value+0x2b6>
			  {
				Error_Handler();
 8009422:	f001 fae7 	bl	800a9f4 <Error_Handler>
			  }
			}
        	break;
 8009426:	e050      	b.n	80094ca <send_sensor_value+0x2b6>

        case ACCELERAMTER_REQ:
  			TxHeader.ExtId=generate_can_header(CANDeviceID,0, ReqType, ACCELERAMETER_REPLY_MSG);
 8009428:	4b2c      	ldr	r3, [pc, #176]	; (80094dc <send_sensor_value+0x2c8>)
 800942a:	7818      	ldrb	r0, [r3, #0]
 800942c:	78ba      	ldrb	r2, [r7, #2]
 800942e:	2303      	movs	r3, #3
 8009430:	2100      	movs	r1, #0
 8009432:	f000 fd1a 	bl	8009e6a <generate_can_header>
 8009436:	4602      	mov	r2, r0
 8009438:	4b29      	ldr	r3, [pc, #164]	; (80094e0 <send_sensor_value+0x2cc>)
 800943a:	605a      	str	r2, [r3, #4]

  			if ((FreeMailBox = HAL_CAN_GetTxMailboxesFreeLevel(hcan))>= 0)
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f004 fd57 	bl	800def0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8009442:	4603      	mov	r3, r0
 8009444:	b2da      	uxtb	r2, r3
 8009446:	4b28      	ldr	r3, [pc, #160]	; (80094e8 <send_sensor_value+0x2d4>)
 8009448:	701a      	strb	r2, [r3, #0]
  			{
  				TxData[0] = Acce_X & 0xff;
 800944a:	4b2d      	ldr	r3, [pc, #180]	; (8009500 <send_sensor_value+0x2ec>)
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	b2da      	uxtb	r2, r3
 8009450:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <send_sensor_value+0x2d0>)
 8009452:	701a      	strb	r2, [r3, #0]
		  		TxData[1] = (Acce_X >> 8) & 0xff;
 8009454:	4b2a      	ldr	r3, [pc, #168]	; (8009500 <send_sensor_value+0x2ec>)
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b29b      	uxth	r3, r3
 800945c:	b2da      	uxtb	r2, r3
 800945e:	4b21      	ldr	r3, [pc, #132]	; (80094e4 <send_sensor_value+0x2d0>)
 8009460:	705a      	strb	r2, [r3, #1]
				TxData[2] = Acce_Y & 0xff;
 8009462:	4b28      	ldr	r3, [pc, #160]	; (8009504 <send_sensor_value+0x2f0>)
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b2da      	uxtb	r2, r3
 8009468:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <send_sensor_value+0x2d0>)
 800946a:	709a      	strb	r2, [r3, #2]
				TxData[3] = (Acce_Y >> 8) & 0xff;
 800946c:	4b25      	ldr	r3, [pc, #148]	; (8009504 <send_sensor_value+0x2f0>)
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	0a1b      	lsrs	r3, r3, #8
 8009472:	b29b      	uxth	r3, r3
 8009474:	b2da      	uxtb	r2, r3
 8009476:	4b1b      	ldr	r3, [pc, #108]	; (80094e4 <send_sensor_value+0x2d0>)
 8009478:	70da      	strb	r2, [r3, #3]
				TxData[4] = Acce_Z & 0xff;
 800947a:	4b23      	ldr	r3, [pc, #140]	; (8009508 <send_sensor_value+0x2f4>)
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b2da      	uxtb	r2, r3
 8009480:	4b18      	ldr	r3, [pc, #96]	; (80094e4 <send_sensor_value+0x2d0>)
 8009482:	711a      	strb	r2, [r3, #4]
				TxData[5] = (Acce_Z >> 8) & 0xff;
 8009484:	4b20      	ldr	r3, [pc, #128]	; (8009508 <send_sensor_value+0x2f4>)
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	0a1b      	lsrs	r3, r3, #8
 800948a:	b29b      	uxth	r3, r3
 800948c:	b2da      	uxtb	r2, r3
 800948e:	4b15      	ldr	r3, [pc, #84]	; (80094e4 <send_sensor_value+0x2d0>)
 8009490:	715a      	strb	r2, [r3, #5]

				TxHeader.DLC=6;
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <send_sensor_value+0x2cc>)
 8009494:	2206      	movs	r2, #6
 8009496:	611a      	str	r2, [r3, #16]
				if( HAL_CAN_AddTxMessage(hcan,&TxHeader, TxData, TxMailbox)!= HAL_OK)
 8009498:	f107 030c 	add.w	r3, r7, #12
 800949c:	4a11      	ldr	r2, [pc, #68]	; (80094e4 <send_sensor_value+0x2d0>)
 800949e:	4910      	ldr	r1, [pc, #64]	; (80094e0 <send_sensor_value+0x2cc>)
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f004 fc4a 	bl	800dd3a <HAL_CAN_AddTxMessage>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d010      	beq.n	80094ce <send_sensor_value+0x2ba>
				{
				Error_Handler();
 80094ac:	f001 faa2 	bl	800a9f4 <Error_Handler>
				}
  			}
          	break;
 80094b0:	e00d      	b.n	80094ce <send_sensor_value+0x2ba>

        default: break;
 80094b2:	bf00      	nop
 80094b4:	e00c      	b.n	80094d0 <send_sensor_value+0x2bc>
			break;
 80094b6:	bf00      	nop
 80094b8:	e00a      	b.n	80094d0 <send_sensor_value+0x2bc>
			break;
 80094ba:	bf00      	nop
 80094bc:	e008      	b.n	80094d0 <send_sensor_value+0x2bc>
			break;
 80094be:	bf00      	nop
 80094c0:	e006      	b.n	80094d0 <send_sensor_value+0x2bc>
        	break;
 80094c2:	bf00      	nop
 80094c4:	e004      	b.n	80094d0 <send_sensor_value+0x2bc>
        	break;
 80094c6:	bf00      	nop
 80094c8:	e002      	b.n	80094d0 <send_sensor_value+0x2bc>
        	break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <send_sensor_value+0x2bc>
          	break;
 80094ce:	bf00      	nop

    }
}
 80094d0:	bf00      	nop
 80094d2:	3738      	adds	r7, #56	; 0x38
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000160 	.word	0x20000160
 80094dc:	2000019c 	.word	0x2000019c
 80094e0:	200002d8 	.word	0x200002d8
 80094e4:	200001c4 	.word	0x200001c4
 80094e8:	200001a8 	.word	0x200001a8
 80094ec:	20000290 	.word	0x20000290
 80094f0:	2000003c 	.word	0x2000003c
 80094f4:	200002cc 	.word	0x200002cc
 80094f8:	200001a4 	.word	0x200001a4
 80094fc:	200001a0 	.word	0x200001a0
 8009500:	200003f0 	.word	0x200003f0
 8009504:	20000144 	.word	0x20000144
 8009508:	200002d4 	.word	0x200002d4

0800950c <user_delay_ms>:
void user_delay_ms(uint32_t period)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f002 fd47 	bl	800bfa8 <HAL_Delay>
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
	...

08009524 <get_chip_pin>:
pin_port_s get_chip_pin(uint8_t id)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	70fb      	strb	r3, [r7, #3]
	pin_port_s temp;
	switch(id)
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	2b0e      	cmp	r3, #14
 8009534:	d83c      	bhi.n	80095b0 <get_chip_pin+0x8c>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <get_chip_pin+0x18>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009579 	.word	0x08009579
 8009540:	08009585 	.word	0x08009585
 8009544:	0800958f 	.word	0x0800958f
 8009548:	0800959b 	.word	0x0800959b
 800954c:	080095a5 	.word	0x080095a5
 8009550:	08009579 	.word	0x08009579
 8009554:	08009585 	.word	0x08009585
 8009558:	0800958f 	.word	0x0800958f
 800955c:	0800959b 	.word	0x0800959b
 8009560:	080095a5 	.word	0x080095a5
 8009564:	08009579 	.word	0x08009579
 8009568:	08009585 	.word	0x08009585
 800956c:	0800958f 	.word	0x0800958f
 8009570:	0800959b 	.word	0x0800959b
 8009574:	080095a5 	.word	0x080095a5
	{
	case 0:
	case 5:
	case 10:
			temp.Pin=CS010611_Pin;
 8009578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800957c:	813b      	strh	r3, [r7, #8]
			temp.Port=CS010611_GPIO_Port;
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <get_chip_pin+0xa8>)
 8009580:	60fb      	str	r3, [r7, #12]
			break;
 8009582:	e015      	b.n	80095b0 <get_chip_pin+0x8c>
	case 1:
	case 6:
	case 11:
			temp.Pin=CS020712_Pin;
 8009584:	2304      	movs	r3, #4
 8009586:	813b      	strh	r3, [r7, #8]
			temp.Port=CS020712_GPIO_Port;
 8009588:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <get_chip_pin+0xac>)
 800958a:	60fb      	str	r3, [r7, #12]
			break;
 800958c:	e010      	b.n	80095b0 <get_chip_pin+0x8c>
	case 2:
	case 7:
	case 12:
			temp.Pin=CS030813_Pin;
 800958e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009592:	813b      	strh	r3, [r7, #8]
			temp.Port=CS030813_GPIO_Port;
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <get_chip_pin+0xac>)
 8009596:	60fb      	str	r3, [r7, #12]
			break;
 8009598:	e00a      	b.n	80095b0 <get_chip_pin+0x8c>
	case 3:
	case 8:
	case 13:
			temp.Pin=CS040914_Pin;
 800959a:	2380      	movs	r3, #128	; 0x80
 800959c:	813b      	strh	r3, [r7, #8]
			temp.Port=CS040914_GPIO_Port;
 800959e:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <get_chip_pin+0xa8>)
 80095a0:	60fb      	str	r3, [r7, #12]
			break;
 80095a2:	e005      	b.n	80095b0 <get_chip_pin+0x8c>
	case 4:
	case 9:
	case 14:
			temp.Pin=CS051015_Pin;
 80095a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a8:	813b      	strh	r3, [r7, #8]
			temp.Port=CS051015_GPIO_Port;
 80095aa:	4b08      	ldr	r3, [pc, #32]	; (80095cc <get_chip_pin+0xa8>)
 80095ac:	60fb      	str	r3, [r7, #12]
			break;
 80095ae:	bf00      	nop
	}
 return temp;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	461a      	mov	r2, r3
 80095b4:	f107 0308 	add.w	r3, r7, #8
 80095b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80095bc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	48000800 	.word	0x48000800
 80095d0:	48000400 	.word	0x48000400

080095d4 <chip_select>:

void chip_select(uint8_t id)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
  pin_port_s temp = get_chip_pin(id);
 80095de:	f107 0308 	add.w	r3, r7, #8
 80095e2:	79fa      	ldrb	r2, [r7, #7]
 80095e4:	4611      	mov	r1, r2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff ff9c 	bl	8009524 <get_chip_pin>
  HAL_GPIO_WritePin(temp.Port, temp.Pin, GPIO_PIN_RESET);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8939      	ldrh	r1, [r7, #8]
 80095f0:	2200      	movs	r2, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f005 fdfc 	bl	800f1f0 <HAL_GPIO_WritePin>
}
 80095f8:	bf00      	nop
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <chip_unselect>:

void chip_unselect(uint8_t id)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	71fb      	strb	r3, [r7, #7]
   pin_port_s temp = get_chip_pin(id);
 800960a:	f107 0308 	add.w	r3, r7, #8
 800960e:	79fa      	ldrb	r2, [r7, #7]
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff ff86 	bl	8009524 <get_chip_pin>
   HAL_GPIO_WritePin(temp.Port, temp.Pin, GPIO_PIN_SET);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8939      	ldrh	r1, [r7, #8]
 800961c:	2201      	movs	r2, #1
 800961e:	4618      	mov	r0, r3
 8009620:	f005 fde6 	bl	800f1f0 <HAL_GPIO_WritePin>
}
 8009624:	bf00      	nop
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <get_force_chip_pin>:

pin_port_s get_force_chip_pin(uint8_t id)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
	pin_port_s temp;
	switch(id)
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	2b09      	cmp	r3, #9
 800963c:	d84d      	bhi.n	80096da <get_force_chip_pin+0xae>
 800963e:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <get_force_chip_pin+0x18>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	0800966d 	.word	0x0800966d
 8009648:	08009677 	.word	0x08009677
 800964c:	08009685 	.word	0x08009685
 8009650:	08009693 	.word	0x08009693
 8009654:	0800969f 	.word	0x0800969f
 8009658:	080096a9 	.word	0x080096a9
 800965c:	080096b3 	.word	0x080096b3
 8009660:	080096bd 	.word	0x080096bd
 8009664:	080096c7 	.word	0x080096c7
 8009668:	080096d1 	.word	0x080096d1
	{
		case 0:
			temp.Pin=R1_Pin;
 800966c:	2310      	movs	r3, #16
 800966e:	813b      	strh	r3, [r7, #8]
			temp.Port=R1_GPIO_Port;
 8009670:	4b21      	ldr	r3, [pc, #132]	; (80096f8 <get_force_chip_pin+0xcc>)
 8009672:	60fb      	str	r3, [r7, #12]
			break;
 8009674:	e032      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 1:
			temp.Pin=R2_Pin;
 8009676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800967a:	813b      	strh	r3, [r7, #8]
			temp.Port=R2_GPIO_Port;
 800967c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009680:	60fb      	str	r3, [r7, #12]
			break;
 8009682:	e02b      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 2:
			temp.Pin=R3_Pin;
 8009684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009688:	813b      	strh	r3, [r7, #8]
			temp.Port=R3_GPIO_Port;
 800968a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800968e:	60fb      	str	r3, [r7, #12]
			break;
 8009690:	e024      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 3:
			temp.Pin=R4_Pin;
 8009692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009696:	813b      	strh	r3, [r7, #8]
			temp.Port=R4_GPIO_Port;
 8009698:	4b17      	ldr	r3, [pc, #92]	; (80096f8 <get_force_chip_pin+0xcc>)
 800969a:	60fb      	str	r3, [r7, #12]
			break;
 800969c:	e01e      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 4:
			temp.Pin=R5_Pin;
 800969e:	2320      	movs	r3, #32
 80096a0:	813b      	strh	r3, [r7, #8]
			temp.Port=R5_GPIO_Port;
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <get_force_chip_pin+0xcc>)
 80096a4:	60fb      	str	r3, [r7, #12]
			break;
 80096a6:	e019      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 5:
			temp.Pin=R6_Pin;
 80096a8:	2302      	movs	r3, #2
 80096aa:	813b      	strh	r3, [r7, #8]
			temp.Port=R6_GPIO_Port;
 80096ac:	4b12      	ldr	r3, [pc, #72]	; (80096f8 <get_force_chip_pin+0xcc>)
 80096ae:	60fb      	str	r3, [r7, #12]
			break;
 80096b0:	e014      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 6:
			temp.Pin=R7_Pin;
 80096b2:	2320      	movs	r3, #32
 80096b4:	813b      	strh	r3, [r7, #8]
			temp.Port=R7_GPIO_Port;
 80096b6:	4b11      	ldr	r3, [pc, #68]	; (80096fc <get_force_chip_pin+0xd0>)
 80096b8:	60fb      	str	r3, [r7, #12]
			break;
 80096ba:	e00f      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 7:
			temp.Pin=R8_Pin;
 80096bc:	2301      	movs	r3, #1
 80096be:	813b      	strh	r3, [r7, #8]
			temp.Port=R8_GPIO_Port;
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <get_force_chip_pin+0xcc>)
 80096c2:	60fb      	str	r3, [r7, #12]
			break;
 80096c4:	e00a      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 8:
			temp.Pin=R9_Pin;
 80096c6:	2304      	movs	r3, #4
 80096c8:	813b      	strh	r3, [r7, #8]
			temp.Port=R9_GPIO_Port;
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <get_force_chip_pin+0xd4>)
 80096cc:	60fb      	str	r3, [r7, #12]
			break;
 80096ce:	e005      	b.n	80096dc <get_force_chip_pin+0xb0>
		case 9:
			temp.Pin=R10_Pin;
 80096d0:	2308      	movs	r3, #8
 80096d2:	813b      	strh	r3, [r7, #8]
			temp.Port=R10_GPIO_Port;
 80096d4:	4b08      	ldr	r3, [pc, #32]	; (80096f8 <get_force_chip_pin+0xcc>)
 80096d6:	60fb      	str	r3, [r7, #12]
			break;
 80096d8:	e000      	b.n	80096dc <get_force_chip_pin+0xb0>

		default:
			break;
 80096da:	bf00      	nop
	}
 return temp;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	461a      	mov	r2, r3
 80096e0:	f107 0308 	add.w	r3, r7, #8
 80096e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80096e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	48000400 	.word	0x48000400
 80096fc:	48000800 	.word	0x48000800
 8009700:	48000c00 	.word	0x48000c00

08009704 <force_sensor_select>:

void force_sensor_select(uint8_t row)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
	pin_port_s f_row=get_force_chip_pin(row);
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	79fa      	ldrb	r2, [r7, #7]
 8009714:	4611      	mov	r1, r2
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff ff88 	bl	800962c <get_force_chip_pin>
	HAL_GPIO_WritePin(f_row.Port, f_row.Pin, GPIO_PIN_SET);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8939      	ldrh	r1, [r7, #8]
 8009720:	2201      	movs	r2, #1
 8009722:	4618      	mov	r0, r3
 8009724:	f005 fd64 	bl	800f1f0 <HAL_GPIO_WritePin>
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <force_sensor_unselect>:


void force_sensor_unselect(uint8_t row)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	71fb      	strb	r3, [r7, #7]
	pin_port_s f_row=get_force_chip_pin(row);
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	79fa      	ldrb	r2, [r7, #7]
 8009740:	4611      	mov	r1, r2
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff ff72 	bl	800962c <get_force_chip_pin>
	HAL_GPIO_WritePin(f_row.Port, f_row.Pin, GPIO_PIN_RESET);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8939      	ldrh	r1, [r7, #8]
 800974c:	2200      	movs	r2, #0
 800974e:	4618      	mov	r0, r3
 8009750:	f005 fd4e 	bl	800f1f0 <HAL_GPIO_WritePin>
}
 8009754:	bf00      	nop
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <get_temperature_humidity>:

void get_temperature_humidity (void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
	for (int i=0; i < TOTAL_TH_SENSORS_PERTILE; i++)
 8009762:	2300      	movs	r3, #0
 8009764:	607b      	str	r3, [r7, #4]
 8009766:	e090      	b.n	800988a <get_temperature_humidity+0x12e>
	{
		  switch (i)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b0e      	cmp	r3, #14
 800976c:	f200 8085 	bhi.w	800987a <get_temperature_humidity+0x11e>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <get_temperature_humidity+0x1c>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097b5 	.word	0x080097b5
 800977c:	080097b5 	.word	0x080097b5
 8009780:	080097b5 	.word	0x080097b5
 8009784:	080097b5 	.word	0x080097b5
 8009788:	080097b5 	.word	0x080097b5
 800978c:	080097f7 	.word	0x080097f7
 8009790:	080097f7 	.word	0x080097f7
 8009794:	080097f7 	.word	0x080097f7
 8009798:	080097f7 	.word	0x080097f7
 800979c:	080097f7 	.word	0x080097f7
 80097a0:	08009839 	.word	0x08009839
 80097a4:	08009839 	.word	0x08009839
 80097a8:	08009839 	.word	0x08009839
 80097ac:	08009839 	.word	0x08009839
 80097b0:	08009839 	.word	0x08009839
		  case 0:
		  case 1:
		  case 2:
		  case 3:
		  case 4:
			  if(chip_id[i] == HTS221_ID)
 80097b4:	4a39      	ldr	r2, [pc, #228]	; (800989c <get_temperature_humidity+0x140>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4413      	add	r3, r2
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2bbc      	cmp	r3, #188	; 0xbc
 80097be:	d10d      	bne.n	80097dc <get_temperature_humidity+0x80>
			  {
				hts221_get_temp_humid(&hts221_ctx1, &temperature_values[i], &humidity_values[i], i);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4a36      	ldr	r2, [pc, #216]	; (80098a0 <get_temperature_humidity+0x144>)
 80097c6:	1899      	adds	r1, r3, r2
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4a35      	ldr	r2, [pc, #212]	; (80098a4 <get_temperature_humidity+0x148>)
 80097ce:	441a      	add	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	4834      	ldr	r0, [pc, #208]	; (80098a8 <get_temperature_humidity+0x14c>)
 80097d6:	f001 ff9b 	bl	800b710 <hts221_get_temp_humid>
			  {
				  // chip_id error
				  temperature_values[i] = 98.9;
				  humidity_values[i] = 989;
			  }
			break;
 80097da:	e04e      	b.n	800987a <get_temperature_humidity+0x11e>
				  temperature_values[i] = 98.9;
 80097dc:	4a30      	ldr	r2, [pc, #192]	; (80098a0 <get_temperature_humidity+0x144>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	4a31      	ldr	r2, [pc, #196]	; (80098ac <get_temperature_humidity+0x150>)
 80097e6:	601a      	str	r2, [r3, #0]
				  humidity_values[i] = 989;
 80097e8:	4a2e      	ldr	r2, [pc, #184]	; (80098a4 <get_temperature_humidity+0x148>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	4a2f      	ldr	r2, [pc, #188]	; (80098b0 <get_temperature_humidity+0x154>)
 80097f2:	601a      	str	r2, [r3, #0]
			break;
 80097f4:	e041      	b.n	800987a <get_temperature_humidity+0x11e>
		  case 5:
		  case 6:
		  case 7:
		  case 8:
		  case 9:
			if(chip_id[i] == HTS221_ID)
 80097f6:	4a29      	ldr	r2, [pc, #164]	; (800989c <get_temperature_humidity+0x140>)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4413      	add	r3, r2
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2bbc      	cmp	r3, #188	; 0xbc
 8009800:	d10d      	bne.n	800981e <get_temperature_humidity+0xc2>
			{
				hts221_get_temp_humid(&hts221_ctx2, &temperature_values[i], &humidity_values[i], i);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4a26      	ldr	r2, [pc, #152]	; (80098a0 <get_temperature_humidity+0x144>)
 8009808:	1899      	adds	r1, r3, r2
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4a25      	ldr	r2, [pc, #148]	; (80098a4 <get_temperature_humidity+0x148>)
 8009810:	441a      	add	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	b2db      	uxtb	r3, r3
 8009816:	4827      	ldr	r0, [pc, #156]	; (80098b4 <get_temperature_humidity+0x158>)
 8009818:	f001 ff7a 	bl	800b710 <hts221_get_temp_humid>
			{
			  // chip_id error
			  temperature_values[i] = 98.9;
			  humidity_values[i] = 989;
			}
			break;
 800981c:	e02d      	b.n	800987a <get_temperature_humidity+0x11e>
			  temperature_values[i] = 98.9;
 800981e:	4a20      	ldr	r2, [pc, #128]	; (80098a0 <get_temperature_humidity+0x144>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	4a21      	ldr	r2, [pc, #132]	; (80098ac <get_temperature_humidity+0x150>)
 8009828:	601a      	str	r2, [r3, #0]
			  humidity_values[i] = 989;
 800982a:	4a1e      	ldr	r2, [pc, #120]	; (80098a4 <get_temperature_humidity+0x148>)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <get_temperature_humidity+0x154>)
 8009834:	601a      	str	r2, [r3, #0]
			break;
 8009836:	e020      	b.n	800987a <get_temperature_humidity+0x11e>
		  case 10:
		  case 11:
		  case 12:
		  case 13:
		  case 14:
			if(chip_id[i] == HTS221_ID)
 8009838:	4a18      	ldr	r2, [pc, #96]	; (800989c <get_temperature_humidity+0x140>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2bbc      	cmp	r3, #188	; 0xbc
 8009842:	d10d      	bne.n	8009860 <get_temperature_humidity+0x104>
			{
				hts221_get_temp_humid(&hts221_ctx3, &temperature_values[i], &humidity_values[i], i);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4a15      	ldr	r2, [pc, #84]	; (80098a0 <get_temperature_humidity+0x144>)
 800984a:	1899      	adds	r1, r3, r2
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4a14      	ldr	r2, [pc, #80]	; (80098a4 <get_temperature_humidity+0x148>)
 8009852:	441a      	add	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	4817      	ldr	r0, [pc, #92]	; (80098b8 <get_temperature_humidity+0x15c>)
 800985a:	f001 ff59 	bl	800b710 <hts221_get_temp_humid>
			{
			  // chip_id error
			  temperature_values[i] = 98.9;
			  humidity_values[i] = 989;
			}
			break;
 800985e:	e00b      	b.n	8009878 <get_temperature_humidity+0x11c>
			  temperature_values[i] = 98.9;
 8009860:	4a0f      	ldr	r2, [pc, #60]	; (80098a0 <get_temperature_humidity+0x144>)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	4a10      	ldr	r2, [pc, #64]	; (80098ac <get_temperature_humidity+0x150>)
 800986a:	601a      	str	r2, [r3, #0]
			  humidity_values[i] = 989;
 800986c:	4a0d      	ldr	r2, [pc, #52]	; (80098a4 <get_temperature_humidity+0x148>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <get_temperature_humidity+0x154>)
 8009876:	601a      	str	r2, [r3, #0]
			break;
 8009878:	bf00      	nop

		  }
		chip_unselect(i);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff febe 	bl	8009600 <chip_unselect>
	for (int i=0; i < TOTAL_TH_SENSORS_PERTILE; i++)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3301      	adds	r3, #1
 8009888:	607b      	str	r3, [r7, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b0e      	cmp	r3, #14
 800988e:	f77f af6b 	ble.w	8009768 <get_temperature_humidity+0xc>
	}
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	2000002c 	.word	0x2000002c
 80098a0:	20000290 	.word	0x20000290
 80098a4:	20000160 	.word	0x20000160
 80098a8:	200003e4 	.word	0x200003e4
 80098ac:	42c5cccd 	.word	0x42c5cccd
 80098b0:	44774000 	.word	0x44774000
 80098b4:	2000012c 	.word	0x2000012c
 80098b8:	200001b8 	.word	0x200001b8

080098bc <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098cc:	d120      	bne.n	8009910 <HAL_ADC_ConvCpltCallback+0x54>
	{
		for (int i= 0; i <F_ROWS_PERTILE; i++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	e013      	b.n	80098fc <HAL_ADC_ConvCpltCallback+0x40>
		{
			ADCval[SampleCount][i] = ADC_BUF[i];
 80098d4:	4b11      	ldr	r3, [pc, #68]	; (800991c <HAL_ADC_ConvCpltCallback+0x60>)
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	4619      	mov	r1, r3
 80098dc:	4a10      	ldr	r2, [pc, #64]	; (8009920 <HAL_ADC_ConvCpltCallback+0x64>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80098e4:	480f      	ldr	r0, [pc, #60]	; (8009924 <HAL_ADC_ConvCpltCallback+0x68>)
 80098e6:	460b      	mov	r3, r1
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	440b      	add	r3, r1
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	68f9      	ldr	r1, [r7, #12]
 80098f0:	440b      	add	r3, r1
 80098f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (int i= 0; i <F_ROWS_PERTILE; i++)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3301      	adds	r3, #1
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b05      	cmp	r3, #5
 8009900:	dde8      	ble.n	80098d4 <HAL_ADC_ConvCpltCallback+0x18>
		}
		SampleCount++;
 8009902:	4b06      	ldr	r3, [pc, #24]	; (800991c <HAL_ADC_ConvCpltCallback+0x60>)
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	3301      	adds	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <HAL_ADC_ConvCpltCallback+0x60>)
 800990e:	801a      	strh	r2, [r3, #0]
	}
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	20000028 	.word	0x20000028
 8009920:	200003cc 	.word	0x200003cc
 8009924:	2000030c 	.word	0x2000030c

08009928 <DataProcessing>:

// remove the min, max and average the rest
void  DataProcessing (void)
{
 8009928:	b480      	push	{r7}
 800992a:	b08f      	sub	sp, #60	; 0x3c
 800992c:	af00      	add	r7, sp, #0
	uint8_t  i, j;
    uint16_t Smallest[F_ROWS_PERTILE];
    uint16_t Largest[F_ROWS_PERTILE];
    uint32_t Sum[F_ROWS_PERTILE]= {0};
 800992e:	1d3b      	adds	r3, r7, #4
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	605a      	str	r2, [r3, #4]
 8009936:	609a      	str	r2, [r3, #8]
 8009938:	60da      	str	r2, [r3, #12]
 800993a:	611a      	str	r2, [r3, #16]
 800993c:	615a      	str	r2, [r3, #20]

    for (i = 0; i < F_ROWS_PERTILE; i++)
 800993e:	2300      	movs	r3, #0
 8009940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009944:	e021      	b.n	800998a <DataProcessing+0x62>
    {
			Smallest[i] = ADCval[0][i];
 8009946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800994a:	4a74      	ldr	r2, [pc, #464]	; (8009b1c <DataProcessing+0x1f4>)
 800994c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009954:	b292      	uxth	r2, r2
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800995c:	440b      	add	r3, r1
 800995e:	f823 2c10 	strh.w	r2, [r3, #-16]
			Largest[i]  = ADCval [EVERAGE_TIME-1][i];
 8009962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009966:	4a6d      	ldr	r2, [pc, #436]	; (8009b1c <DataProcessing+0x1f4>)
 8009968:	332a      	adds	r3, #42	; 0x2a
 800996a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800996e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009972:	b292      	uxth	r2, r2
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800997a:	440b      	add	r3, r1
 800997c:	f823 2c1c 	strh.w	r2, [r3, #-28]
    for (i = 0; i < F_ROWS_PERTILE; i++)
 8009980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009984:	3301      	adds	r3, #1
 8009986:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800998a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800998e:	2b05      	cmp	r3, #5
 8009990:	d9d9      	bls.n	8009946 <DataProcessing+0x1e>
    }
    for(i=0; i<EVERAGE_TIME; i++)
 8009992:	2300      	movs	r3, #0
 8009994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009998:	e084      	b.n	8009aa4 <DataProcessing+0x17c>
    {
			for (j = 0; j < F_ROWS_PERTILE; j++)
 800999a:	2300      	movs	r3, #0
 800999c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80099a0:	e077      	b.n	8009a92 <DataProcessing+0x16a>
			{
					Sum[j] += ADCval[i][j];
 80099a2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80099a6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80099aa:	485c      	ldr	r0, [pc, #368]	; (8009b1c <DataProcessing+0x1f4>)
 80099ac:	4613      	mov	r3, r2
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	4413      	add	r3, r2
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	440b      	add	r3, r1
 80099b6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80099ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80099c4:	4413      	add	r3, r2
 80099c6:	f853 2c34 	ldr.w	r2, [r3, #-52]
 80099ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099ce:	440a      	add	r2, r1
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80099d6:	440b      	add	r3, r1
 80099d8:	f843 2c34 	str.w	r2, [r3, #-52]

					if(ADCval[i][j] < Smallest[j])
 80099dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80099e0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80099e4:	484d      	ldr	r0, [pc, #308]	; (8009b1c <DataProcessing+0x1f4>)
 80099e6:	4613      	mov	r3, r2
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	4413      	add	r3, r2
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	440b      	add	r3, r1
 80099f0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80099f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80099fe:	440b      	add	r3, r1
 8009a00:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d214      	bcs.n	8009a32 <DataProcessing+0x10a>
					{
							Smallest[j] = ADCval[i][j];
 8009a08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009a0c:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8009a10:	4842      	ldr	r0, [pc, #264]	; (8009b1c <DataProcessing+0x1f4>)
 8009a12:	4613      	mov	r3, r2
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	4413      	add	r3, r2
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	440b      	add	r3, r1
 8009a1c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009a20:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a24:	b292      	uxth	r2, r2
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a2c:	440b      	add	r3, r1
 8009a2e:	f823 2c10 	strh.w	r2, [r3, #-16]
					}
					if(ADCval[i][j] > Largest[j])
 8009a32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009a36:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8009a3a:	4838      	ldr	r0, [pc, #224]	; (8009b1c <DataProcessing+0x1f4>)
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	4413      	add	r3, r2
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	440b      	add	r3, r1
 8009a46:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009a4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a54:	440b      	add	r3, r1
 8009a56:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d914      	bls.n	8009a88 <DataProcessing+0x160>
					{
							Largest[j] = ADCval[i][j];
 8009a5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009a62:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8009a66:	482d      	ldr	r0, [pc, #180]	; (8009b1c <DataProcessing+0x1f4>)
 8009a68:	4613      	mov	r3, r2
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	4413      	add	r3, r2
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	440b      	add	r3, r1
 8009a72:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8009a76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a7a:	b292      	uxth	r2, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a82:	440b      	add	r3, r1
 8009a84:	f823 2c1c 	strh.w	r2, [r3, #-28]
			for (j = 0; j < F_ROWS_PERTILE; j++)
 8009a88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009a92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d983      	bls.n	80099a2 <DataProcessing+0x7a>
    for(i=0; i<EVERAGE_TIME; i++)
 8009a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa8:	2b07      	cmp	r3, #7
 8009aaa:	f67f af76 	bls.w	800999a <DataProcessing+0x72>
			}

    }


	for (j = 0; j < F_ROWS_PERTILE; j++)
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009ab4:	e027      	b.n	8009b06 <DataProcessing+0x1de>
	{
		AverageValue[j] = ((Sum[j] - Smallest[j] - Largest[j])/(EVERAGE_TIME-2));
 8009ab6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8009ac6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009ad0:	440b      	add	r3, r1
 8009ad2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8009ad6:	1ad2      	subs	r2, r2, r3
 8009ad8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009ae2:	440b      	add	r3, r1
 8009ae4:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8009ae8:	1ad2      	subs	r2, r2, r3
 8009aea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009aee:	490c      	ldr	r1, [pc, #48]	; (8009b20 <DataProcessing+0x1f8>)
 8009af0:	fba1 1202 	umull	r1, r2, r1, r2
 8009af4:	0892      	lsrs	r2, r2, #2
 8009af6:	490b      	ldr	r1, [pc, #44]	; (8009b24 <DataProcessing+0x1fc>)
 8009af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j < F_ROWS_PERTILE; j++)
 8009afc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b00:	3301      	adds	r3, #1
 8009b02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009b06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	d9d3      	bls.n	8009ab6 <DataProcessing+0x18e>
	}
}
 8009b0e:	bf00      	nop
 8009b10:	373c      	adds	r7, #60	; 0x3c
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	2000030c 	.word	0x2000030c
 8009b20:	aaaaaaab 	.word	0xaaaaaaab
 8009b24:	20000148 	.word	0x20000148

08009b28 <ClearBuffer>:



void ClearBuffer (void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
	for (int i= 0; i < F_ROWS_PERTILE; i++)
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e007      	b.n	8009b44 <ClearBuffer+0x1c>
	{
		ADC_BUF[i] = 0;
 8009b34:	4a18      	ldr	r2, [pc, #96]	; (8009b98 <ClearBuffer+0x70>)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i < F_ROWS_PERTILE; i++)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	3301      	adds	r3, #1
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	ddf4      	ble.n	8009b34 <ClearBuffer+0xc>
	}

	for (int i= 0; i < EVERAGE_TIME; i++)
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	e016      	b.n	8009b7e <ClearBuffer+0x56>
	{
		for (int j =0; j < F_ROWS_PERTILE; j++)
 8009b50:	2300      	movs	r3, #0
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	e00d      	b.n	8009b72 <ClearBuffer+0x4a>
		{
			ADCval[i][j] = 0;
 8009b56:	4911      	ldr	r1, [pc, #68]	; (8009b9c <ClearBuffer+0x74>)
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	4413      	add	r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4413      	add	r3, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j =0; j < F_ROWS_PERTILE; j++)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	607b      	str	r3, [r7, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b05      	cmp	r3, #5
 8009b76:	ddee      	ble.n	8009b56 <ClearBuffer+0x2e>
	for (int i= 0; i < EVERAGE_TIME; i++)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60bb      	str	r3, [r7, #8]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b07      	cmp	r3, #7
 8009b82:	dde5      	ble.n	8009b50 <ClearBuffer+0x28>
		}
	}
	SampleCount = 0;
 8009b84:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <ClearBuffer+0x78>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	801a      	strh	r2, [r3, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	200003cc 	.word	0x200003cc
 8009b9c:	2000030c 	.word	0x2000030c
 8009ba0:	20000028 	.word	0x20000028

08009ba4 <get_force_sensor_value>:
void get_force_sensor_value(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
	int OldSmapleCount = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]

	for(int row=0;row<F_COLUMNS_PERTILE;row++)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60bb      	str	r3, [r7, #8]
 8009bb2:	e064      	b.n	8009c7e <get_force_sensor_value+0xda>
	{
		force_sensor_select (row);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fda3 	bl	8009704 <force_sensor_select>

		HAL_Delay(200);
 8009bbe:	20c8      	movs	r0, #200	; 0xc8
 8009bc0:	f002 f9f2 	bl	800bfa8 <HAL_Delay>

	    ClearBuffer ();
 8009bc4:	f7ff ffb0 	bl	8009b28 <ClearBuffer>
		OldSmapleCount = SampleCount = 0;
 8009bc8:	4b30      	ldr	r3, [pc, #192]	; (8009c8c <get_force_sensor_value+0xe8>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]

		// read EVERAGE_TIME times
		for (int i = 0; i < EVERAGE_TIME; i++)
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	607b      	str	r3, [r7, #4]
 8009bd6:	e01c      	b.n	8009c12 <get_force_sensor_value+0x6e>
		{
			HAL_ADC_Start_DMA (&hadc1, (uint32_t*) &ADC_BUF[0], 6);
 8009bd8:	2206      	movs	r2, #6
 8009bda:	492d      	ldr	r1, [pc, #180]	; (8009c90 <get_force_sensor_value+0xec>)
 8009bdc:	482d      	ldr	r0, [pc, #180]	; (8009c94 <get_force_sensor_value+0xf0>)
 8009bde:	f002 ff0f 	bl	800ca00 <HAL_ADC_Start_DMA>
			HAL_ADC_Start_IT(&hadc1);
 8009be2:	482c      	ldr	r0, [pc, #176]	; (8009c94 <get_force_sensor_value+0xf0>)
 8009be4:	f002 fd8e 	bl	800c704 <HAL_ADC_Start_IT>

			while (OldSmapleCount == SampleCount);
 8009be8:	bf00      	nop
 8009bea:	4b28      	ldr	r3, [pc, #160]	; (8009c8c <get_force_sensor_value+0xe8>)
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d0f8      	beq.n	8009bea <get_force_sensor_value+0x46>
			OldSmapleCount = SampleCount;
 8009bf8:	4b24      	ldr	r3, [pc, #144]	; (8009c8c <get_force_sensor_value+0xe8>)
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	60fb      	str	r3, [r7, #12]

			HAL_ADC_Stop_DMA (&hadc1);
 8009c00:	4824      	ldr	r0, [pc, #144]	; (8009c94 <get_force_sensor_value+0xf0>)
 8009c02:	f003 f819 	bl	800cc38 <HAL_ADC_Stop_DMA>
			HAL_ADC_Stop_IT(&hadc1);
 8009c06:	4823      	ldr	r0, [pc, #140]	; (8009c94 <get_force_sensor_value+0xf0>)
 8009c08:	f002 febc 	bl	800c984 <HAL_ADC_Stop_IT>
		for (int i = 0; i < EVERAGE_TIME; i++)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b07      	cmp	r3, #7
 8009c16:	dddf      	ble.n	8009bd8 <get_force_sensor_value+0x34>
		}

		if (EVERAGE_TIME > 2)
		{
			// remove the min, max and average the rest
			DataProcessing ();
 8009c18:	f7ff fe86 	bl	8009928 <DataProcessing>
			AverageValue[2] = ADC_BUF[2];
			AverageValue[3] = ADC_BUF[3];
			AverageValue[4] = ADC_BUF[4];
			AverageValue[5] = ADC_BUF[5];
		}
		force_sensor_unselect (row);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff fd85 	bl	8009730 <force_sensor_unselect>

		force_values[row]    	= AverageValue[0]; // 1-10
 8009c26:	4b1c      	ldr	r3, [pc, #112]	; (8009c98 <get_force_sensor_value+0xf4>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	491c      	ldr	r1, [pc, #112]	; (8009c9c <get_force_sensor_value+0xf8>)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		force_values[row+10] 	= AverageValue[1]; // 11-20
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	330a      	adds	r3, #10
 8009c36:	4a18      	ldr	r2, [pc, #96]	; (8009c98 <get_force_sensor_value+0xf4>)
 8009c38:	6852      	ldr	r2, [r2, #4]
 8009c3a:	4918      	ldr	r1, [pc, #96]	; (8009c9c <get_force_sensor_value+0xf8>)
 8009c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		force_values[row+20] 	= AverageValue[2]; // 21-30
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	3314      	adds	r3, #20
 8009c44:	4a14      	ldr	r2, [pc, #80]	; (8009c98 <get_force_sensor_value+0xf4>)
 8009c46:	6892      	ldr	r2, [r2, #8]
 8009c48:	4914      	ldr	r1, [pc, #80]	; (8009c9c <get_force_sensor_value+0xf8>)
 8009c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		force_values[row+30] 	= AverageValue[3]; // 31-40
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	331e      	adds	r3, #30
 8009c52:	4a11      	ldr	r2, [pc, #68]	; (8009c98 <get_force_sensor_value+0xf4>)
 8009c54:	68d2      	ldr	r2, [r2, #12]
 8009c56:	4911      	ldr	r1, [pc, #68]	; (8009c9c <get_force_sensor_value+0xf8>)
 8009c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		force_values[row+40] 	= AverageValue[4]; // 41-50
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	3328      	adds	r3, #40	; 0x28
 8009c60:	4a0d      	ldr	r2, [pc, #52]	; (8009c98 <get_force_sensor_value+0xf4>)
 8009c62:	6912      	ldr	r2, [r2, #16]
 8009c64:	490d      	ldr	r1, [pc, #52]	; (8009c9c <get_force_sensor_value+0xf8>)
 8009c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		force_values[row+50] 	= AverageValue[5]; // 51-60
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3332      	adds	r3, #50	; 0x32
 8009c6e:	4a0a      	ldr	r2, [pc, #40]	; (8009c98 <get_force_sensor_value+0xf4>)
 8009c70:	6952      	ldr	r2, [r2, #20]
 8009c72:	490a      	ldr	r1, [pc, #40]	; (8009c9c <get_force_sensor_value+0xf8>)
 8009c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int row=0;row<F_COLUMNS_PERTILE;row++)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	60bb      	str	r3, [r7, #8]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b09      	cmp	r3, #9
 8009c82:	dd97      	ble.n	8009bb4 <get_force_sensor_value+0x10>

	}
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000028 	.word	0x20000028
 8009c90:	200003cc 	.word	0x200003cc
 8009c94:	20000530 	.word	0x20000530
 8009c98:	20000148 	.word	0x20000148
 8009c9c:	2000003c 	.word	0x2000003c

08009ca0 <ReadUID>:
*/
//read STM32 UniqueID
#define STM32_UUID ((uint32_t *)0x1FFFF7AC)

void ReadUID()
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	af00      	add	r7, sp, #0
	DeviceUID = STM32_UUID[0] & 0xFFFFFFFF;
 8009ca4:	4b04      	ldr	r3, [pc, #16]	; (8009cb8 <ReadUID+0x18>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a04      	ldr	r2, [pc, #16]	; (8009cbc <ReadUID+0x1c>)
 8009caa:	6013      	str	r3, [r2, #0]
    //do something with the overall 96 bits
}
 8009cac:	bf00      	nop
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	1ffff7ac 	.word	0x1ffff7ac
 8009cbc:	200001cc 	.word	0x200001cc

08009cc0 <update_sensor_values>:



void update_sensor_values(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
	// update force values
	get_force_sensor_value ();
 8009cc4:	f7ff ff6e 	bl	8009ba4 <get_force_sensor_value>
	// update temperature and humiduty
	get_temperature_humidity ();
 8009cc8:	f7ff fd48 	bl	800975c <get_temperature_humidity>
	// the following two should be scheduled update
	// update accelerameter
	lis2dh12_get_XYZ(&dev_ctx, &Acce_X, &Acce_Y, &Acce_Z);
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <update_sensor_values+0x28>)
 8009cce:	4a07      	ldr	r2, [pc, #28]	; (8009cec <update_sensor_values+0x2c>)
 8009cd0:	4907      	ldr	r1, [pc, #28]	; (8009cf0 <update_sensor_values+0x30>)
 8009cd2:	4808      	ldr	r0, [pc, #32]	; (8009cf4 <update_sensor_values+0x34>)
 8009cd4:	f001 ff9a 	bl	800bc0c <lis2dh12_get_XYZ>

	// update reference temperature and humidity
	shtc3_get_temp_humid(&dev_ctxc3, &ref_temp, &ref_hum);
 8009cd8:	4a07      	ldr	r2, [pc, #28]	; (8009cf8 <update_sensor_values+0x38>)
 8009cda:	4908      	ldr	r1, [pc, #32]	; (8009cfc <update_sensor_values+0x3c>)
 8009cdc:	4808      	ldr	r0, [pc, #32]	; (8009d00 <update_sensor_values+0x40>)
 8009cde:	f002 f8a1 	bl	800be24 <shtc3_get_temp_humid>

}
 8009ce2:	bf00      	nop
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200002d4 	.word	0x200002d4
 8009cec:	20000144 	.word	0x20000144
 8009cf0:	200003f0 	.word	0x200003f0
 8009cf4:	20000138 	.word	0x20000138
 8009cf8:	200001a4 	.word	0x200001a4
 8009cfc:	200001a0 	.word	0x200001a0
 8009d00:	200001ac 	.word	0x200001ac

08009d04 <update_other_values>:

void update_other_values(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
	get_temperature_humidity ();
 8009d08:	f7ff fd28 	bl	800975c <get_temperature_humidity>

	lis2dh12_get_XYZ(&dev_ctx, &Acce_X, &Acce_Y, &Acce_Z);
 8009d0c:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <update_other_values+0x24>)
 8009d0e:	4a07      	ldr	r2, [pc, #28]	; (8009d2c <update_other_values+0x28>)
 8009d10:	4907      	ldr	r1, [pc, #28]	; (8009d30 <update_other_values+0x2c>)
 8009d12:	4808      	ldr	r0, [pc, #32]	; (8009d34 <update_other_values+0x30>)
 8009d14:	f001 ff7a 	bl	800bc0c <lis2dh12_get_XYZ>

	shtc3_get_temp_humid(&dev_ctxc3, &ref_temp, &ref_hum);
 8009d18:	4a07      	ldr	r2, [pc, #28]	; (8009d38 <update_other_values+0x34>)
 8009d1a:	4908      	ldr	r1, [pc, #32]	; (8009d3c <update_other_values+0x38>)
 8009d1c:	4808      	ldr	r0, [pc, #32]	; (8009d40 <update_other_values+0x3c>)
 8009d1e:	f002 f881 	bl	800be24 <shtc3_get_temp_humid>
}
 8009d22:	bf00      	nop
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200002d4 	.word	0x200002d4
 8009d2c:	20000144 	.word	0x20000144
 8009d30:	200003f0 	.word	0x200003f0
 8009d34:	20000138 	.word	0x20000138
 8009d38:	200001a4 	.word	0x200001a4
 8009d3c:	200001a0 	.word	0x200001a0
 8009d40:	200001ac 	.word	0x200001ac

08009d44 <init_HTS221>:


// Init HTS221 sensors
void init_HTS221 (void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
	for (int i =0; i < 5; i++)
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
 8009d4e:	e017      	b.n	8009d80 <init_HTS221+0x3c>
	{
		hts221_init(&hts221_ctx1, i, &hspi1);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	4a2c      	ldr	r2, [pc, #176]	; (8009e08 <init_HTS221+0xc4>)
 8009d56:	4619      	mov	r1, r3
 8009d58:	482c      	ldr	r0, [pc, #176]	; (8009e0c <init_HTS221+0xc8>)
 8009d5a:	f001 fcb5 	bl	800b6c8 <hts221_init>
		hts221_device_id_get(&hts221_ctx1, &chip_id[i],  i);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4a2b      	ldr	r2, [pc, #172]	; (8009e10 <init_HTS221+0xcc>)
 8009d62:	4413      	add	r3, r2
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4828      	ldr	r0, [pc, #160]	; (8009e0c <init_HTS221+0xc8>)
 8009d6c:	f001 faee 	bl	800b34c <hts221_device_id_get>
		chip_unselect(i);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff fc43 	bl	8009600 <chip_unselect>
	for (int i =0; i < 5; i++)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	dde4      	ble.n	8009d50 <init_HTS221+0xc>
	}

	for (int i =5; i < 10; i++)
 8009d86:	2305      	movs	r3, #5
 8009d88:	60bb      	str	r3, [r7, #8]
 8009d8a:	e017      	b.n	8009dbc <init_HTS221+0x78>
	{
		 hts221_init(&hts221_ctx2, i, &hspi2);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	4a20      	ldr	r2, [pc, #128]	; (8009e14 <init_HTS221+0xd0>)
 8009d92:	4619      	mov	r1, r3
 8009d94:	4820      	ldr	r0, [pc, #128]	; (8009e18 <init_HTS221+0xd4>)
 8009d96:	f001 fc97 	bl	800b6c8 <hts221_init>
		 hts221_device_id_get(&hts221_ctx2, &chip_id[i],  i);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4a1c      	ldr	r2, [pc, #112]	; (8009e10 <init_HTS221+0xcc>)
 8009d9e:	4413      	add	r3, r2
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	4619      	mov	r1, r3
 8009da6:	481c      	ldr	r0, [pc, #112]	; (8009e18 <init_HTS221+0xd4>)
 8009da8:	f001 fad0 	bl	800b34c <hts221_device_id_get>
		 chip_unselect(i);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff fc25 	bl	8009600 <chip_unselect>
	for (int i =5; i < 10; i++)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	3301      	adds	r3, #1
 8009dba:	60bb      	str	r3, [r7, #8]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	dde4      	ble.n	8009d8c <init_HTS221+0x48>
	}

	for (int i =10; i < 15; i++)
 8009dc2:	230a      	movs	r3, #10
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	e017      	b.n	8009df8 <init_HTS221+0xb4>
	{
		 hts221_init(&hts221_ctx3, i, &hspi3);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	4a13      	ldr	r2, [pc, #76]	; (8009e1c <init_HTS221+0xd8>)
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4813      	ldr	r0, [pc, #76]	; (8009e20 <init_HTS221+0xdc>)
 8009dd2:	f001 fc79 	bl	800b6c8 <hts221_init>
		 hts221_device_id_get(&hts221_ctx3, &chip_id[i],  i);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a0d      	ldr	r2, [pc, #52]	; (8009e10 <init_HTS221+0xcc>)
 8009dda:	4413      	add	r3, r2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	480f      	ldr	r0, [pc, #60]	; (8009e20 <init_HTS221+0xdc>)
 8009de4:	f001 fab2 	bl	800b34c <hts221_device_id_get>
		 chip_unselect(i);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff fc07 	bl	8009600 <chip_unselect>
	for (int i =10; i < 15; i++)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3301      	adds	r3, #1
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b0e      	cmp	r3, #14
 8009dfc:	dde4      	ble.n	8009dc8 <init_HTS221+0x84>
	}
}
 8009dfe:	bf00      	nop
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	200005e4 	.word	0x200005e4
 8009e0c:	200003e4 	.word	0x200003e4
 8009e10:	2000002c 	.word	0x2000002c
 8009e14:	200003f4 	.word	0x200003f4
 8009e18:	2000012c 	.word	0x2000012c
 8009e1c:	200004cc 	.word	0x200004cc
 8009e20:	200001b8 	.word	0x200001b8

08009e24 <parse_can_header>:


void parse_can_header(uint32_t can_header,uint8_t* device_ID,uint8_t* sensor_ID, uint8_t* sensor_type,uint8_t* message_type)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
    *device_ID=(uint8_t)((can_header&0x00FF0000) >> 16);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	0c1b      	lsrs	r3, r3, #16
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	701a      	strb	r2, [r3, #0]
    //*sensor_ID=(uint8_t)((can_header&0xFF000000) >> 24);
    //*sensor_type=(uint8_t)(can_header&0x000000FF);
    *sensor_ID=(uint8_t)((can_header&0x000000FF));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	701a      	strb	r2, [r3, #0]
    *sensor_type=(uint8_t)((can_header&0x1F000000) >> 24);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	0e1b      	lsrs	r3, r3, #24
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 031f 	and.w	r3, r3, #31
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	701a      	strb	r2, [r3, #0]
    *message_type=(uint8_t)((can_header&0x0000FF00) >> 8);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	701a      	strb	r2, [r3, #0]
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <generate_can_header>:


uint32_t generate_can_header(uint8_t device_ID,uint8_t sensor_ID, uint8_t sensor_type,uint8_t message_type)
{
 8009e6a:	b490      	push	{r4, r7}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	4611      	mov	r1, r2
 8009e76:	461a      	mov	r2, r3
 8009e78:	4623      	mov	r3, r4
 8009e7a:	71fb      	strb	r3, [r7, #7]
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	71bb      	strb	r3, [r7, #6]
 8009e80:	460b      	mov	r3, r1
 8009e82:	717b      	strb	r3, [r7, #5]
 8009e84:	4613      	mov	r3, r2
 8009e86:	713b      	strb	r3, [r7, #4]
   uint32_t tmp,res;
   	tmp=0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]
   	res=0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60bb      	str	r3, [r7, #8]
   	tmp=device_ID;
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	60fb      	str	r3, [r7, #12]
   	tmp<<=16;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	041b      	lsls	r3, r3, #16
 8009e98:	60fb      	str	r3, [r7, #12]
   	res|=tmp;
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60bb      	str	r3, [r7, #8]
   	tmp=0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]

   	tmp=sensor_type;
 8009ea6:	797b      	ldrb	r3, [r7, #5]
 8009ea8:	60fb      	str	r3, [r7, #12]
   	tmp<<=24;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	061b      	lsls	r3, r3, #24
 8009eae:	60fb      	str	r3, [r7, #12]
   	res|=tmp;
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]
   	tmp=0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]

   	tmp=sensor_ID;
 8009ebc:	79bb      	ldrb	r3, [r7, #6]
 8009ebe:	60fb      	str	r3, [r7, #12]
   	res|=tmp;
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]
   	tmp=0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60fb      	str	r3, [r7, #12]

   	tmp=message_type;
 8009ecc:	793b      	ldrb	r3, [r7, #4]
 8009ece:	60fb      	str	r3, [r7, #12]
   	tmp<<=8;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	60fb      	str	r3, [r7, #12]
   	res|=tmp;
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60bb      	str	r3, [r7, #8]
   	tmp=0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]

   	return res;
 8009ee2:	68bb      	ldr	r3, [r7, #8]


}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bc90      	pop	{r4, r7}
 8009eec:	4770      	bx	lr
	...

08009ef0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009ef4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <__NVIC_SystemReset+0x20>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009f00:	4903      	ldr	r1, [pc, #12]	; (8009f10 <__NVIC_SystemReset+0x20>)
 8009f02:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <__NVIC_SystemReset+0x24>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60cb      	str	r3, [r1, #12]
 8009f08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <__NVIC_SystemReset+0x1c>
 8009f10:	e000ed00 	.word	0xe000ed00
 8009f14:	05fa0004 	.word	0x05fa0004

08009f18 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8009f22:	4a0a      	ldr	r2, [pc, #40]	; (8009f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8009f24:	2100      	movs	r1, #0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f004 f817 	bl	800df5a <HAL_CAN_GetRxMessage>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_Handler();
 8009f32:	f000 fd5f 	bl	800a9f4 <Error_Handler>
	}
	else
	{
		CANMsgReceived = 1;
	}
}
 8009f36:	e002      	b.n	8009f3e <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
		CANMsgReceived = 1;
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	701a      	strb	r2, [r3, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200002cc 	.word	0x200002cc
 8009f4c:	200002f0 	.word	0x200002f0
 8009f50:	2000002a 	.word	0x2000002a

08009f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f54:	b590      	push	{r4, r7, lr}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t 		RequestDeviceUID = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f5e:	f001 ff97 	bl	800be90 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8009f62:	b662      	cpsie	i
  /* USER CODE BEGIN Init */
  __enable_irq();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f64:	f000 f8f2 	bl	800a14c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f68:	f000 fbae 	bl	800a6c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8009f6c:	f000 fb8e 	bl	800a68c <MX_DMA_Init>
  MX_CAN_Init();
 8009f70:	f000 fa0e 	bl	800a390 <MX_CAN_Init>
  MX_ADC1_Init();
 8009f74:	f000 f956 	bl	800a224 <MX_ADC1_Init>
  MX_SPI1_Init();
 8009f78:	f000 face 	bl	800a518 <MX_SPI1_Init>
  MX_SPI2_Init();
 8009f7c:	f000 fb0a 	bl	800a594 <MX_SPI2_Init>
  MX_SPI3_Init();
 8009f80:	f000 fb46 	bl	800a610 <MX_SPI3_Init>
  MX_RTC_Init();
 8009f84:	f000 faa2 	bl	800a4cc <MX_RTC_Init>
  MX_I2C1_Init();
 8009f88:	f000 fa60 	bl	800a44c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  // Initialize temperature and humidity sensor
	init_HTS221 ();
 8009f8c:	f7ff feda 	bl	8009d44 <init_HTS221>
    // read STM32 Unique ID
	ReadUID ();
 8009f90:	f7ff fe86 	bl	8009ca0 <ReadUID>

	//Initialize accelerameter
	lis2dh12_init(&dev_ctx, &hi2c1);
 8009f94:	495f      	ldr	r1, [pc, #380]	; (800a114 <main+0x1c0>)
 8009f96:	4860      	ldr	r0, [pc, #384]	; (800a118 <main+0x1c4>)
 8009f98:	f001 fe06 	bl	800bba8 <lis2dh12_init>
	//lis2dh12_get_XYZ(&dev_ctx, &Acce_X, &Acce_Y, &Acce_Z);
	HAL_Delay(50);
 8009f9c:	2032      	movs	r0, #50	; 0x32
 8009f9e:	f002 f803 	bl	800bfa8 <HAL_Delay>

	//Initialize reference sonsor
	shtc3_init(&dev_ctxc3, &hi2c1, SHTC3_I2C_ADDR);
 8009fa2:	22e0      	movs	r2, #224	; 0xe0
 8009fa4:	495b      	ldr	r1, [pc, #364]	; (800a114 <main+0x1c0>)
 8009fa6:	485d      	ldr	r0, [pc, #372]	; (800a11c <main+0x1c8>)
 8009fa8:	f001 fec6 	bl	800bd38 <shtc3_init>
	//update reference temperature and humidity
	//shtc3_get_temp_humid(&dev_ctxc3, &ref_temp, &ref_hum);

	HAL_Delay(50);
 8009fac:	2032      	movs	r0, #50	; 0x32
 8009fae:	f001 fffb 	bl	800bfa8 <HAL_Delay>
	mcp_init();
 8009fb2:	f001 f86b 	bl	800b08c <mcp_init>
	HAL_Delay(50);
 8009fb6:	2032      	movs	r0, #50	; 0x32
 8009fb8:	f001 fff6 	bl	800bfa8 <HAL_Delay>
	//uint8_t SetValues[6] = {10,10,10,10,10,10};//op6,op5,op4,op3,op2,op1 3906 2158 2354 2535 3025 3440
	//uint8_t SetValues[6] = {15,15,15,15,15,15};//op6,op5,op4,op3,op2,op1 3906 2158 2354 2535 3025 3440
	//uint8_t SetValues[6] = {20,20,20,20,20,20};//op6,op5,op4,op3,op2,op1 3906 2158 2354 2535 3025 3440
	//uint8_t SetValues[6] = {30,30,30,30,30,30};//op6,op5,op4,op3,op2,op1 3906 2158 2354 2535 3025 3440
	uint8_t SetValues[6] = {35,35,35,35,35,35};//op6,op5,op4,op3,op2,op1 3906 2158 2354 2535 3025 3440
 8009fbc:	4a58      	ldr	r2, [pc, #352]	; (800a120 <main+0x1cc>)
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fc4:	6018      	str	r0, [r3, #0]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	8019      	strh	r1, [r3, #0]
 	Set_DigipotMCPs((uint8_t *)SetValues);
 8009fca:	463b      	mov	r3, r7
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 f8e1 	bl	800b194 <Set_DigipotMCPs>

	TxHeader.IDE=CAN_ID_EXT;
 8009fd2:	4b54      	ldr	r3, [pc, #336]	; (800a124 <main+0x1d0>)
 8009fd4:	2204      	movs	r2, #4
 8009fd6:	609a      	str	r2, [r3, #8]
	TxHeader.RTR=CAN_RTR_DATA;
 8009fd8:	4b52      	ldr	r3, [pc, #328]	; (800a124 <main+0x1d0>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	60da      	str	r2, [r3, #12]

	// Activat CAN after done Init
	HAL_CAN_ActivateNotification (&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009fde:	2102      	movs	r1, #2
 8009fe0:	4851      	ldr	r0, [pc, #324]	; (800a128 <main+0x1d4>)
 8009fe2:	f004 f8cc 	bl	800e17e <HAL_CAN_ActivateNotification>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// waiting for CAN messages
		if(CANMsgReceived)
 8009fe6:	4b51      	ldr	r3, [pc, #324]	; (800a12c <main+0x1d8>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 808a 	beq.w	800a104 <main+0x1b0>
		{
			CANMsgReceived = 0;
 8009ff0:	4b4e      	ldr	r3, [pc, #312]	; (800a12c <main+0x1d8>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	701a      	strb	r2, [r3, #0]

			parse_can_header(RxHeader.ExtId,&devID,&sensorID,&ReqType,&msgType);
 8009ff6:	4b4e      	ldr	r3, [pc, #312]	; (800a130 <main+0x1dc>)
 8009ff8:	6858      	ldr	r0, [r3, #4]
 8009ffa:	f107 0409 	add.w	r4, r7, #9
 8009ffe:	f107 020a 	add.w	r2, r7, #10
 800a002:	f107 010b 	add.w	r1, r7, #11
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	4623      	mov	r3, r4
 800a00e:	f7ff ff09 	bl	8009e24 <parse_can_header>

			if(devID==RECEIVER_ID || sensorID == 0x11)  // message from receiver
 800a012:	7afb      	ldrb	r3, [r7, #11]
 800a014:	2bfe      	cmp	r3, #254	; 0xfe
 800a016:	d002      	beq.n	800a01e <main+0xca>
 800a018:	7abb      	ldrb	r3, [r7, #10]
 800a01a:	2b11      	cmp	r3, #17
 800a01c:	d172      	bne.n	800a104 <main+0x1b0>
			{
				switch(msgType)
 800a01e:	7a3b      	ldrb	r3, [r7, #8]
 800a020:	3b02      	subs	r3, #2
 800a022:	2b0d      	cmp	r3, #13
 800a024:	d870      	bhi.n	800a108 <main+0x1b4>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <main+0xd8>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a0f9 	.word	0x0800a0f9
 800a030:	0800a0ff 	.word	0x0800a0ff
 800a034:	0800a109 	.word	0x0800a109
 800a038:	0800a109 	.word	0x0800a109
 800a03c:	0800a109 	.word	0x0800a109
 800a040:	0800a0e7 	.word	0x0800a0e7
 800a044:	0800a0ed 	.word	0x0800a0ed
 800a048:	0800a109 	.word	0x0800a109
 800a04c:	0800a109 	.word	0x0800a109
 800a050:	0800a0cf 	.word	0x0800a0cf
 800a054:	0800a0b9 	.word	0x0800a0b9
 800a058:	0800a065 	.word	0x0800a065
 800a05c:	0800a09f 	.word	0x0800a09f
 800a060:	0800a0f3 	.word	0x0800a0f3
				{
					case DEVICEID_REQUEST_MSG:
						RequestDeviceUID = (RxData[3]<<24) | (RxData[2]<<16)| (RxData[1]<<8) | RxData[0];
 800a064:	4b33      	ldr	r3, [pc, #204]	; (800a134 <main+0x1e0>)
 800a066:	78db      	ldrb	r3, [r3, #3]
 800a068:	061a      	lsls	r2, r3, #24
 800a06a:	4b32      	ldr	r3, [pc, #200]	; (800a134 <main+0x1e0>)
 800a06c:	789b      	ldrb	r3, [r3, #2]
 800a06e:	041b      	lsls	r3, r3, #16
 800a070:	431a      	orrs	r2, r3
 800a072:	4b30      	ldr	r3, [pc, #192]	; (800a134 <main+0x1e0>)
 800a074:	785b      	ldrb	r3, [r3, #1]
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	4313      	orrs	r3, r2
 800a07a:	4a2e      	ldr	r2, [pc, #184]	; (800a134 <main+0x1e0>)
 800a07c:	7812      	ldrb	r2, [r2, #0]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]
						if (RequestDeviceUID == DeviceUID)
 800a082:	4b2d      	ldr	r3, [pc, #180]	; (800a138 <main+0x1e4>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d13f      	bne.n	800a10c <main+0x1b8>
						{
							CANDeviceID = sensorID;
 800a08c:	7aba      	ldrb	r2, [r7, #10]
 800a08e:	4b2b      	ldr	r3, [pc, #172]	; (800a13c <main+0x1e8>)
 800a090:	701a      	strb	r2, [r3, #0]
							send_sensor_value(&hcan, 0, DEVICEID_REQ);
 800a092:	2204      	movs	r2, #4
 800a094:	2100      	movs	r1, #0
 800a096:	4824      	ldr	r0, [pc, #144]	; (800a128 <main+0x1d4>)
 800a098:	f7ff f8bc 	bl	8009214 <send_sensor_value>
						}
						break;
 800a09c:	e036      	b.n	800a10c <main+0x1b8>

					case DATA_REQUEST_MSG :
						if(RxData[0] ==CANDeviceID)
 800a09e:	4b25      	ldr	r3, [pc, #148]	; (800a134 <main+0x1e0>)
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	4b26      	ldr	r3, [pc, #152]	; (800a13c <main+0x1e8>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d132      	bne.n	800a110 <main+0x1bc>
						{
							send_sensor_value(&hcan, sensorID, ReqType);
 800a0aa:	7abb      	ldrb	r3, [r7, #10]
 800a0ac:	7a7a      	ldrb	r2, [r7, #9]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	481d      	ldr	r0, [pc, #116]	; (800a128 <main+0x1d4>)
 800a0b2:	f7ff f8af 	bl	8009214 <send_sensor_value>
						}
						break;
 800a0b6:	e02b      	b.n	800a110 <main+0x1bc>

					case GET_REF_SENSOR_VALUE_MSG:
						send_sensor_value(&hcan, 0, HUMIDITY_REF_REQ);
 800a0b8:	2205      	movs	r2, #5
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	481a      	ldr	r0, [pc, #104]	; (800a128 <main+0x1d4>)
 800a0be:	f7ff f8a9 	bl	8009214 <send_sensor_value>
						send_sensor_value(&hcan, 0, TEMPERATURE_REF_REQ);
 800a0c2:	2206      	movs	r2, #6
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4818      	ldr	r0, [pc, #96]	; (800a128 <main+0x1d4>)
 800a0c8:	f7ff f8a4 	bl	8009214 <send_sensor_value>
						break;
 800a0cc:	e021      	b.n	800a112 <main+0x1be>

					case GET_ACL_SENSOR_VALUE_MSG:
						lis2dh12_get_XYZ(&dev_ctx, &Acce_X, &Acce_Y, &Acce_Z);
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <main+0x1ec>)
 800a0d0:	4a1c      	ldr	r2, [pc, #112]	; (800a144 <main+0x1f0>)
 800a0d2:	491d      	ldr	r1, [pc, #116]	; (800a148 <main+0x1f4>)
 800a0d4:	4810      	ldr	r0, [pc, #64]	; (800a118 <main+0x1c4>)
 800a0d6:	f001 fd99 	bl	800bc0c <lis2dh12_get_XYZ>
						send_sensor_value(&hcan, 0, ACCELERAMTER_REQ);
 800a0da:	2207      	movs	r2, #7
 800a0dc:	2100      	movs	r1, #0
 800a0de:	4812      	ldr	r0, [pc, #72]	; (800a128 <main+0x1d4>)
 800a0e0:	f7ff f898 	bl	8009214 <send_sensor_value>
						break;
 800a0e4:	e015      	b.n	800a112 <main+0x1be>
						{
							//Set_DigipotMCPs(&hi2c1, (uint8_t *)&RxData[1]);
						}
						break;
					case FORCE_DATA_REQUEST:
						get_force_sensor_value ();
 800a0e6:	f7ff fd5d 	bl	8009ba4 <get_force_sensor_value>
				        break;
 800a0ea:	e012      	b.n	800a112 <main+0x1be>
					case OTHER_DATA_REQUEST:
						update_other_values();
 800a0ec:	f7ff fe0a 	bl	8009d04 <update_other_values>
						break;
 800a0f0:	e00f      	b.n	800a112 <main+0x1be>

					case UPDATE_SENSOR_VALUE_MSG:
						update_sensor_values();
 800a0f2:	f7ff fde5 	bl	8009cc0 <update_sensor_values>
						break;
 800a0f6:	e00c      	b.n	800a112 <main+0x1be>

					case MOVE_TO_BOOTLOADER:
						jump_to_bootloader();
 800a0f8:	f000 fbc2 	bl	800a880 <jump_to_bootloader>
						break;
 800a0fc:	e009      	b.n	800a112 <main+0x1be>
					case Reboot_LB:
						Reboot();
 800a0fe:	f000 fc75 	bl	800a9ec <Reboot>
						break;
 800a102:	e006      	b.n	800a112 <main+0x1be>
					default: break;
						}


				}
 800a104:	bf00      	nop
 800a106:	e76e      	b.n	8009fe6 <main+0x92>
					default: break;
 800a108:	bf00      	nop
 800a10a:	e76c      	b.n	8009fe6 <main+0x92>
						break;
 800a10c:	bf00      	nop
 800a10e:	e76a      	b.n	8009fe6 <main+0x92>
						break;
 800a110:	bf00      	nop
		if(CANMsgReceived)
 800a112:	e768      	b.n	8009fe6 <main+0x92>
 800a114:	20000458 	.word	0x20000458
 800a118:	20000138 	.word	0x20000138
 800a11c:	200001ac 	.word	0x200001ac
 800a120:	08012964 	.word	0x08012964
 800a124:	200002d8 	.word	0x200002d8
 800a128:	200004a4 	.word	0x200004a4
 800a12c:	2000002a 	.word	0x2000002a
 800a130:	200002f0 	.word	0x200002f0
 800a134:	200002cc 	.word	0x200002cc
 800a138:	200001cc 	.word	0x200001cc
 800a13c:	2000019c 	.word	0x2000019c
 800a140:	200002d4 	.word	0x200002d4
 800a144:	20000144 	.word	0x20000144
 800a148:	200003f0 	.word	0x200003f0

0800a14c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b0a6      	sub	sp, #152	; 0x98
 800a150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a152:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a156:	2228      	movs	r2, #40	; 0x28
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f008 fbee 	bl	801293c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a160:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	605a      	str	r2, [r3, #4]
 800a16a:	609a      	str	r2, [r3, #8]
 800a16c:	60da      	str	r2, [r3, #12]
 800a16e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a170:	1d3b      	adds	r3, r7, #4
 800a172:	2258      	movs	r2, #88	; 0x58
 800a174:	2100      	movs	r1, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f008 fbe0 	bl	801293c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800a17c:	230b      	movs	r3, #11
 800a17e:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a184:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a186:	2301      	movs	r3, #1
 800a188:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a18a:	2310      	movs	r3, #16
 800a18c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a190:	2301      	movs	r3, #1
 800a192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a196:	2302      	movs	r3, #2
 800a198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a19c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800a1a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a1a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a1b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f006 f8cc 	bl	8010354 <HAL_RCC_OscConfig>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800a1c2:	f000 fc17 	bl	800a9f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1c6:	230f      	movs	r3, #15
 800a1c8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a1dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f006 ffcc 	bl	8011180 <HAL_RCC_ClockConfig>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a1ee:	f000 fc01 	bl	800a9f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <SystemClock_Config+0xd4>)
 800a1f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
 800a1f6:	f44f 7390 	mov.w	r3, #288	; 0x120
 800a1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a200:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a204:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a206:	1d3b      	adds	r3, r7, #4
 800a208:	4618      	mov	r0, r3
 800a20a:	f007 f99f 	bl	801154c <HAL_RCCEx_PeriphCLKConfig>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800a214:	f000 fbee 	bl	800a9f4 <Error_Handler>
  }
}
 800a218:	bf00      	nop
 800a21a:	3798      	adds	r7, #152	; 0x98
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	000100a0 	.word	0x000100a0

0800a224 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08a      	sub	sp, #40	; 0x28
 800a228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a22a:	f107 031c 	add.w	r3, r7, #28
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	605a      	str	r2, [r3, #4]
 800a234:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a236:	1d3b      	adds	r3, r7, #4
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	605a      	str	r2, [r3, #4]
 800a23e:	609a      	str	r2, [r3, #8]
 800a240:	60da      	str	r2, [r3, #12]
 800a242:	611a      	str	r2, [r3, #16]
 800a244:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800a246:	4b51      	ldr	r3, [pc, #324]	; (800a38c <MX_ADC1_Init+0x168>)
 800a248:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a24c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a24e:	4b4f      	ldr	r3, [pc, #316]	; (800a38c <MX_ADC1_Init+0x168>)
 800a250:	2200      	movs	r2, #0
 800a252:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a254:	4b4d      	ldr	r3, [pc, #308]	; (800a38c <MX_ADC1_Init+0x168>)
 800a256:	2200      	movs	r2, #0
 800a258:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a25a:	4b4c      	ldr	r3, [pc, #304]	; (800a38c <MX_ADC1_Init+0x168>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a260:	4b4a      	ldr	r3, [pc, #296]	; (800a38c <MX_ADC1_Init+0x168>)
 800a262:	2201      	movs	r2, #1
 800a264:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a266:	4b49      	ldr	r3, [pc, #292]	; (800a38c <MX_ADC1_Init+0x168>)
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a26e:	4b47      	ldr	r3, [pc, #284]	; (800a38c <MX_ADC1_Init+0x168>)
 800a270:	2200      	movs	r2, #0
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a274:	4b45      	ldr	r3, [pc, #276]	; (800a38c <MX_ADC1_Init+0x168>)
 800a276:	2201      	movs	r2, #1
 800a278:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a27a:	4b44      	ldr	r3, [pc, #272]	; (800a38c <MX_ADC1_Init+0x168>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800a280:	4b42      	ldr	r3, [pc, #264]	; (800a38c <MX_ADC1_Init+0x168>)
 800a282:	2206      	movs	r2, #6
 800a284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a286:	4b41      	ldr	r3, [pc, #260]	; (800a38c <MX_ADC1_Init+0x168>)
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a28e:	4b3f      	ldr	r3, [pc, #252]	; (800a38c <MX_ADC1_Init+0x168>)
 800a290:	2208      	movs	r2, #8
 800a292:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a294:	4b3d      	ldr	r3, [pc, #244]	; (800a38c <MX_ADC1_Init+0x168>)
 800a296:	2200      	movs	r2, #0
 800a298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a29a:	4b3c      	ldr	r3, [pc, #240]	; (800a38c <MX_ADC1_Init+0x168>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a2a0:	483a      	ldr	r0, [pc, #232]	; (800a38c <MX_ADC1_Init+0x168>)
 800a2a2:	f001 feb7 	bl	800c014 <HAL_ADC_Init>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800a2ac:	f000 fba2 	bl	800a9f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a2b4:	f107 031c 	add.w	r3, r7, #28
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4834      	ldr	r0, [pc, #208]	; (800a38c <MX_ADC1_Init+0x168>)
 800a2bc:	f003 f804 	bl	800d2c8 <HAL_ADCEx_MultiModeConfigChannel>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800a2c6:	f000 fb95 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800a2ca:	2306      	movs	r3, #6
 800a2cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800a2d6:	2305      	movs	r3, #5
 800a2d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a2e2:	1d3b      	adds	r3, r7, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4829      	ldr	r0, [pc, #164]	; (800a38c <MX_ADC1_Init+0x168>)
 800a2e8:	f002 fd02 	bl	800ccf0 <HAL_ADC_ConfigChannel>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800a2f2:	f000 fb7f 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800a2f6:	2307      	movs	r3, #7
 800a2f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a2fe:	1d3b      	adds	r3, r7, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4822      	ldr	r0, [pc, #136]	; (800a38c <MX_ADC1_Init+0x168>)
 800a304:	f002 fcf4 	bl	800ccf0 <HAL_ADC_ConfigChannel>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800a30e:	f000 fb71 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800a312:	2308      	movs	r3, #8
 800a314:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800a316:	2303      	movs	r3, #3
 800a318:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a31a:	1d3b      	adds	r3, r7, #4
 800a31c:	4619      	mov	r1, r3
 800a31e:	481b      	ldr	r0, [pc, #108]	; (800a38c <MX_ADC1_Init+0x168>)
 800a320:	f002 fce6 	bl	800ccf0 <HAL_ADC_ConfigChannel>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800a32a:	f000 fb63 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800a32e:	2304      	movs	r3, #4
 800a330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800a332:	2304      	movs	r3, #4
 800a334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a336:	1d3b      	adds	r3, r7, #4
 800a338:	4619      	mov	r1, r3
 800a33a:	4814      	ldr	r0, [pc, #80]	; (800a38c <MX_ADC1_Init+0x168>)
 800a33c:	f002 fcd8 	bl	800ccf0 <HAL_ADC_ConfigChannel>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800a346:	f000 fb55 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a34a:	2303      	movs	r3, #3
 800a34c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800a34e:	2305      	movs	r3, #5
 800a350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a352:	1d3b      	adds	r3, r7, #4
 800a354:	4619      	mov	r1, r3
 800a356:	480d      	ldr	r0, [pc, #52]	; (800a38c <MX_ADC1_Init+0x168>)
 800a358:	f002 fcca 	bl	800ccf0 <HAL_ADC_ConfigChannel>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 800a362:	f000 fb47 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a366:	2302      	movs	r3, #2
 800a368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800a36a:	2306      	movs	r3, #6
 800a36c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a36e:	1d3b      	adds	r3, r7, #4
 800a370:	4619      	mov	r1, r3
 800a372:	4806      	ldr	r0, [pc, #24]	; (800a38c <MX_ADC1_Init+0x168>)
 800a374:	f002 fcbc 	bl	800ccf0 <HAL_ADC_ConfigChannel>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800a37e:	f000 fb39 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a382:	bf00      	nop
 800a384:	3728      	adds	r7, #40	; 0x28
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20000530 	.word	0x20000530

0800a390 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	; 0x28
 800a394:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800a396:	4b2b      	ldr	r3, [pc, #172]	; (800a444 <MX_CAN_Init+0xb4>)
 800a398:	4a2b      	ldr	r2, [pc, #172]	; (800a448 <MX_CAN_Init+0xb8>)
 800a39a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800a39c:	4b29      	ldr	r3, [pc, #164]	; (800a444 <MX_CAN_Init+0xb4>)
 800a39e:	2203      	movs	r2, #3
 800a3a0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800a3a2:	4b28      	ldr	r3, [pc, #160]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a3a8:	4b26      	ldr	r3, [pc, #152]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800a3ae:	4b25      	ldr	r3, [pc, #148]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a3b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800a3b6:	4b23      	ldr	r3, [pc, #140]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a3bc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800a3be:	4b21      	ldr	r3, [pc, #132]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800a3c4:	4b1f      	ldr	r3, [pc, #124]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800a3ca:	4b1e      	ldr	r3, [pc, #120]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800a3d0:	4b1c      	ldr	r3, [pc, #112]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800a3d6:	4b1b      	ldr	r3, [pc, #108]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800a3dc:	4b19      	ldr	r3, [pc, #100]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800a3e2:	4818      	ldr	r0, [pc, #96]	; (800a444 <MX_CAN_Init+0xb4>)
 800a3e4:	f003 fa34 	bl	800d850 <HAL_CAN_Init>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800a3ee:	f000 fb01 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef sFilter;

  	sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61bb      	str	r3, [r7, #24]
  	sFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	61fb      	str	r3, [r7, #28]
  	sFilter.FilterIdHigh = 0x0000;//0x1fff;//0xffff;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	603b      	str	r3, [r7, #0]
  	sFilter.FilterIdLow = 0x0000;//0xffff;//0x0000;
 800a3fe:	2300      	movs	r3, #0
 800a400:	607b      	str	r3, [r7, #4]
  	sFilter.FilterMaskIdHigh = 0x0000;//0xffff;
 800a402:	2300      	movs	r3, #0
 800a404:	60bb      	str	r3, [r7, #8]
  	sFilter.FilterMaskIdLow = 0x0000;
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
  	sFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
  	sFilter.FilterActivation = ENABLE;
 800a40e:	2301      	movs	r3, #1
 800a410:	623b      	str	r3, [r7, #32]
  	sFilter.FilterBank = 1;//14;
 800a412:	2301      	movs	r3, #1
 800a414:	617b      	str	r3, [r7, #20]

  	if (HAL_CAN_ConfigFilter(&hcan, &sFilter) != HAL_OK)
 800a416:	463b      	mov	r3, r7
 800a418:	4619      	mov	r1, r3
 800a41a:	480a      	ldr	r0, [pc, #40]	; (800a444 <MX_CAN_Init+0xb4>)
 800a41c:	f003 fb36 	bl	800da8c <HAL_CAN_ConfigFilter>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <MX_CAN_Init+0x9a>
  	{
  		/* Filter configuration Error */
  		Error_Handler();
 800a426:	f000 fae5 	bl	800a9f4 <Error_Handler>
  	}
     /* ## -3- Start the CAN peripheral ############################### */
     if (HAL_CAN_Start(&hcan) != HAL_OK)
 800a42a:	4806      	ldr	r0, [pc, #24]	; (800a444 <MX_CAN_Init+0xb4>)
 800a42c:	f003 fbf8 	bl	800dc20 <HAL_CAN_Start>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <MX_CAN_Init+0xaa>
     {
         /* Start Error */
         Error_Handler();
 800a436:	f000 fadd 	bl	800a9f4 <Error_Handler>
     }
  /* USER CODE END CAN_Init 2 */

}
 800a43a:	bf00      	nop
 800a43c:	3728      	adds	r7, #40	; 0x28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	200004a4 	.word	0x200004a4
 800a448:	40006400 	.word	0x40006400

0800a44c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a450:	4b1b      	ldr	r3, [pc, #108]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a452:	4a1c      	ldr	r2, [pc, #112]	; (800a4c4 <MX_I2C1_Init+0x78>)
 800a454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800a456:	4b1a      	ldr	r3, [pc, #104]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a458:	4a1b      	ldr	r2, [pc, #108]	; (800a4c8 <MX_I2C1_Init+0x7c>)
 800a45a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a45c:	4b18      	ldr	r3, [pc, #96]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a45e:	2200      	movs	r2, #0
 800a460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a462:	4b17      	ldr	r3, [pc, #92]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a464:	2201      	movs	r2, #1
 800a466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a468:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a46e:	4b14      	ldr	r3, [pc, #80]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a470:	2200      	movs	r2, #0
 800a472:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a474:	4b12      	ldr	r3, [pc, #72]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a476:	2200      	movs	r2, #0
 800a478:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a47a:	4b11      	ldr	r3, [pc, #68]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a480:	4b0f      	ldr	r3, [pc, #60]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a482:	2200      	movs	r2, #0
 800a484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a486:	480e      	ldr	r0, [pc, #56]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a488:	f004 feca 	bl	800f220 <HAL_I2C_Init>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a492:	f000 faaf 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a496:	2100      	movs	r1, #0
 800a498:	4809      	ldr	r0, [pc, #36]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a49a:	f005 fe1f 	bl	80100dc <HAL_I2CEx_ConfigAnalogFilter>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a4a4:	f000 faa6 	bl	800a9f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <MX_I2C1_Init+0x74>)
 800a4ac:	f005 fe61 	bl	8010172 <HAL_I2CEx_ConfigDigitalFilter>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a4b6:	f000 fa9d 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a4ba:	bf00      	nop
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000458 	.word	0x20000458
 800a4c4:	40005400 	.word	0x40005400
 800a4c8:	2000090e 	.word	0x2000090e

0800a4cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <MX_RTC_Init+0x44>)
 800a4d2:	4a10      	ldr	r2, [pc, #64]	; (800a514 <MX_RTC_Init+0x48>)
 800a4d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a4d6:	4b0e      	ldr	r3, [pc, #56]	; (800a510 <MX_RTC_Init+0x44>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <MX_RTC_Init+0x44>)
 800a4de:	227f      	movs	r2, #127	; 0x7f
 800a4e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a4e2:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <MX_RTC_Init+0x44>)
 800a4e4:	22ff      	movs	r2, #255	; 0xff
 800a4e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a4e8:	4b09      	ldr	r3, [pc, #36]	; (800a510 <MX_RTC_Init+0x44>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a4ee:	4b08      	ldr	r3, [pc, #32]	; (800a510 <MX_RTC_Init+0x44>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a4f4:	4b06      	ldr	r3, [pc, #24]	; (800a510 <MX_RTC_Init+0x44>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a4fa:	4805      	ldr	r0, [pc, #20]	; (800a510 <MX_RTC_Init+0x44>)
 800a4fc:	f007 fa44 	bl	8011988 <HAL_RTC_Init>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d001      	beq.n	800a50a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a506:	f000 fa75 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a50a:	bf00      	nop
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200005c4 	.word	0x200005c4
 800a514:	40002800 	.word	0x40002800

0800a518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a51c:	4b1b      	ldr	r3, [pc, #108]	; (800a58c <MX_SPI1_Init+0x74>)
 800a51e:	4a1c      	ldr	r2, [pc, #112]	; (800a590 <MX_SPI1_Init+0x78>)
 800a520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a522:	4b1a      	ldr	r3, [pc, #104]	; (800a58c <MX_SPI1_Init+0x74>)
 800a524:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a52a:	4b18      	ldr	r3, [pc, #96]	; (800a58c <MX_SPI1_Init+0x74>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a530:	4b16      	ldr	r3, [pc, #88]	; (800a58c <MX_SPI1_Init+0x74>)
 800a532:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a536:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a538:	4b14      	ldr	r3, [pc, #80]	; (800a58c <MX_SPI1_Init+0x74>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <MX_SPI1_Init+0x74>)
 800a540:	2200      	movs	r2, #0
 800a542:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a544:	4b11      	ldr	r3, [pc, #68]	; (800a58c <MX_SPI1_Init+0x74>)
 800a546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a54a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a54c:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <MX_SPI1_Init+0x74>)
 800a54e:	2218      	movs	r2, #24
 800a550:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a552:	4b0e      	ldr	r3, [pc, #56]	; (800a58c <MX_SPI1_Init+0x74>)
 800a554:	2200      	movs	r2, #0
 800a556:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <MX_SPI1_Init+0x74>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <MX_SPI1_Init+0x74>)
 800a560:	2200      	movs	r2, #0
 800a562:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a564:	4b09      	ldr	r3, [pc, #36]	; (800a58c <MX_SPI1_Init+0x74>)
 800a566:	2207      	movs	r2, #7
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a56a:	4b08      	ldr	r3, [pc, #32]	; (800a58c <MX_SPI1_Init+0x74>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a570:	4b06      	ldr	r3, [pc, #24]	; (800a58c <MX_SPI1_Init+0x74>)
 800a572:	2208      	movs	r2, #8
 800a574:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a576:	4805      	ldr	r0, [pc, #20]	; (800a58c <MX_SPI1_Init+0x74>)
 800a578:	f007 faeb 	bl	8011b52 <HAL_SPI_Init>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a582:	f000 fa37 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a586:	bf00      	nop
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	200005e4 	.word	0x200005e4
 800a590:	40013000 	.word	0x40013000

0800a594 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a598:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <MX_SPI2_Init+0x74>)
 800a59a:	4a1c      	ldr	r2, [pc, #112]	; (800a60c <MX_SPI2_Init+0x78>)
 800a59c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a59e:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a5a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a5a6:	4b18      	ldr	r3, [pc, #96]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a5ac:	4b16      	ldr	r3, [pc, #88]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a5b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5b4:	4b14      	ldr	r3, [pc, #80]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a5ba:	4b13      	ldr	r3, [pc, #76]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a5c0:	4b11      	ldr	r3, [pc, #68]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5ca:	2210      	movs	r2, #16
 800a5cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a5ce:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800a5e0:	4b09      	ldr	r3, [pc, #36]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a5e6:	4b08      	ldr	r3, [pc, #32]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a5ec:	4b06      	ldr	r3, [pc, #24]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5ee:	2208      	movs	r2, #8
 800a5f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a5f2:	4805      	ldr	r0, [pc, #20]	; (800a608 <MX_SPI2_Init+0x74>)
 800a5f4:	f007 faad 	bl	8011b52 <HAL_SPI_Init>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800a5fe:	f000 f9f9 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a602:	bf00      	nop
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200003f4 	.word	0x200003f4
 800a60c:	40003800 	.word	0x40003800

0800a610 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800a614:	4b1b      	ldr	r3, [pc, #108]	; (800a684 <MX_SPI3_Init+0x74>)
 800a616:	4a1c      	ldr	r2, [pc, #112]	; (800a688 <MX_SPI3_Init+0x78>)
 800a618:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a61a:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <MX_SPI3_Init+0x74>)
 800a61c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a620:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a622:	4b18      	ldr	r3, [pc, #96]	; (800a684 <MX_SPI3_Init+0x74>)
 800a624:	2200      	movs	r2, #0
 800a626:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a628:	4b16      	ldr	r3, [pc, #88]	; (800a684 <MX_SPI3_Init+0x74>)
 800a62a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a62e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a630:	4b14      	ldr	r3, [pc, #80]	; (800a684 <MX_SPI3_Init+0x74>)
 800a632:	2200      	movs	r2, #0
 800a634:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a636:	4b13      	ldr	r3, [pc, #76]	; (800a684 <MX_SPI3_Init+0x74>)
 800a638:	2200      	movs	r2, #0
 800a63a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a63c:	4b11      	ldr	r3, [pc, #68]	; (800a684 <MX_SPI3_Init+0x74>)
 800a63e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a642:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a644:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <MX_SPI3_Init+0x74>)
 800a646:	2210      	movs	r2, #16
 800a648:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a64a:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <MX_SPI3_Init+0x74>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a650:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <MX_SPI3_Init+0x74>)
 800a652:	2200      	movs	r2, #0
 800a654:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a656:	4b0b      	ldr	r3, [pc, #44]	; (800a684 <MX_SPI3_Init+0x74>)
 800a658:	2200      	movs	r2, #0
 800a65a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800a65c:	4b09      	ldr	r3, [pc, #36]	; (800a684 <MX_SPI3_Init+0x74>)
 800a65e:	2207      	movs	r2, #7
 800a660:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <MX_SPI3_Init+0x74>)
 800a664:	2200      	movs	r2, #0
 800a666:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <MX_SPI3_Init+0x74>)
 800a66a:	2208      	movs	r2, #8
 800a66c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a66e:	4805      	ldr	r0, [pc, #20]	; (800a684 <MX_SPI3_Init+0x74>)
 800a670:	f007 fa6f 	bl	8011b52 <HAL_SPI_Init>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800a67a:	f000 f9bb 	bl	800a9f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a67e:	bf00      	nop
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200004cc 	.word	0x200004cc
 800a688:	40003c00 	.word	0x40003c00

0800a68c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <MX_DMA_Init+0x38>)
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	4a0b      	ldr	r2, [pc, #44]	; (800a6c4 <MX_DMA_Init+0x38>)
 800a698:	f043 0301 	orr.w	r3, r3, #1
 800a69c:	6153      	str	r3, [r2, #20]
 800a69e:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <MX_DMA_Init+0x38>)
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	200b      	movs	r0, #11
 800a6b0:	f004 f8b1 	bl	800e816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a6b4:	200b      	movs	r0, #11
 800a6b6:	f004 f8ca 	bl	800e84e <HAL_NVIC_EnableIRQ>

}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	40021000 	.word	0x40021000

0800a6c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6ce:	f107 0314 	add.w	r3, r7, #20
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	605a      	str	r2, [r3, #4]
 800a6d8:	609a      	str	r2, [r3, #8]
 800a6da:	60da      	str	r2, [r3, #12]
 800a6dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6de:	4b64      	ldr	r3, [pc, #400]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	4a63      	ldr	r2, [pc, #396]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a6e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6e8:	6153      	str	r3, [r2, #20]
 800a6ea:	4b61      	ldr	r3, [pc, #388]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6f6:	4b5e      	ldr	r3, [pc, #376]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	4a5d      	ldr	r2, [pc, #372]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a6fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a700:	6153      	str	r3, [r2, #20]
 800a702:	4b5b      	ldr	r3, [pc, #364]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a70e:	4b58      	ldr	r3, [pc, #352]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	4a57      	ldr	r2, [pc, #348]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a718:	6153      	str	r3, [r2, #20]
 800a71a:	4b55      	ldr	r3, [pc, #340]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a722:	60bb      	str	r3, [r7, #8]
 800a724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a726:	4b52      	ldr	r3, [pc, #328]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	4a51      	ldr	r2, [pc, #324]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a72c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a730:	6153      	str	r3, [r2, #20]
 800a732:	4b4f      	ldr	r3, [pc, #316]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a73a:	607b      	str	r3, [r7, #4]
 800a73c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a73e:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	4a4b      	ldr	r2, [pc, #300]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a748:	6153      	str	r3, [r2, #20]
 800a74a:	4b49      	ldr	r3, [pc, #292]	; (800a870 <MX_GPIO_Init+0x1a8>)
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, GPIO_PIN_RESET);
 800a756:	2200      	movs	r2, #0
 800a758:	2120      	movs	r1, #32
 800a75a:	4846      	ldr	r0, [pc, #280]	; (800a874 <MX_GPIO_Init+0x1ac>)
 800a75c:	f004 fd48 	bl	800f1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R8_Pin|R6_Pin|R4_Pin|R10_Pin 
 800a760:	2200      	movs	r2, #0
 800a762:	f240 413b 	movw	r1, #1083	; 0x43b
 800a766:	4844      	ldr	r0, [pc, #272]	; (800a878 <MX_GPIO_Init+0x1b0>)
 800a768:	f004 fd42 	bl	800f1f0 <HAL_GPIO_WritePin>
                          |R1_Pin|R5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS020712_Pin|CS030813_Pin, GPIO_PIN_SET);
 800a76c:	2201      	movs	r2, #1
 800a76e:	f241 0104 	movw	r1, #4100	; 0x1004
 800a772:	4841      	ldr	r0, [pc, #260]	; (800a878 <MX_GPIO_Init+0x1b0>)
 800a774:	f004 fd3c 	bl	800f1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS040914_Pin|CS051015_Pin|CS010611_Pin, GPIO_PIN_SET);
 800a778:	2201      	movs	r2, #1
 800a77a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800a77e:	483d      	ldr	r0, [pc, #244]	; (800a874 <MX_GPIO_Init+0x1ac>)
 800a780:	f004 fd36 	bl	800f1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R3_Pin|R2_Pin, GPIO_PIN_RESET);
 800a784:	2200      	movs	r2, #0
 800a786:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800a78a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a78e:	f004 fd2f 	bl	800f1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R9_GPIO_Port, R9_Pin, GPIO_PIN_RESET);
 800a792:	2200      	movs	r2, #0
 800a794:	2104      	movs	r1, #4
 800a796:	4839      	ldr	r0, [pc, #228]	; (800a87c <MX_GPIO_Init+0x1b4>)
 800a798:	f004 fd2a 	bl	800f1f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OP6_Pin OP5_Pin OP4_Pin */
  GPIO_InitStruct.Pin = OP6_Pin|OP5_Pin|OP4_Pin;
 800a79c:	230e      	movs	r3, #14
 800a79e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7a8:	f107 0314 	add.w	r3, r7, #20
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7b2:	f004 faa9 	bl	800ed08 <HAL_GPIO_Init>

  /*Configure GPIO pin : R7_Pin */
  GPIO_InitStruct.Pin = R7_Pin;
 800a7b6:	2320      	movs	r3, #32
 800a7b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a7be:	2302      	movs	r3, #2
 800a7c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R7_GPIO_Port, &GPIO_InitStruct);
 800a7c6:	f107 0314 	add.w	r3, r7, #20
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4829      	ldr	r0, [pc, #164]	; (800a874 <MX_GPIO_Init+0x1ac>)
 800a7ce:	f004 fa9b 	bl	800ed08 <HAL_GPIO_Init>

  /*Configure GPIO pins : R8_Pin R6_Pin R4_Pin R10_Pin 
                           R1_Pin R5_Pin */
  GPIO_InitStruct.Pin = R8_Pin|R6_Pin|R4_Pin|R10_Pin 
 800a7d2:	f240 433b 	movw	r3, #1083	; 0x43b
 800a7d6:	617b      	str	r3, [r7, #20]
                          |R1_Pin|R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7e4:	f107 0314 	add.w	r3, r7, #20
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4823      	ldr	r0, [pc, #140]	; (800a878 <MX_GPIO_Init+0x1b0>)
 800a7ec:	f004 fa8c 	bl	800ed08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS020712_Pin CS030813_Pin */
  GPIO_InitStruct.Pin = CS020712_Pin|CS030813_Pin;
 800a7f0:	f241 0304 	movw	r3, #4100	; 0x1004
 800a7f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a7fe:	2301      	movs	r3, #1
 800a800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a802:	f107 0314 	add.w	r3, r7, #20
 800a806:	4619      	mov	r1, r3
 800a808:	481b      	ldr	r0, [pc, #108]	; (800a878 <MX_GPIO_Init+0x1b0>)
 800a80a:	f004 fa7d 	bl	800ed08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS040914_Pin CS051015_Pin CS010611_Pin */
  GPIO_InitStruct.Pin = CS040914_Pin|CS051015_Pin|CS010611_Pin;
 800a80e:	f44f 7360 	mov.w	r3, #896	; 0x380
 800a812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a814:	2301      	movs	r3, #1
 800a816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a818:	2301      	movs	r3, #1
 800a81a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a81c:	2301      	movs	r3, #1
 800a81e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a820:	f107 0314 	add.w	r3, r7, #20
 800a824:	4619      	mov	r1, r3
 800a826:	4813      	ldr	r0, [pc, #76]	; (800a874 <MX_GPIO_Init+0x1ac>)
 800a828:	f004 fa6e 	bl	800ed08 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R2_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R2_Pin;
 800a82c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800a830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a832:	2301      	movs	r3, #1
 800a834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a836:	2302      	movs	r3, #2
 800a838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a83a:	2301      	movs	r3, #1
 800a83c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a83e:	f107 0314 	add.w	r3, r7, #20
 800a842:	4619      	mov	r1, r3
 800a844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a848:	f004 fa5e 	bl	800ed08 <HAL_GPIO_Init>

  /*Configure GPIO pin : R9_Pin */
  GPIO_InitStruct.Pin = R9_Pin;
 800a84c:	2304      	movs	r3, #4
 800a84e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a850:	2301      	movs	r3, #1
 800a852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a854:	2302      	movs	r3, #2
 800a856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a858:	2301      	movs	r3, #1
 800a85a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R9_GPIO_Port, &GPIO_InitStruct);
 800a85c:	f107 0314 	add.w	r3, r7, #20
 800a860:	4619      	mov	r1, r3
 800a862:	4806      	ldr	r0, [pc, #24]	; (800a87c <MX_GPIO_Init+0x1b4>)
 800a864:	f004 fa50 	bl	800ed08 <HAL_GPIO_Init>

}
 800a868:	bf00      	nop
 800a86a:	3728      	adds	r7, #40	; 0x28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	40021000 	.word	0x40021000
 800a874:	48000800 	.word	0x48000800
 800a878:	48000400 	.word	0x48000400
 800a87c:	48000c00 	.word	0x48000c00

0800a880 <jump_to_bootloader>:

/* USER CODE BEGIN 4 */
void jump_to_bootloader(void){
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
//	NVIC_SystemReset();
	HAL_RCC_DeInit();
 800a886:	f005 fcc1 	bl	801020c <HAL_RCC_DeInit>
	HAL_DeInit();
 800a88a:	f001 fb17 	bl	800bebc <HAL_DeInit>
	SysTick->CTRL = 0;
 800a88e:	4b49      	ldr	r3, [pc, #292]	; (800a9b4 <jump_to_bootloader+0x134>)
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800a894:	4b47      	ldr	r3, [pc, #284]	; (800a9b4 <jump_to_bootloader+0x134>)
 800a896:	2200      	movs	r2, #0
 800a898:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800a89a:	4b46      	ldr	r3, [pc, #280]	; (800a9b4 <jump_to_bootloader+0x134>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_DeInit(R7_GPIO_Port, R7_Pin);
 800a8a0:	2120      	movs	r1, #32
 800a8a2:	4845      	ldr	r0, [pc, #276]	; (800a9b8 <jump_to_bootloader+0x138>)
 800a8a4:	f004 fbba 	bl	800f01c <HAL_GPIO_DeInit>


	  /*Configure GPIO pin Output Level */
	HAL_GPIO_DeInit(GPIOB, R8_Pin);
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	4844      	ldr	r0, [pc, #272]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8ac:	f004 fbb6 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, R6_Pin);
 800a8b0:	2102      	movs	r1, #2
 800a8b2:	4842      	ldr	r0, [pc, #264]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8b4:	f004 fbb2 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, R4_Pin);
 800a8b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8bc:	483f      	ldr	r0, [pc, #252]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8be:	f004 fbad 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, R10_Pin);
 800a8c2:	2108      	movs	r1, #8
 800a8c4:	483d      	ldr	r0, [pc, #244]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8c6:	f004 fba9 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, R1_Pin);
 800a8ca:	2110      	movs	r1, #16
 800a8cc:	483b      	ldr	r0, [pc, #236]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8ce:	f004 fba5 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, R1_Pin);
 800a8d2:	2110      	movs	r1, #16
 800a8d4:	4839      	ldr	r0, [pc, #228]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8d6:	f004 fba1 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, R5_Pin);
 800a8da:	2120      	movs	r1, #32
 800a8dc:	4837      	ldr	r0, [pc, #220]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8de:	f004 fb9d 	bl	800f01c <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOB, CS020712_Pin);
 800a8e2:	2104      	movs	r1, #4
 800a8e4:	4835      	ldr	r0, [pc, #212]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8e6:	f004 fb99 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, CS030813_Pin);
 800a8ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8ee:	4833      	ldr	r0, [pc, #204]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a8f0:	f004 fb94 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, CS040914_Pin);
 800a8f4:	2180      	movs	r1, #128	; 0x80
 800a8f6:	4830      	ldr	r0, [pc, #192]	; (800a9b8 <jump_to_bootloader+0x138>)
 800a8f8:	f004 fb90 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, CS051015_Pin);
 800a8fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a900:	482e      	ldr	r0, [pc, #184]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a902:	f004 fb8b 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, CS010611_Pin);
 800a906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a90a:	482c      	ldr	r0, [pc, #176]	; (800a9bc <jump_to_bootloader+0x13c>)
 800a90c:	f004 fb86 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, R3_Pin);
 800a910:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a918:	f004 fb80 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOA, R2_Pin);
 800a91c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a924:	f004 fb7a 	bl	800f01c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(R9_GPIO_Port, R9_Pin);
 800a928:	2104      	movs	r1, #4
 800a92a:	4825      	ldr	r0, [pc, #148]	; (800a9c0 <jump_to_bootloader+0x140>)
 800a92c:	f004 fb76 	bl	800f01c <HAL_GPIO_DeInit>

	HAL_CAN_DeInit(&hcan);
 800a930:	4824      	ldr	r0, [pc, #144]	; (800a9c4 <jump_to_bootloader+0x144>)
 800a932:	f003 f888 	bl	800da46 <HAL_CAN_DeInit>
	__HAL_RCC_DMA1_CLK_DISABLE();
 800a936:	4b24      	ldr	r3, [pc, #144]	; (800a9c8 <jump_to_bootloader+0x148>)
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	4a23      	ldr	r2, [pc, #140]	; (800a9c8 <jump_to_bootloader+0x148>)
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	6153      	str	r3, [r2, #20]
	HAL_SPI_DeInit(&hspi1);
 800a942:	4822      	ldr	r0, [pc, #136]	; (800a9cc <jump_to_bootloader+0x14c>)
 800a944:	f007 f997 	bl	8011c76 <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi2);
 800a948:	4821      	ldr	r0, [pc, #132]	; (800a9d0 <jump_to_bootloader+0x150>)
 800a94a:	f007 f994 	bl	8011c76 <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi3);
 800a94e:	4821      	ldr	r0, [pc, #132]	; (800a9d4 <jump_to_bootloader+0x154>)
 800a950:	f007 f991 	bl	8011c76 <HAL_SPI_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800a954:	4820      	ldr	r0, [pc, #128]	; (800a9d8 <jump_to_bootloader+0x158>)
 800a956:	f004 fcf2 	bl	800f33e <HAL_I2C_DeInit>
	HAL_ADC_DeInit(&hadc1);
 800a95a:	4820      	ldr	r0, [pc, #128]	; (800a9dc <jump_to_bootloader+0x15c>)
 800a95c:	f001 fd54 	bl	800c408 <HAL_ADC_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 800a960:	b672      	cpsid	i

	/*Disable all interrupts */
	__disable_irq();
	/* ARM Cortex-M Programming Guide to Memory Barrier Instructions.*/
	//__DSB();
	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800a962:	4b1f      	ldr	r3, [pc, #124]	; (800a9e0 <jump_to_bootloader+0x160>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a1e      	ldr	r2, [pc, #120]	; (800a9e0 <jump_to_bootloader+0x160>)
 800a968:	f023 0307 	bic.w	r3, r3, #7
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	4b1c      	ldr	r3, [pc, #112]	; (800a9e0 <jump_to_bootloader+0x160>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a1b      	ldr	r2, [pc, #108]	; (800a9e0 <jump_to_bootloader+0x160>)
 800a974:	f043 0301 	orr.w	r3, r3, #1
 800a978:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800a97a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a97e:	f3bf 8f6f 	isb	sy
	/* Remap is bot visible at once. Execute some unrelated command! */
	__DSB();
	__ISB();
	SCB->VTOR = 0x8000000;
 800a982:	4b18      	ldr	r3, [pc, #96]	; (800a9e4 <jump_to_bootloader+0x164>)
 800a984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a988:	609a      	str	r2, [r3, #8]
	void (*app_reset_handler)(void);
	uint32_t msp_value = *(volatile uint32_t*)(0x8000000);
 800a98a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	f383 8808 	msr	MSP, r3
	__set_MSP(msp_value);
	uint32_t resethandler_address = *(volatile uint32_t*)(0x8000000 +4);
 800a99c:	4b12      	ldr	r3, [pc, #72]	; (800a9e8 <jump_to_bootloader+0x168>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
	app_reset_handler = (void *) resethandler_address;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	607b      	str	r3, [r7, #4]
	app_reset_handler();
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4798      	blx	r3
}
 800a9aa:	bf00      	nop
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	e000e010 	.word	0xe000e010
 800a9b8:	48000800 	.word	0x48000800
 800a9bc:	48000400 	.word	0x48000400
 800a9c0:	48000c00 	.word	0x48000c00
 800a9c4:	200004a4 	.word	0x200004a4
 800a9c8:	40021000 	.word	0x40021000
 800a9cc:	200005e4 	.word	0x200005e4
 800a9d0:	200003f4 	.word	0x200003f4
 800a9d4:	200004cc 	.word	0x200004cc
 800a9d8:	20000458 	.word	0x20000458
 800a9dc:	20000530 	.word	0x20000530
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	e000ed00 	.word	0xe000ed00
 800a9e8:	08000004 	.word	0x08000004

0800a9ec <Reboot>:

void Reboot(void){
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
	//SCB->AIRCR = 0x05FA0000 | (uint32_t) 0x04;
	NVIC_SystemReset();
 800a9f0:	f7ff fa7e 	bl	8009ef0 <__NVIC_SystemReset>

0800a9f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a9f8:	bf00      	nop
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa0a:	4b0f      	ldr	r3, [pc, #60]	; (800aa48 <HAL_MspInit+0x44>)
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	4a0e      	ldr	r2, [pc, #56]	; (800aa48 <HAL_MspInit+0x44>)
 800aa10:	f043 0301 	orr.w	r3, r3, #1
 800aa14:	6193      	str	r3, [r2, #24]
 800aa16:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <HAL_MspInit+0x44>)
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa22:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <HAL_MspInit+0x44>)
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	4a08      	ldr	r2, [pc, #32]	; (800aa48 <HAL_MspInit+0x44>)
 800aa28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa2c:	61d3      	str	r3, [r2, #28]
 800aa2e:	4b06      	ldr	r3, [pc, #24]	; (800aa48 <HAL_MspInit+0x44>)
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	40021000 	.word	0x40021000

0800aa4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08a      	sub	sp, #40	; 0x28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa54:	f107 0314 	add.w	r3, r7, #20
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	605a      	str	r2, [r3, #4]
 800aa5e:	609a      	str	r2, [r3, #8]
 800aa60:	60da      	str	r2, [r3, #12]
 800aa62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa6c:	d164      	bne.n	800ab38 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800aa6e:	4b34      	ldr	r3, [pc, #208]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	4a33      	ldr	r2, [pc, #204]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aa74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa78:	6153      	str	r3, [r2, #20]
 800aa7a:	4b31      	ldr	r3, [pc, #196]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aa7c:	695b      	ldr	r3, [r3, #20]
 800aa7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa86:	4b2e      	ldr	r3, [pc, #184]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	4a2d      	ldr	r2, [pc, #180]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aa8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa90:	6153      	str	r3, [r2, #20]
 800aa92:	4b2b      	ldr	r3, [pc, #172]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa9e:	4b28      	ldr	r3, [pc, #160]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	4a27      	ldr	r2, [pc, #156]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aaa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa8:	6153      	str	r3, [r2, #20]
 800aaaa:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <HAL_ADC_MspInit+0xf4>)
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab2:	60bb      	str	r3, [r7, #8]
 800aab4:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = OP1_Pin|OP2_Pin|OP3_Pin;
 800aab6:	2307      	movs	r3, #7
 800aab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aaba:	2303      	movs	r3, #3
 800aabc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	4619      	mov	r1, r3
 800aac8:	481e      	ldr	r0, [pc, #120]	; (800ab44 <HAL_ADC_MspInit+0xf8>)
 800aaca:	f004 f91d 	bl	800ed08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OP6_Pin|OP5_Pin|OP4_Pin;
 800aace:	230e      	movs	r3, #14
 800aad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aad2:	2303      	movs	r3, #3
 800aad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aada:	f107 0314 	add.w	r3, r7, #20
 800aade:	4619      	mov	r1, r3
 800aae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aae4:	f004 f910 	bl	800ed08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800aae8:	4b17      	ldr	r3, [pc, #92]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800aaea:	4a18      	ldr	r2, [pc, #96]	; (800ab4c <HAL_ADC_MspInit+0x100>)
 800aaec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aaee:	4b16      	ldr	r3, [pc, #88]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800aaf4:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800aafc:	2280      	movs	r2, #128	; 0x80
 800aafe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab02:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ab08:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800ab10:	4b0d      	ldr	r3, [pc, #52]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab12:	2220      	movs	r2, #32
 800ab14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ab1c:	480a      	ldr	r0, [pc, #40]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab1e:	f003 febe 	bl	800e89e <HAL_DMA_Init>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 800ab28:	f7ff ff64 	bl	800a9f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a06      	ldr	r2, [pc, #24]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
 800ab32:	4a05      	ldr	r2, [pc, #20]	; (800ab48 <HAL_ADC_MspInit+0xfc>)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800ab38:	bf00      	nop
 800ab3a:	3728      	adds	r7, #40	; 0x28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	40021000 	.word	0x40021000
 800ab44:	48000800 	.word	0x48000800
 800ab48:	20000580 	.word	0x20000580
 800ab4c:	40020008 	.word	0x40020008

0800ab50 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab60:	d113      	bne.n	800ab8a <HAL_ADC_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 800ab62:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <HAL_ADC_MspDeInit+0x44>)
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	4a0b      	ldr	r2, [pc, #44]	; (800ab94 <HAL_ADC_MspDeInit+0x44>)
 800ab68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab6c:	6153      	str	r3, [r2, #20]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    HAL_GPIO_DeInit(GPIOC, OP1_Pin|OP2_Pin|OP3_Pin);
 800ab6e:	2107      	movs	r1, #7
 800ab70:	4809      	ldr	r0, [pc, #36]	; (800ab98 <HAL_ADC_MspDeInit+0x48>)
 800ab72:	f004 fa53 	bl	800f01c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, OP6_Pin|OP5_Pin|OP4_Pin);
 800ab76:	210e      	movs	r1, #14
 800ab78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab7c:	f004 fa4e 	bl	800f01c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab84:	4618      	mov	r0, r3
 800ab86:	f003 fed1 	bl	800e92c <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800ab8a:	bf00      	nop
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	40021000 	.word	0x40021000
 800ab98:	48000800 	.word	0x48000800

0800ab9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aba4:	f107 0314 	add.w	r3, r7, #20
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	605a      	str	r2, [r3, #4]
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a1b      	ldr	r2, [pc, #108]	; (800ac28 <HAL_CAN_MspInit+0x8c>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d130      	bne.n	800ac20 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800abbe:	4b1b      	ldr	r3, [pc, #108]	; (800ac2c <HAL_CAN_MspInit+0x90>)
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	4a1a      	ldr	r2, [pc, #104]	; (800ac2c <HAL_CAN_MspInit+0x90>)
 800abc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abc8:	61d3      	str	r3, [r2, #28]
 800abca:	4b18      	ldr	r3, [pc, #96]	; (800ac2c <HAL_CAN_MspInit+0x90>)
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abd2:	613b      	str	r3, [r7, #16]
 800abd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abd6:	4b15      	ldr	r3, [pc, #84]	; (800ac2c <HAL_CAN_MspInit+0x90>)
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	4a14      	ldr	r2, [pc, #80]	; (800ac2c <HAL_CAN_MspInit+0x90>)
 800abdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abe0:	6153      	str	r3, [r2, #20]
 800abe2:	4b12      	ldr	r3, [pc, #72]	; (800ac2c <HAL_CAN_MspInit+0x90>)
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800abee:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf4:	2302      	movs	r3, #2
 800abf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800abfc:	2303      	movs	r3, #3
 800abfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800ac00:	2309      	movs	r3, #9
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac04:	f107 0314 	add.w	r3, r7, #20
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4809      	ldr	r0, [pc, #36]	; (800ac30 <HAL_CAN_MspInit+0x94>)
 800ac0c:	f004 f87c 	bl	800ed08 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800ac10:	2200      	movs	r2, #0
 800ac12:	2100      	movs	r1, #0
 800ac14:	2014      	movs	r0, #20
 800ac16:	f003 fdfe 	bl	800e816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800ac1a:	2014      	movs	r0, #20
 800ac1c:	f003 fe17 	bl	800e84e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800ac20:	bf00      	nop
 800ac22:	3728      	adds	r7, #40	; 0x28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	40006400 	.word	0x40006400
 800ac2c:	40021000 	.word	0x40021000
 800ac30:	48000400 	.word	0x48000400

0800ac34 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a0a      	ldr	r2, [pc, #40]	; (800ac6c <HAL_CAN_MspDeInit+0x38>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d10d      	bne.n	800ac62 <HAL_CAN_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <HAL_CAN_MspDeInit+0x3c>)
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	4a09      	ldr	r2, [pc, #36]	; (800ac70 <HAL_CAN_MspDeInit+0x3c>)
 800ac4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ac50:	61d3      	str	r3, [r2, #28]
  
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    HAL_GPIO_DeInit(GPIOB, CAN_RX_Pin|CAN_TX_Pin);
 800ac52:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ac56:	4807      	ldr	r0, [pc, #28]	; (800ac74 <HAL_CAN_MspDeInit+0x40>)
 800ac58:	f004 f9e0 	bl	800f01c <HAL_GPIO_DeInit>

    /* CAN interrupt DeInit */
    HAL_NVIC_DisableIRQ(USB_LP_CAN_RX0_IRQn);
 800ac5c:	2014      	movs	r0, #20
 800ac5e:	f003 fe04 	bl	800e86a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }

}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	40006400 	.word	0x40006400
 800ac70:	40021000 	.word	0x40021000
 800ac74:	48000400 	.word	0x48000400

0800ac78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	605a      	str	r2, [r3, #4]
 800ac8a:	609a      	str	r2, [r3, #8]
 800ac8c:	60da      	str	r2, [r3, #12]
 800ac8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a17      	ldr	r2, [pc, #92]	; (800acf4 <HAL_I2C_MspInit+0x7c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d127      	bne.n	800acea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac9a:	4b17      	ldr	r3, [pc, #92]	; (800acf8 <HAL_I2C_MspInit+0x80>)
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	4a16      	ldr	r2, [pc, #88]	; (800acf8 <HAL_I2C_MspInit+0x80>)
 800aca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aca4:	6153      	str	r3, [r2, #20]
 800aca6:	4b14      	ldr	r3, [pc, #80]	; (800acf8 <HAL_I2C_MspInit+0x80>)
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acae:	613b      	str	r3, [r7, #16]
 800acb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800acb2:	23c0      	movs	r3, #192	; 0xc0
 800acb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800acb6:	2312      	movs	r3, #18
 800acb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800acba:	2301      	movs	r3, #1
 800acbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acbe:	2303      	movs	r3, #3
 800acc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800acc2:	2304      	movs	r3, #4
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acc6:	f107 0314 	add.w	r3, r7, #20
 800acca:	4619      	mov	r1, r3
 800accc:	480b      	ldr	r0, [pc, #44]	; (800acfc <HAL_I2C_MspInit+0x84>)
 800acce:	f004 f81b 	bl	800ed08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800acd2:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <HAL_I2C_MspInit+0x80>)
 800acd4:	69db      	ldr	r3, [r3, #28]
 800acd6:	4a08      	ldr	r2, [pc, #32]	; (800acf8 <HAL_I2C_MspInit+0x80>)
 800acd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acdc:	61d3      	str	r3, [r2, #28]
 800acde:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <HAL_I2C_MspInit+0x80>)
 800ace0:	69db      	ldr	r3, [r3, #28]
 800ace2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800acea:	bf00      	nop
 800acec:	3728      	adds	r7, #40	; 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	40005400 	.word	0x40005400
 800acf8:	40021000 	.word	0x40021000
 800acfc:	48000400 	.word	0x48000400

0800ad00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <HAL_I2C_MspDeInit+0x30>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d109      	bne.n	800ad26 <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800ad12:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <HAL_I2C_MspDeInit+0x34>)
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	4a07      	ldr	r2, [pc, #28]	; (800ad34 <HAL_I2C_MspDeInit+0x34>)
 800ad18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad1c:	61d3      	str	r3, [r2, #28]
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, I2C_SCL_Pin|I2C_SDA_Pin);
 800ad1e:	21c0      	movs	r1, #192	; 0xc0
 800ad20:	4805      	ldr	r0, [pc, #20]	; (800ad38 <HAL_I2C_MspDeInit+0x38>)
 800ad22:	f004 f97b 	bl	800f01c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	40005400 	.word	0x40005400
 800ad34:	40021000 	.word	0x40021000
 800ad38:	48000400 	.word	0x48000400

0800ad3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a0d      	ldr	r2, [pc, #52]	; (800ad80 <HAL_RTC_MspInit+0x44>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d111      	bne.n	800ad72 <HAL_RTC_MspInit+0x36>
 800ad4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad52:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	fa93 f3a3 	rbit	r3, r3
 800ad5a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ad5e:	fab3 f383 	clz	r3, r3
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	461a      	mov	r2, r3
 800ad66:	4b07      	ldr	r3, [pc, #28]	; (800ad84 <HAL_RTC_MspInit+0x48>)
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	2301      	movs	r3, #1
 800ad70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	40002800 	.word	0x40002800
 800ad84:	10908100 	.word	0x10908100

0800ad88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08e      	sub	sp, #56	; 0x38
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	605a      	str	r2, [r3, #4]
 800ad9a:	609a      	str	r2, [r3, #8]
 800ad9c:	60da      	str	r2, [r3, #12]
 800ad9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a46      	ldr	r2, [pc, #280]	; (800aec0 <HAL_SPI_MspInit+0x138>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d129      	bne.n	800adfe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800adaa:	4b46      	ldr	r3, [pc, #280]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	4a45      	ldr	r2, [pc, #276]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800adb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adb4:	6193      	str	r3, [r2, #24]
 800adb6:	4b43      	ldr	r3, [pc, #268]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800adbe:	623b      	str	r3, [r7, #32]
 800adc0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adc2:	4b40      	ldr	r3, [pc, #256]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	4a3f      	ldr	r2, [pc, #252]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800adc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adcc:	6153      	str	r3, [r2, #20]
 800adce:	4b3d      	ldr	r3, [pc, #244]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add6:	61fb      	str	r3, [r7, #28]
 800add8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK1_R_Pin|MISO1_Pin|MOSI1_R_Pin;
 800adda:	23e0      	movs	r3, #224	; 0xe0
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adde:	2302      	movs	r3, #2
 800ade0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ade6:	2303      	movs	r3, #3
 800ade8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800adea:	2305      	movs	r3, #5
 800adec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adf2:	4619      	mov	r1, r3
 800adf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800adf8:	f003 ff86 	bl	800ed08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800adfc:	e05c      	b.n	800aeb8 <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI2)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a31      	ldr	r2, [pc, #196]	; (800aec8 <HAL_SPI_MspInit+0x140>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d129      	bne.n	800ae5c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ae08:	4b2e      	ldr	r3, [pc, #184]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	4a2d      	ldr	r2, [pc, #180]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae12:	61d3      	str	r3, [r2, #28]
 800ae14:	4b2b      	ldr	r3, [pc, #172]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae1c:	61bb      	str	r3, [r7, #24]
 800ae1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae20:	4b28      	ldr	r3, [pc, #160]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	4a27      	ldr	r2, [pc, #156]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae2a:	6153      	str	r3, [r2, #20]
 800ae2c:	4b25      	ldr	r3, [pc, #148]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SCK2_R_Pin|MISO2_Pin|MOSI2_R_Pin;
 800ae38:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae3e:	2302      	movs	r3, #2
 800ae40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae42:	2300      	movs	r3, #0
 800ae44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ae46:	2303      	movs	r3, #3
 800ae48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ae4a:	2305      	movs	r3, #5
 800ae4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae52:	4619      	mov	r1, r3
 800ae54:	481d      	ldr	r0, [pc, #116]	; (800aecc <HAL_SPI_MspInit+0x144>)
 800ae56:	f003 ff57 	bl	800ed08 <HAL_GPIO_Init>
}
 800ae5a:	e02d      	b.n	800aeb8 <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI3)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a1b      	ldr	r2, [pc, #108]	; (800aed0 <HAL_SPI_MspInit+0x148>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d128      	bne.n	800aeb8 <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ae66:	4b17      	ldr	r3, [pc, #92]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	4a16      	ldr	r2, [pc, #88]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae70:	61d3      	str	r3, [r2, #28]
 800ae72:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae7a:	613b      	str	r3, [r7, #16]
 800ae7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ae7e:	4b11      	ldr	r3, [pc, #68]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	4a10      	ldr	r2, [pc, #64]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae88:	6153      	str	r3, [r2, #20]
 800ae8a:	4b0e      	ldr	r3, [pc, #56]	; (800aec4 <HAL_SPI_MspInit+0x13c>)
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCK3_R_Pin|MISO3_Pin|MOSI3_R_Pin;
 800ae96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea0:	2300      	movs	r3, #0
 800aea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aea4:	2303      	movs	r3, #3
 800aea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800aea8:	2306      	movs	r3, #6
 800aeaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aeac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4808      	ldr	r0, [pc, #32]	; (800aed4 <HAL_SPI_MspInit+0x14c>)
 800aeb4:	f003 ff28 	bl	800ed08 <HAL_GPIO_Init>
}
 800aeb8:	bf00      	nop
 800aeba:	3738      	adds	r7, #56	; 0x38
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	40013000 	.word	0x40013000
 800aec4:	40021000 	.word	0x40021000
 800aec8:	40003800 	.word	0x40003800
 800aecc:	48000400 	.word	0x48000400
 800aed0:	40003c00 	.word	0x40003c00
 800aed4:	48000800 	.word	0x48000800

0800aed8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a19      	ldr	r2, [pc, #100]	; (800af4c <HAL_SPI_MspDeInit+0x74>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d10b      	bne.n	800af02 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800aeea:	4b19      	ldr	r3, [pc, #100]	; (800af50 <HAL_SPI_MspDeInit+0x78>)
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	4a18      	ldr	r2, [pc, #96]	; (800af50 <HAL_SPI_MspDeInit+0x78>)
 800aef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aef4:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, SCK1_R_Pin|MISO1_Pin|MOSI1_R_Pin);
 800aef6:	21e0      	movs	r1, #224	; 0xe0
 800aef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aefc:	f004 f88e 	bl	800f01c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800af00:	e020      	b.n	800af44 <HAL_SPI_MspDeInit+0x6c>
  else if(hspi->Instance==SPI2)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a13      	ldr	r2, [pc, #76]	; (800af54 <HAL_SPI_MspDeInit+0x7c>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d10b      	bne.n	800af24 <HAL_SPI_MspDeInit+0x4c>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800af0c:	4b10      	ldr	r3, [pc, #64]	; (800af50 <HAL_SPI_MspDeInit+0x78>)
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <HAL_SPI_MspDeInit+0x78>)
 800af12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af16:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, SCK2_R_Pin|MISO2_Pin|MOSI2_R_Pin);
 800af18:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800af1c:	480e      	ldr	r0, [pc, #56]	; (800af58 <HAL_SPI_MspDeInit+0x80>)
 800af1e:	f004 f87d 	bl	800f01c <HAL_GPIO_DeInit>
}
 800af22:	e00f      	b.n	800af44 <HAL_SPI_MspDeInit+0x6c>
  else if(hspi->Instance==SPI3)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a0c      	ldr	r2, [pc, #48]	; (800af5c <HAL_SPI_MspDeInit+0x84>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d10a      	bne.n	800af44 <HAL_SPI_MspDeInit+0x6c>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800af2e:	4b08      	ldr	r3, [pc, #32]	; (800af50 <HAL_SPI_MspDeInit+0x78>)
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	4a07      	ldr	r2, [pc, #28]	; (800af50 <HAL_SPI_MspDeInit+0x78>)
 800af34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af38:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, SCK3_R_Pin|MISO3_Pin|MOSI3_R_Pin);
 800af3a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800af3e:	4808      	ldr	r0, [pc, #32]	; (800af60 <HAL_SPI_MspDeInit+0x88>)
 800af40:	f004 f86c 	bl	800f01c <HAL_GPIO_DeInit>
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	40013000 	.word	0x40013000
 800af50:	40021000 	.word	0x40021000
 800af54:	40003800 	.word	0x40003800
 800af58:	48000400 	.word	0x48000400
 800af5c:	40003c00 	.word	0x40003c00
 800af60:	48000800 	.word	0x48000800

0800af64 <__NVIC_SystemReset>:
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800af68:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800af6c:	4b05      	ldr	r3, [pc, #20]	; (800af84 <__NVIC_SystemReset+0x20>)
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800af74:	4903      	ldr	r1, [pc, #12]	; (800af84 <__NVIC_SystemReset+0x20>)
 800af76:	4b04      	ldr	r3, [pc, #16]	; (800af88 <__NVIC_SystemReset+0x24>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	60cb      	str	r3, [r1, #12]
 800af7c:	f3bf 8f4f 	dsb	sy
    __NOP();
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <__NVIC_SystemReset+0x1c>
 800af84:	e000ed00 	.word	0xe000ed00
 800af88:	05fa0004 	.word	0x05fa0004

0800af8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	NVIC_SystemReset();
 800af90:	f7ff ffe8 	bl	800af64 <__NVIC_SystemReset>

0800af94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 800af98:	f7ff ffe4 	bl	800af64 <__NVIC_SystemReset>

0800af9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800afa0:	e7fe      	b.n	800afa0 <MemManage_Handler+0x4>

0800afa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800afa2:	b480      	push	{r7}
 800afa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800afa6:	e7fe      	b.n	800afa6 <BusFault_Handler+0x4>

0800afa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800afac:	e7fe      	b.n	800afac <UsageFault_Handler+0x4>

0800afae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800afae:	b480      	push	{r7}
 800afb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800afb2:	bf00      	nop
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800afc0:	bf00      	nop
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800afca:	b480      	push	{r7}
 800afcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800afce:	bf00      	nop
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800afdc:	f000 ffc4 	bl	800bf68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800afe0:	bf00      	nop
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800afe8:	4802      	ldr	r0, [pc, #8]	; (800aff4 <DMA1_Channel1_IRQHandler+0x10>)
 800afea:	f003 fd7f 	bl	800eaec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800afee:	bf00      	nop
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20000580 	.word	0x20000580

0800aff8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800affc:	4802      	ldr	r0, [pc, #8]	; (800b008 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800affe:	f003 f8e4 	bl	800e1ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800b002:	bf00      	nop
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	200004a4 	.word	0x200004a4

0800b00c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <SystemInit+0x24>)
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b016:	4a06      	ldr	r2, [pc, #24]	; (800b030 <SystemInit+0x24>)
 800b018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b01c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b020:	4b03      	ldr	r3, [pc, #12]	; (800b030 <SystemInit+0x24>)
 800b022:	4a04      	ldr	r2, [pc, #16]	; (800b034 <SystemInit+0x28>)
 800b024:	609a      	str	r2, [r3, #8]
#endif
}
 800b026:	bf00      	nop
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	e000ed00 	.word	0xe000ed00
 800b034:	08008800 	.word	0x08008800

0800b038 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b038:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b070 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800b03c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800b03e:	e003      	b.n	800b048 <LoopCopyDataInit>

0800b040 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800b042:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800b044:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800b046:	3104      	adds	r1, #4

0800b048 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800b048:	480b      	ldr	r0, [pc, #44]	; (800b078 <LoopForever+0xa>)
	ldr	r3, =_edata
 800b04a:	4b0c      	ldr	r3, [pc, #48]	; (800b07c <LoopForever+0xe>)
	adds	r2, r0, r1
 800b04c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800b04e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800b050:	d3f6      	bcc.n	800b040 <CopyDataInit>
	ldr	r2, =_sbss
 800b052:	4a0b      	ldr	r2, [pc, #44]	; (800b080 <LoopForever+0x12>)
	b	LoopFillZerobss
 800b054:	e002      	b.n	800b05c <LoopFillZerobss>

0800b056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800b056:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800b058:	f842 3b04 	str.w	r3, [r2], #4

0800b05c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <LoopForever+0x16>)
	cmp	r2, r3
 800b05e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800b060:	d3f9      	bcc.n	800b056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800b062:	f7ff ffd3 	bl	800b00c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b066:	f007 fc45 	bl	80128f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b06a:	f7fe ff73 	bl	8009f54 <main>

0800b06e <LoopForever>:

LoopForever:
    b LoopForever
 800b06e:	e7fe      	b.n	800b06e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800b070:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800b074:	080129ac 	.word	0x080129ac
	ldr	r0, =_sdata
 800b078:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800b07c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800b080:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800b084:	20000678 	.word	0x20000678

0800b088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b088:	e7fe      	b.n	800b088 <ADC1_2_IRQHandler>
	...

0800b08c <mcp_init>:
uint8_t RNVdata[6];
uint16_t I2CAddress[6];


void mcp_init (void)
{
 800b08c:	b480      	push	{r7}
 800b08e:	af00      	add	r7, sp, #0
	VMAdd[0] = VW0;
 800b090:	4b1d      	ldr	r3, [pc, #116]	; (800b108 <mcp_init+0x7c>)
 800b092:	2200      	movs	r2, #0
 800b094:	701a      	strb	r2, [r3, #0]
	VMAdd[1] = VW1;
 800b096:	4b1c      	ldr	r3, [pc, #112]	; (800b108 <mcp_init+0x7c>)
 800b098:	2210      	movs	r2, #16
 800b09a:	705a      	strb	r2, [r3, #1]
	VMAdd[2] = VW2;
 800b09c:	4b1a      	ldr	r3, [pc, #104]	; (800b108 <mcp_init+0x7c>)
 800b09e:	2260      	movs	r2, #96	; 0x60
 800b0a0:	709a      	strb	r2, [r3, #2]
	VMAdd[3] = VW3;
 800b0a2:	4b19      	ldr	r3, [pc, #100]	; (800b108 <mcp_init+0x7c>)
 800b0a4:	2270      	movs	r2, #112	; 0x70
 800b0a6:	70da      	strb	r2, [r3, #3]
	VMAdd[4] = VW0;
 800b0a8:	4b17      	ldr	r3, [pc, #92]	; (800b108 <mcp_init+0x7c>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	711a      	strb	r2, [r3, #4]
	VMAdd[5] = VW1;
 800b0ae:	4b16      	ldr	r3, [pc, #88]	; (800b108 <mcp_init+0x7c>)
 800b0b0:	2210      	movs	r2, #16
 800b0b2:	715a      	strb	r2, [r3, #5]

	NVMAdd[0] = NVW0;
 800b0b4:	4b15      	ldr	r3, [pc, #84]	; (800b10c <mcp_init+0x80>)
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	701a      	strb	r2, [r3, #0]
	NVMAdd[1] = NVW1;
 800b0ba:	4b14      	ldr	r3, [pc, #80]	; (800b10c <mcp_init+0x80>)
 800b0bc:	2230      	movs	r2, #48	; 0x30
 800b0be:	705a      	strb	r2, [r3, #1]
	NVMAdd[2] = NVW2;
 800b0c0:	4b12      	ldr	r3, [pc, #72]	; (800b10c <mcp_init+0x80>)
 800b0c2:	2280      	movs	r2, #128	; 0x80
 800b0c4:	709a      	strb	r2, [r3, #2]
	NVMAdd[3] = NVW3;
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <mcp_init+0x80>)
 800b0c8:	2290      	movs	r2, #144	; 0x90
 800b0ca:	70da      	strb	r2, [r3, #3]
	NVMAdd[4] = NVW0;
 800b0cc:	4b0f      	ldr	r3, [pc, #60]	; (800b10c <mcp_init+0x80>)
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	711a      	strb	r2, [r3, #4]
	NVMAdd[5] = NVW1;
 800b0d2:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <mcp_init+0x80>)
 800b0d4:	2230      	movs	r2, #48	; 0x30
 800b0d6:	715a      	strb	r2, [r3, #5]


	I2CAddress[0] = MCP1_ADRESS;
 800b0d8:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <mcp_init+0x84>)
 800b0da:	2258      	movs	r2, #88	; 0x58
 800b0dc:	801a      	strh	r2, [r3, #0]
	I2CAddress[1] = MCP1_ADRESS;
 800b0de:	4b0c      	ldr	r3, [pc, #48]	; (800b110 <mcp_init+0x84>)
 800b0e0:	2258      	movs	r2, #88	; 0x58
 800b0e2:	805a      	strh	r2, [r3, #2]
	I2CAddress[2] = MCP1_ADRESS;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <mcp_init+0x84>)
 800b0e6:	2258      	movs	r2, #88	; 0x58
 800b0e8:	809a      	strh	r2, [r3, #4]
	I2CAddress[3] = MCP1_ADRESS;
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <mcp_init+0x84>)
 800b0ec:	2258      	movs	r2, #88	; 0x58
 800b0ee:	80da      	strh	r2, [r3, #6]
	I2CAddress[4] = MCP2_ADRESS;
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <mcp_init+0x84>)
 800b0f2:	225c      	movs	r2, #92	; 0x5c
 800b0f4:	811a      	strh	r2, [r3, #8]
	I2CAddress[5] = MCP2_ADRESS;
 800b0f6:	4b06      	ldr	r3, [pc, #24]	; (800b110 <mcp_init+0x84>)
 800b0f8:	225c      	movs	r2, #92	; 0x5c
 800b0fa:	815a      	strh	r2, [r3, #10]
}
 800b0fc:	bf00      	nop
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	20000648 	.word	0x20000648
 800b10c:	2000066c 	.word	0x2000066c
 800b110:	20000660 	.word	0x20000660

0800b114 <set_mcp>:
	HAL_I2C_Mem_Read(ctx, MCP2_ADRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
}
// Set one digipot
void set_mcp(int i, uint8_t value)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af02      	add	r7, sp, #8
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
    uint8_t WVdata[2], WNVdata[2];

    WVdata[0] = VMAdd[i] | CMD_WRITE;
 800b120:	4a18      	ldr	r2, [pc, #96]	; (800b184 <set_mcp+0x70>)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4413      	add	r3, r2
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	733b      	strb	r3, [r7, #12]
    WNVdata[0] = NVMAdd[i] | CMD_WRITE;
 800b12a:	4a17      	ldr	r2, [pc, #92]	; (800b188 <set_mcp+0x74>)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4413      	add	r3, r2
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	723b      	strb	r3, [r7, #8]
    WVdata[1] = WNVdata[1] = value;
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	727b      	strb	r3, [r7, #9]
 800b138:	7a7b      	ldrb	r3, [r7, #9]
 800b13a:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1,I2CAddress[i],WVdata,2,1000);
 800b13c:	4a13      	ldr	r2, [pc, #76]	; (800b18c <set_mcp+0x78>)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b144:	f107 020c 	add.w	r2, r7, #12
 800b148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	2302      	movs	r3, #2
 800b150:	480f      	ldr	r0, [pc, #60]	; (800b190 <set_mcp+0x7c>)
 800b152:	f004 f923 	bl	800f39c <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 800b156:	2005      	movs	r0, #5
 800b158:	f000 ff26 	bl	800bfa8 <HAL_Delay>
    HAL_I2C_Master_Transmit(&hi2c1,I2CAddress[i],WNVdata,2,1000);
 800b15c:	4a0b      	ldr	r2, [pc, #44]	; (800b18c <set_mcp+0x78>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800b164:	f107 0208 	add.w	r2, r7, #8
 800b168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	2302      	movs	r3, #2
 800b170:	4807      	ldr	r0, [pc, #28]	; (800b190 <set_mcp+0x7c>)
 800b172:	f004 f913 	bl	800f39c <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 800b176:	2005      	movs	r0, #5
 800b178:	f000 ff16 	bl	800bfa8 <HAL_Delay>

}
 800b17c:	bf00      	nop
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	20000648 	.word	0x20000648
 800b188:	2000066c 	.word	0x2000066c
 800b18c:	20000660 	.word	0x20000660
 800b190:	20000458 	.word	0x20000458

0800b194 <Set_DigipotMCPs>:

}
//Setting mcp wipers MCP1 (WP0, WP1, WP2, WP3) for (op6,op5,op4,op3)
//and MCP2 (WP0, WP1, x,x) for (op2, op1)in Kohm
void Set_DigipotMCPs(uint8_t *SetValues)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
	for (int i =0; i < 6; i++)
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e00a      	b.n	800b1b8 <Set_DigipotMCPs+0x24>
	{
		set_mcp (i, SetValues[i]);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7ff ffb1 	bl	800b114 <set_mcp>
	for (int i =0; i < 6; i++)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	ddf1      	ble.n	800b1a2 <Set_DigipotMCPs+0xe>
	}

	for (int i =0; i < 6; i++)
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60bb      	str	r3, [r7, #8]
 800b1c2:	e002      	b.n	800b1ca <Set_DigipotMCPs+0x36>
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60bb      	str	r3, [r7, #8]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b05      	cmp	r3, #5
 800b1ce:	ddf9      	ble.n	800b1c4 <Set_DigipotMCPs+0x30>
	{
//		get_mcp(i);
	}

}
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <hts221_read_reg>:
  * @param  len   number of consecutive register to read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(hts221_ctx_t* ctx, uint8_t reg, uint8_t* data, uint16_t len, uint8_t cs)
{
 800b1d8:	b590      	push	{r4, r7, lr}
 800b1da:	b089      	sub	sp, #36	; 0x24
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	72fb      	strb	r3, [r7, #11]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len, cs);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	685c      	ldr	r4, [r3, #4]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6898      	ldr	r0, [r3, #8]
 800b1f4:	893a      	ldrh	r2, [r7, #8]
 800b1f6:	7af9      	ldrb	r1, [r7, #11]
 800b1f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	4613      	mov	r3, r2
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	47a0      	blx	r4
 800b204:	6178      	str	r0, [r7, #20]
  return ret;
 800b206:	697b      	ldr	r3, [r7, #20]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	371c      	adds	r7, #28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd90      	pop	{r4, r7, pc}

0800b210 <hts221_write_reg>:
  * @param  len   number of consecutive register to write
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(hts221_ctx_t* ctx, uint8_t reg, uint8_t* data, uint16_t len, uint8_t cs)
{
 800b210:	b590      	push	{r4, r7, lr}
 800b212:	b089      	sub	sp, #36	; 0x24
 800b214:	af02      	add	r7, sp, #8
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	607a      	str	r2, [r7, #4]
 800b21a:	461a      	mov	r2, r3
 800b21c:	460b      	mov	r3, r1
 800b21e:	72fb      	strb	r3, [r7, #11]
 800b220:	4613      	mov	r3, r2
 800b222:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len, cs);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681c      	ldr	r4, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6898      	ldr	r0, [r3, #8]
 800b22c:	893a      	ldrh	r2, [r7, #8]
 800b22e:	7af9      	ldrb	r1, [r7, #11]
 800b230:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	4613      	mov	r3, r2
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	47a0      	blx	r4
 800b23c:	6178      	str	r0, [r7, #20]
  return ret;
 800b23e:	697b      	ldr	r3, [r7, #20]
}
 800b240:	4618      	mov	r0, r3
 800b242:	371c      	adds	r7, #28
 800b244:	46bd      	mov	sp, r7
 800b246:	bd90      	pop	{r4, r7, pc}

0800b248 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val, uint8_t cs)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
 800b254:	4613      	mov	r3, r2
 800b256:	70bb      	strb	r3, [r7, #2]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1, cs);
 800b258:	f107 0208 	add.w	r2, r7, #8
 800b25c:	78bb      	ldrb	r3, [r7, #2]
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	2301      	movs	r3, #1
 800b262:	2120      	movs	r1, #32
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff ffb7 	bl	800b1d8 <hts221_read_reg>
 800b26a:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d111      	bne.n	800b296 <hts221_data_rate_set+0x4e>
    reg.odr = (uint8_t)val;
 800b272:	78fb      	ldrb	r3, [r7, #3]
 800b274:	f003 0303 	and.w	r3, r3, #3
 800b278:	b2da      	uxtb	r2, r3
 800b27a:	7a3b      	ldrb	r3, [r7, #8]
 800b27c:	f362 0301 	bfi	r3, r2, #0, #2
 800b280:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1, cs);
 800b282:	f107 0208 	add.w	r2, r7, #8
 800b286:	78bb      	ldrb	r3, [r7, #2]
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	2301      	movs	r3, #1
 800b28c:	2120      	movs	r1, #32
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff ffbe 	bl	800b210 <hts221_write_reg>
 800b294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b296:	68fb      	ldr	r3, [r7, #12]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val, uint8_t cs)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	70fb      	strb	r3, [r7, #3]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	70bb      	strb	r3, [r7, #2]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1, cs);
 800b2b0:	f107 0208 	add.w	r2, r7, #8
 800b2b4:	78bb      	ldrb	r3, [r7, #2]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	2120      	movs	r1, #32
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff ff8b 	bl	800b1d8 <hts221_read_reg>
 800b2c2:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d111      	bne.n	800b2ee <hts221_block_data_update_set+0x4e>
    reg.bdu = val;
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	7a3b      	ldrb	r3, [r7, #8]
 800b2d4:	f362 0382 	bfi	r3, r2, #2, #1
 800b2d8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1, cs);
 800b2da:	f107 0208 	add.w	r2, r7, #8
 800b2de:	78bb      	ldrb	r3, [r7, #2]
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	2120      	movs	r1, #32
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff ff92 	bl	800b210 <hts221_write_reg>
 800b2ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af02      	add	r7, sp, #8
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2, cs);
 800b306:	79fb      	ldrb	r3, [r7, #7]
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	2302      	movs	r3, #2
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	2128      	movs	r1, #40	; 0x28
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff ff61 	bl	800b1d8 <hts221_read_reg>
 800b316:	6178      	str	r0, [r7, #20]
  return ret;
 800b318:	697b      	ldr	r3, [r7, #20]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b088      	sub	sp, #32
 800b326:	af02      	add	r7, sp, #8
 800b328:	60f8      	str	r0, [r7, #12]
 800b32a:	60b9      	str	r1, [r7, #8]
 800b32c:	4613      	mov	r3, r2
 800b32e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2, cs);
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	2302      	movs	r3, #2
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	212a      	movs	r1, #42	; 0x2a
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7ff ff4c 	bl	800b1d8 <hts221_read_reg>
 800b340:	6178      	str	r0, [r7, #20]
  return ret;
 800b342:	697b      	ldr	r3, [r7, #20]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b088      	sub	sp, #32
 800b350:	af02      	add	r7, sp, #8
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1, cs);
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	2301      	movs	r3, #1
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	210f      	movs	r1, #15
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7ff ff37 	bl	800b1d8 <hts221_read_reg>
 800b36a:	6178      	str	r0, [r7, #20]
  return ret;
 800b36c:	697b      	ldr	r3, [r7, #20]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val, uint8_t cs)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b086      	sub	sp, #24
 800b37a:	af02      	add	r7, sp, #8
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	460b      	mov	r3, r1
 800b380:	70fb      	strb	r3, [r7, #3]
 800b382:	4613      	mov	r3, r2
 800b384:	70bb      	strb	r3, [r7, #2]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1, cs);
 800b386:	f107 0208 	add.w	r2, r7, #8
 800b38a:	78bb      	ldrb	r3, [r7, #2]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	2301      	movs	r3, #1
 800b390:	2120      	movs	r1, #32
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff ff20 	bl	800b1d8 <hts221_read_reg>
 800b398:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d111      	bne.n	800b3c4 <hts221_power_on_set+0x4e>
    reg.pd = val;
 800b3a0:	78fb      	ldrb	r3, [r7, #3]
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	7a3b      	ldrb	r3, [r7, #8]
 800b3aa:	f362 13c7 	bfi	r3, r2, #7, #1
 800b3ae:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1, cs);
 800b3b0:	f107 0208 	add.w	r2, r7, #8
 800b3b4:	78bb      	ldrb	r3, [r7, #2]
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	2120      	movs	r1, #32
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff ff27 	bl	800b210 <hts221_write_reg>
 800b3c2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b088      	sub	sp, #32
 800b3d2:	af02      	add	r7, sp, #8
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1, cs);
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	2130      	movs	r1, #48	; 0x30
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7ff fef6 	bl	800b1d8 <hts221_read_reg>
 800b3ec:	6178      	str	r0, [r7, #20]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	085b      	lsrs	r3, r3, #1
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	701a      	strb	r2, [r3, #0]

  return ret;
 800b3fa:	697b      	ldr	r3, [r7, #20]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b088      	sub	sp, #32
 800b408:	af02      	add	r7, sp, #8
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1, cs);
 800b412:	79fb      	ldrb	r3, [r7, #7]
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	2301      	movs	r3, #1
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	2131      	movs	r1, #49	; 0x31
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f7ff fedb 	bl	800b1d8 <hts221_read_reg>
 800b422:	6178      	str	r0, [r7, #20]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	085b      	lsrs	r3, r3, #1
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	701a      	strb	r2, [r3, #0]

  return ret;
 800b430:	697b      	ldr	r3, [r7, #20]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b08a      	sub	sp, #40	; 0x28
 800b43e:	af02      	add	r7, sp, #8
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	4613      	mov	r3, r2
 800b446:	71fb      	strb	r3, [r7, #7]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1, cs);
 800b448:	f107 0217 	add.w	r2, r7, #23
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	2301      	movs	r3, #1
 800b452:	2132      	movs	r1, #50	; 0x32
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f7ff febf 	bl	800b1d8 <hts221_read_reg>
 800b45a:	61f8      	str	r0, [r7, #28]

  if(ret == 0){
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d116      	bne.n	800b490 <hts221_temp_deg_point_0_get+0x56>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1, cs);
 800b462:	f107 0218 	add.w	r2, r7, #24
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	2301      	movs	r3, #1
 800b46c:	2135      	movs	r1, #53	; 0x35
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7ff feb2 	bl	800b1d8 <hts221_read_reg>
 800b474:	61f8      	str	r0, [r7, #28]
    coeff_h = reg.t0_msb;
 800b476:	7e3b      	ldrb	r3, [r7, #24]
 800b478:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	76fb      	strb	r3, [r7, #27]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 800b480:	7efb      	ldrb	r3, [r7, #27]
 800b482:	021b      	lsls	r3, r3, #8
 800b484:	7dfa      	ldrb	r2, [r7, #23]
 800b486:	4413      	add	r3, r2
 800b488:	10db      	asrs	r3, r3, #3
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b490:	69fb      	ldr	r3, [r7, #28]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b08a      	sub	sp, #40	; 0x28
 800b49e:	af02      	add	r7, sp, #8
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	71fb      	strb	r3, [r7, #7]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1, cs);
 800b4a8:	f107 0217 	add.w	r2, r7, #23
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	2133      	movs	r1, #51	; 0x33
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7ff fe8f 	bl	800b1d8 <hts221_read_reg>
 800b4ba:	61f8      	str	r0, [r7, #28]

  if(ret == 0){
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d116      	bne.n	800b4f0 <hts221_temp_deg_point_1_get+0x56>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1, cs);
 800b4c2:	f107 0218 	add.w	r2, r7, #24
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	2135      	movs	r1, #53	; 0x35
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f7ff fe82 	bl	800b1d8 <hts221_read_reg>
 800b4d4:	61f8      	str	r0, [r7, #28]
    coeff_h = reg.t1_msb;
 800b4d6:	7e3b      	ldrb	r3, [r7, #24]
 800b4d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	76fb      	strb	r3, [r7, #27]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 800b4e0:	7efb      	ldrb	r3, [r7, #27]
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	7dfa      	ldrb	r2, [r7, #23]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	10db      	asrs	r3, r3, #3
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b4f0:	69fb      	ldr	r3, [r7, #28]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3720      	adds	r7, #32
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b088      	sub	sp, #32
 800b4fe:	af02      	add	r7, sp, #8
 800b500:	60f8      	str	r0, [r7, #12]
 800b502:	60b9      	str	r1, [r7, #8]
 800b504:	4613      	mov	r3, r2
 800b506:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2, cs);
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2302      	movs	r3, #2
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	2136      	movs	r1, #54	; 0x36
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f7ff fe60 	bl	800b1d8 <hts221_read_reg>
 800b518:	6178      	str	r0, [r7, #20]
  return ret;
 800b51a:	697b      	ldr	r3, [r7, #20]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af02      	add	r7, sp, #8
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	4613      	mov	r3, r2
 800b530:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2, cs);
 800b532:	79fb      	ldrb	r3, [r7, #7]
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	2302      	movs	r3, #2
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	213a      	movs	r1, #58	; 0x3a
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fe4b 	bl	800b1d8 <hts221_read_reg>
 800b542:	6178      	str	r0, [r7, #20]
  return ret;
 800b544:	697b      	ldr	r3, [r7, #20]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b088      	sub	sp, #32
 800b552:	af02      	add	r7, sp, #8
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	4613      	mov	r3, r2
 800b55a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2, cs);
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	2302      	movs	r3, #2
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	213c      	movs	r1, #60	; 0x3c
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f7ff fe36 	bl	800b1d8 <hts221_read_reg>
 800b56c:	6178      	str	r0, [r7, #20]
  return ret;
 800b56e:	697b      	ldr	r3, [r7, #20]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff, uint8_t cs)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2, cs);
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	2302      	movs	r3, #2
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	213e      	movs	r1, #62	; 0x3e
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7ff fe21 	bl	800b1d8 <hts221_read_reg>
 800b596:	6178      	str	r0, [r7, #20]
  return ret;
 800b598:	697b      	ldr	r3, [r7, #20]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3718      	adds	r7, #24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <linear_interpolation>:

float linear_interpolation(lin_t *lin, int16_t x)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b083      	sub	sp, #12
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	807b      	strh	r3, [r7, #2]
 return ((lin->y1 - lin->y0) * x +  ((lin->x1 * lin->y0) - (lin->x0 * lin->y1))) / (lin->x1 - lin->x0);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	ed93 7a03 	vldr	s14, [r3, #12]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	edd3 7a01 	vldr	s15, [r3, #4]
 800b5ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	edd3 6a02 	vldr	s13, [r3, #8]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	edd3 7a01 	vldr	s15, [r3, #4]
 800b5da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	ed93 6a00 	vldr	s12, [r3]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	edd3 7a03 	vldr	s15, [r3, #12]
 800b5ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b5ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b5f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	edd3 6a02 	vldr	s13, [r3, #8]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	edd3 7a00 	vldr	s15, [r3]
 800b602:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b606:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b60a:	eef0 7a66 	vmov.f32	s15, s13
}
 800b60e:	eeb0 0a67 	vmov.f32	s0, s15
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <platform_writeSPI>:

int32_t platform_writeSPI(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len, uint8_t cs)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	607a      	str	r2, [r7, #4]
 800b626:	461a      	mov	r2, r3
 800b628:	460b      	mov	r3, r1
 800b62a:	72fb      	strb	r3, [r7, #11]
 800b62c:	4613      	mov	r3, r2
 800b62e:	813b      	strh	r3, [r7, #8]
	reg |= 0x40;
 800b630:	7afb      	ldrb	r3, [r7, #11]
 800b632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b636:	b2db      	uxtb	r3, r3
 800b638:	72fb      	strb	r3, [r7, #11]
	chip_select(cs);
 800b63a:	7e3b      	ldrb	r3, [r7, #24]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fd ffc9 	bl	80095d4 <chip_select>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800b642:	f107 010b 	add.w	r1, r7, #11
 800b646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b64a:	2201      	movs	r2, #1
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f006 fb3a 	bl	8011cc6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, bufp, len, 1000);
 800b652:	893a      	ldrh	r2, [r7, #8]
 800b654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b658:	6879      	ldr	r1, [r7, #4]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f006 fb33 	bl	8011cc6 <HAL_SPI_Transmit>
	chip_unselect(cs);
 800b660:	7e3b      	ldrb	r3, [r7, #24]
 800b662:	4618      	mov	r0, r3
 800b664:	f7fd ffcc 	bl	8009600 <chip_unselect>
	return 0;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <platform_readSPI>:

int32_t platform_readSPI(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len, uint8_t cs)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	461a      	mov	r2, r3
 800b67e:	460b      	mov	r3, r1
 800b680:	72fb      	strb	r3, [r7, #11]
 800b682:	4613      	mov	r3, r2
 800b684:	813b      	strh	r3, [r7, #8]
    reg |= 0xC0;
 800b686:	7afb      	ldrb	r3, [r7, #11]
 800b688:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	72fb      	strb	r3, [r7, #11]
	chip_select(cs);
 800b690:	7e3b      	ldrb	r3, [r7, #24]
 800b692:	4618      	mov	r0, r3
 800b694:	f7fd ff9e 	bl	80095d4 <chip_select>
    HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800b698:	f107 010b 	add.w	r1, r7, #11
 800b69c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f006 fb0f 	bl	8011cc6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle, bufp, len, 1000);
 800b6a8:	893a      	ldrh	r2, [r7, #8]
 800b6aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f006 fc6e 	bl	8011f92 <HAL_SPI_Receive>
	chip_unselect(cs);
 800b6b6:	7e3b      	ldrb	r3, [r7, #24]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fd ffa1 	bl	8009600 <chip_unselect>
	return 0;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <hts221_init>:

void hts221_init(hts221_ctx_t *ctx, uint8_t cs, SPI_HandleTypeDef *bus)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	72fb      	strb	r3, [r7, #11]
	ctx->handle = bus;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	609a      	str	r2, [r3, #8]
	ctx->write_reg = platform_writeSPI;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4a0a      	ldr	r2, [pc, #40]	; (800b708 <hts221_init+0x40>)
 800b6e0:	601a      	str	r2, [r3, #0]
	ctx->read_reg = platform_readSPI;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	4a09      	ldr	r2, [pc, #36]	; (800b70c <hts221_init+0x44>)
 800b6e6:	605a      	str	r2, [r3, #4]
	hts221_block_data_update_set(ctx, PROPERTY_ENABLE,cs);
 800b6e8:	7afb      	ldrb	r3, [r7, #11]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff fdd6 	bl	800b2a0 <hts221_block_data_update_set>
	hts221_data_rate_set(ctx, HTS221_ODR_1Hz,cs);
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f7ff fda4 	bl	800b248 <hts221_data_rate_set>
//	hts221_power_on_set(ctx, PROPERTY_ENABLE,cs);
}
 800b700:	bf00      	nop
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	0800b61d 	.word	0x0800b61d
 800b70c:	0800b673 	.word	0x0800b673

0800b710 <hts221_get_temp_humid>:
	returnHTS221_OK;
}
#endif

void hts221_get_temp_humid(hts221_ctx_t *ctx, float *temperature, float *humidity, uint8_t cs)
{
 800b710:	b590      	push	{r4, r7, lr}
 800b712:	b091      	sub	sp, #68	; 0x44
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	70fb      	strb	r3, [r7, #3]
	axis1bit16_t data_raw_temperature, data_raw_humidity, coeff;
	lin_t lin_temp, lin_hum;

	hts221_power_on_set(ctx, PROPERTY_ENABLE,cs);
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	461a      	mov	r2, r3
 800b722:	2101      	movs	r1, #1
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f7ff fe26 	bl	800b376 <hts221_power_on_set>
	user_delay_ms(100);
 800b72a:	2064      	movs	r0, #100	; 0x64
 800b72c:	f7fd feee 	bl	800950c <user_delay_ms>

	hts221_hum_adc_point_0_get(ctx, coeff.u8bit, cs);
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b736:	4619      	mov	r1, r3
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f7ff fede 	bl	800b4fa <hts221_hum_adc_point_0_get>
	lin_hum.x0 = (float)coeff.i16bit;
 800b73e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b74a:	edc7 7a05 	vstr	s15, [r7, #20]
	hts221_hum_rh_point_0_get(ctx, coeff.u8bit, cs);
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b754:	4619      	mov	r1, r3
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff fe39 	bl	800b3ce <hts221_hum_rh_point_0_get>
	lin_hum.y0 = (float)coeff.u8bit[0];
 800b75c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b768:	edc7 7a06 	vstr	s15, [r7, #24]
	hts221_hum_adc_point_1_get(ctx, coeff.u8bit, cs);
 800b76c:	78fa      	ldrb	r2, [r7, #3]
 800b76e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b772:	4619      	mov	r1, r3
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7ff fed5 	bl	800b524 <hts221_hum_adc_point_1_get>
	lin_hum.x1 = (float)coeff.i16bit;
 800b77a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b77e:	ee07 3a90 	vmov	s15, r3
 800b782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b786:	edc7 7a07 	vstr	s15, [r7, #28]
	hts221_hum_rh_point_1_get(ctx, coeff.u8bit, cs);
 800b78a:	78fa      	ldrb	r2, [r7, #3]
 800b78c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b790:	4619      	mov	r1, r3
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f7ff fe36 	bl	800b404 <hts221_hum_rh_point_1_get>
	lin_hum.y1 = (float)coeff.u8bit[0];
 800b798:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b79c:	ee07 3a90 	vmov	s15, r3
 800b7a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a4:	edc7 7a08 	vstr	s15, [r7, #32]

	hts221_temp_adc_point_0_get(ctx, coeff.u8bit, cs);
 800b7a8:	78fa      	ldrb	r2, [r7, #3]
 800b7aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7ff fecc 	bl	800b54e <hts221_temp_adc_point_0_get>
	lin_temp.x0 = (float)coeff.i16bit;
 800b7b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	hts221_temp_deg_point_0_get(ctx, coeff.u8bit, cs);
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f7ff fe33 	bl	800b43a <hts221_temp_deg_point_0_get>
	lin_temp.y0 = (float)coeff.u8bit[0];
 800b7d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b7d8:	ee07 3a90 	vmov	s15, r3
 800b7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	hts221_temp_adc_point_1_get(ctx, coeff.u8bit, cs);
 800b7e4:	78fa      	ldrb	r2, [r7, #3]
 800b7e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f7ff fec3 	bl	800b578 <hts221_temp_adc_point_1_get>
	lin_temp.x1 = (float)coeff.i16bit;
 800b7f2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800b7f6:	ee07 3a90 	vmov	s15, r3
 800b7fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	hts221_temp_deg_point_1_get(ctx, coeff.u8bit, cs);
 800b802:	78fa      	ldrb	r2, [r7, #3]
 800b804:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b808:	4619      	mov	r1, r3
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff fe45 	bl	800b49a <hts221_temp_deg_point_1_get>
	lin_temp.y1 = (float)coeff.u8bit[0];
 800b810:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 800b820:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b824:	2202      	movs	r2, #2
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f007 f887 	bl	801293c <memset>
    memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 800b82e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b832:	2202      	movs	r2, #2
 800b834:	2100      	movs	r1, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f007 f880 	bl	801293c <memset>

	hts221_temperature_raw_get(ctx, data_raw_temperature.u8bit, cs);
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b842:	4619      	mov	r1, r3
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff fd6c 	bl	800b322 <hts221_temperature_raw_get>
	hts221_humidity_raw_get(ctx, data_raw_humidity.u8bit, cs);
 800b84a:	78fa      	ldrb	r2, [r7, #3]
 800b84c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b850:	4619      	mov	r1, r3
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff fd50 	bl	800b2f8 <hts221_humidity_raw_get>

	*temperature = linear_interpolation(&lin_temp, data_raw_temperature.i16bit);
 800b858:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800b85c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b860:	4611      	mov	r1, r2
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff fe9d 	bl	800b5a2 <linear_interpolation>
 800b868:	eef0 7a40 	vmov.f32	s15, s0
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	edc3 7a00 	vstr	s15, [r3]
	if(*temperature < 10 || *temperature > 50) *temperature = 97.9;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	edd3 7a00 	vldr	s15, [r3]
 800b878:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b87c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b884:	d409      	bmi.n	800b89a <hts221_get_temp_humid+0x18a>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	edd3 7a00 	vldr	s15, [r3]
 800b88c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b930 <hts221_get_temp_humid+0x220>
 800b890:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b898:	dd02      	ble.n	800b8a0 <hts221_get_temp_humid+0x190>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	4a25      	ldr	r2, [pc, #148]	; (800b934 <hts221_get_temp_humid+0x224>)
 800b89e:	601a      	str	r2, [r3, #0]
	*humidity = linear_interpolation(&lin_hum, data_raw_humidity.i16bit);
 800b8a0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800b8a4:	f107 0314 	add.w	r3, r7, #20
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fe79 	bl	800b5a2 <linear_interpolation>
 800b8b0:	eef0 7a40 	vmov.f32	s15, s0
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	edc3 7a00 	vstr	s15, [r3]
	// subtract 10% from raw reading
	*humidity = (*humidity * 0.9);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fd f9ee 	bl	8008ca0 <__aeabi_f2d>
 800b8c4:	a318      	add	r3, pc, #96	; (adr r3, 800b928 <hts221_get_temp_humid+0x218>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f7fd fa41 	bl	8008d50 <__aeabi_dmul>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f7fd fc4d 	bl	8009174 <__aeabi_d2f>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	601a      	str	r2, [r3, #0]
	// outof range
	if(*humidity < 10) *humidity = 979;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	edd3 7a00 	vldr	s15, [r3]
 800b8e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f2:	d502      	bpl.n	800b8fa <hts221_get_temp_humid+0x1ea>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a10      	ldr	r2, [pc, #64]	; (800b938 <hts221_get_temp_humid+0x228>)
 800b8f8:	601a      	str	r2, [r3, #0]
	if(*humidity > 95) *humidity = 978;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	edd3 7a00 	vldr	s15, [r3]
 800b900:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800b93c <hts221_get_temp_humid+0x22c>
 800b904:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90c:	dd02      	ble.n	800b914 <hts221_get_temp_humid+0x204>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a0b      	ldr	r2, [pc, #44]	; (800b940 <hts221_get_temp_humid+0x230>)
 800b912:	601a      	str	r2, [r3, #0]
	hts221_power_on_set(ctx, PROPERTY_DISABLE,cs);
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	461a      	mov	r2, r3
 800b918:	2100      	movs	r1, #0
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f7ff fd2b 	bl	800b376 <hts221_power_on_set>

}
 800b920:	bf00      	nop
 800b922:	3744      	adds	r7, #68	; 0x44
 800b924:	46bd      	mov	sp, r7
 800b926:	bd90      	pop	{r4, r7, pc}
 800b928:	cccccccd 	.word	0xcccccccd
 800b92c:	3feccccc 	.word	0x3feccccc
 800b930:	42480000 	.word	0x42480000
 800b934:	42c3cccd 	.word	0x42c3cccd
 800b938:	4474c000 	.word	0x4474c000
 800b93c:	42be0000 	.word	0x42be0000
 800b940:	44748000 	.word	0x44748000

0800b944 <lis2dh12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800b944:	b590      	push	{r4, r7, lr}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	461a      	mov	r2, r3
 800b950:	460b      	mov	r3, r1
 800b952:	72fb      	strb	r3, [r7, #11]
 800b954:	4613      	mov	r3, r2
 800b956:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	685c      	ldr	r4, [r3, #4]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6898      	ldr	r0, [r3, #8]
 800b960:	893b      	ldrh	r3, [r7, #8]
 800b962:	7af9      	ldrb	r1, [r7, #11]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	47a0      	blx	r4
 800b968:	6178      	str	r0, [r7, #20]
  return ret;
 800b96a:	697b      	ldr	r3, [r7, #20]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	371c      	adds	r7, #28
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}

0800b974 <lis2dh12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 800b974:	b590      	push	{r4, r7, lr}
 800b976:	b087      	sub	sp, #28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	607a      	str	r2, [r7, #4]
 800b97e:	461a      	mov	r2, r3
 800b980:	460b      	mov	r3, r1
 800b982:	72fb      	strb	r3, [r7, #11]
 800b984:	4613      	mov	r3, r2
 800b986:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681c      	ldr	r4, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6898      	ldr	r0, [r3, #8]
 800b990:	893b      	ldrh	r3, [r7, #8]
 800b992:	7af9      	ldrb	r1, [r7, #11]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	47a0      	blx	r4
 800b998:	6178      	str	r0, [r7, #20]
  return ret;
 800b99a:	697b      	ldr	r3, [r7, #20]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd90      	pop	{r4, r7, pc}

0800b9a4 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(stmdev_ctx_t *ctx, lis2dh12_op_md_t val)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 800b9b0:	f107 0210 	add.w	r2, r7, #16
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	2120      	movs	r1, #32
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7ff ffc3 	bl	800b944 <lis2dh12_read_reg>
 800b9be:	6178      	str	r0, [r7, #20]
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d107      	bne.n	800b9d6 <lis2dh12_operating_mode_set+0x32>
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 800b9c6:	f107 020c 	add.w	r2, r7, #12
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	2123      	movs	r1, #35	; 0x23
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff ffb8 	bl	800b944 <lis2dh12_read_reg>
 800b9d4:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  }
  if (ret == 0) {
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d128      	bne.n	800ba2e <lis2dh12_operating_mode_set+0x8a>
    if ( val == LIS2DH12_HR_12bit ) {
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d107      	bne.n	800b9f2 <lis2dh12_operating_mode_set+0x4e>
      ctrl_reg1.lpen = 0;
 800b9e2:	7c3b      	ldrb	r3, [r7, #16]
 800b9e4:	f36f 03c3 	bfc	r3, #3, #1
 800b9e8:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 800b9ea:	7b3b      	ldrb	r3, [r7, #12]
 800b9ec:	f043 0308 	orr.w	r3, r3, #8
 800b9f0:	733b      	strb	r3, [r7, #12]
    }
    if (val == LIS2DH12_NM_10bit) {
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d107      	bne.n	800ba08 <lis2dh12_operating_mode_set+0x64>
      ctrl_reg1.lpen = 0;
 800b9f8:	7c3b      	ldrb	r3, [r7, #16]
 800b9fa:	f36f 03c3 	bfc	r3, #3, #1
 800b9fe:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 800ba00:	7b3b      	ldrb	r3, [r7, #12]
 800ba02:	f36f 03c3 	bfc	r3, #3, #1
 800ba06:	733b      	strb	r3, [r7, #12]
    }
    if (val == LIS2DH12_LP_8bit) {
 800ba08:	78fb      	ldrb	r3, [r7, #3]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d107      	bne.n	800ba1e <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 1;
 800ba0e:	7c3b      	ldrb	r3, [r7, #16]
 800ba10:	f043 0308 	orr.w	r3, r3, #8
 800ba14:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 800ba16:	7b3b      	ldrb	r3, [r7, #12]
 800ba18:	f36f 03c3 	bfc	r3, #3, #1
 800ba1c:	733b      	strb	r3, [r7, #12]
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800ba1e:	f107 0210 	add.w	r2, r7, #16
 800ba22:	2301      	movs	r3, #1
 800ba24:	2120      	movs	r1, #32
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff ffa4 	bl	800b974 <lis2dh12_write_reg>
 800ba2c:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d107      	bne.n	800ba44 <lis2dh12_operating_mode_set+0xa0>
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800ba34:	f107 020c 	add.w	r2, r7, #12
 800ba38:	2301      	movs	r3, #1
 800ba3a:	2123      	movs	r1, #35	; 0x23
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff ff99 	bl	800b974 <lis2dh12_write_reg>
 800ba42:	6178      	str	r0, [r7, #20]
  }
  return ret;
 800ba44:	697b      	ldr	r3, [r7, #20]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800ba5a:	f107 0208 	add.w	r2, r7, #8
 800ba5e:	2301      	movs	r3, #1
 800ba60:	2120      	movs	r1, #32
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7ff ff6e 	bl	800b944 <lis2dh12_read_reg>
 800ba68:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10f      	bne.n	800ba90 <lis2dh12_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	7a3b      	ldrb	r3, [r7, #8]
 800ba7a:	f362 1307 	bfi	r3, r2, #4, #4
 800ba7e:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 800ba80:	f107 0208 	add.w	r2, r7, #8
 800ba84:	2301      	movs	r3, #1
 800ba86:	2120      	movs	r1, #32
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff ff73 	bl	800b974 <lis2dh12_write_reg>
 800ba8e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800ba90:	68fb      	ldr	r3, [r7, #12]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	460b      	mov	r3, r1
 800baa4:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800baa6:	f107 0208 	add.w	r2, r7, #8
 800baaa:	2301      	movs	r3, #1
 800baac:	2123      	movs	r1, #35	; 0x23
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff ff48 	bl	800b944 <lis2dh12_read_reg>
 800bab4:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10f      	bne.n	800badc <lis2dh12_full_scale_set+0x42>
    ctrl_reg4.fs = (uint8_t)val;
 800babc:	78fb      	ldrb	r3, [r7, #3]
 800babe:	f003 0303 	and.w	r3, r3, #3
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	7a3b      	ldrb	r3, [r7, #8]
 800bac6:	f362 1305 	bfi	r3, r2, #4, #2
 800baca:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800bacc:	f107 0208 	add.w	r2, r7, #8
 800bad0:	2301      	movs	r3, #1
 800bad2:	2123      	movs	r1, #35	; 0x23
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff ff4d 	bl	800b974 <lis2dh12_write_reg>
 800bada:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800badc:	68fb      	ldr	r3, [r7, #12]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	460b      	mov	r3, r1
 800baf0:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800baf2:	f107 0208 	add.w	r2, r7, #8
 800baf6:	2301      	movs	r3, #1
 800baf8:	2123      	movs	r1, #35	; 0x23
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff ff22 	bl	800b944 <lis2dh12_read_reg>
 800bb00:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10f      	bne.n	800bb28 <lis2dh12_block_data_update_set+0x42>
    ctrl_reg4.bdu = val;
 800bb08:	78fb      	ldrb	r3, [r7, #3]
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	7a3b      	ldrb	r3, [r7, #8]
 800bb12:	f362 13c7 	bfi	r3, r2, #7, #1
 800bb16:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800bb18:	f107 0208 	add.w	r2, r7, #8
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	2123      	movs	r1, #35	; 0x23
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7ff ff27 	bl	800b974 <lis2dh12_write_reg>
 800bb26:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800bb28:	68fb      	ldr	r3, [r7, #12]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <platform_write_lis2dh>:
  }
  return ret;
}

int32_t platform_write_lis2dh(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b088      	sub	sp, #32
 800bb36:	af04      	add	r7, sp, #16
 800bb38:	60f8      	str	r0, [r7, #12]
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	460b      	mov	r3, r1
 800bb40:	72fb      	strb	r3, [r7, #11]
 800bb42:	4613      	mov	r3, r2
 800bb44:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, (LIS2DH12_I2C_ADD_H-1), reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800bb46:	7afb      	ldrb	r3, [r7, #11]
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb4e:	9302      	str	r3, [sp, #8]
 800bb50:	893b      	ldrh	r3, [r7, #8]
 800bb52:	9301      	str	r3, [sp, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2301      	movs	r3, #1
 800bb5a:	2132      	movs	r1, #50	; 0x32
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f003 fe07 	bl	800f770 <HAL_I2C_Mem_Write>
    return 0;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <platform_read_lis2dh>:

int32_t platform_read_lis2dh(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af04      	add	r7, sp, #16
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	607a      	str	r2, [r7, #4]
 800bb76:	461a      	mov	r2, r3
 800bb78:	460b      	mov	r3, r1
 800bb7a:	72fb      	strb	r3, [r7, #11]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	893b      	ldrh	r3, [r7, #8]
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	2301      	movs	r3, #1
 800bb94:	2133      	movs	r1, #51	; 0x33
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f003 fefe 	bl	800f998 <HAL_I2C_Mem_Read>
	return 0;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <lis2dh12_init>:

int32_t lis2dh12_init(stmdev_ctx_t *ctx, I2C_HandleTypeDef *bus)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
	ctx->write_reg = platform_write_lis2dh;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a13      	ldr	r2, [pc, #76]	; (800bc04 <lis2dh12_init+0x5c>)
 800bbb6:	601a      	str	r2, [r3, #0]
	ctx->read_reg = platform_read_lis2dh;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a13      	ldr	r2, [pc, #76]	; (800bc08 <lis2dh12_init+0x60>)
 800bbbc:	605a      	str	r2, [r3, #4]
	ctx->handle = bus;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	609a      	str	r2, [r3, #8]

	/* Enable Block Data Update */
	if (lis2dh12_block_data_update_set(ctx, PROPERTY_ENABLE) == 0)
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff ff8d 	bl	800bae6 <lis2dh12_block_data_update_set>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d113      	bne.n	800bbfa <lis2dh12_init+0x52>
	{
		/* Set Output Data Rate to 1Hz */
		if (lis2dh12_data_rate_set(ctx, LIS2DH12_ODR_1Hz) == 0)
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff ff3a 	bl	800ba4e <lis2dh12_data_rate_set>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10c      	bne.n	800bbfa <lis2dh12_init+0x52>
		{
			/* Set full scale to 2g */
			if(lis2dh12_full_scale_set(ctx, LIS2DH12_2g) == 0)
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff ff59 	bl	800ba9a <lis2dh12_full_scale_set>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d105      	bne.n	800bbfa <lis2dh12_init+0x52>
				/* Set device in continuous mode with 12 bit resolution */
				return (lis2dh12_operating_mode_set(ctx, LIS2DH12_HR_12bit));
 800bbee:	2100      	movs	r1, #0
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff fed7 	bl	800b9a4 <lis2dh12_operating_mode_set>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	e000      	b.n	800bbfc <lis2dh12_init+0x54>
		}
	}
	return(1);
 800bbfa:	2301      	movs	r3, #1
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	0800bb33 	.word	0x0800bb33
 800bc08:	0800bb6d 	.word	0x0800bb6d

0800bc0c <lis2dh12_get_XYZ>:

int32_t lis2dh12_get_XYZ(stmdev_ctx_t *ctx, uint16_t *X, uint16_t *Y, uint16_t *Z)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	603b      	str	r3, [r7, #0]
	uint8_t value[6];
	uint8_t reg[] = {0x28, 0x29, 0x2A, 0x2b, 0x2C, 0x2D};
 800bc1a:	4a2c      	ldr	r2, [pc, #176]	; (800bccc <lis2dh12_get_XYZ+0xc0>)
 800bc1c:	f107 0314 	add.w	r3, r7, #20
 800bc20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc24:	6018      	str	r0, [r3, #0]
 800bc26:	3304      	adds	r3, #4
 800bc28:	8019      	strh	r1, [r3, #0]
	int32_t ret;

	for (uint8_t i=0; i<6; i++)
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc30:	e018      	b.n	800bc64 <lis2dh12_get_XYZ+0x58>
	{
		 ret = lis2dh12_read_reg(ctx, reg[i], &value[i], 1);
 800bc32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800bc40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc44:	f107 021c 	add.w	r2, r7, #28
 800bc48:	441a      	add	r2, r3
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f7ff fe79 	bl	800b944 <lis2dh12_read_reg>
 800bc52:	6278      	str	r0, [r7, #36]	; 0x24
		 if (ret == 1)
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d009      	beq.n	800bc6e <lis2dh12_get_XYZ+0x62>
	for (uint8_t i=0; i<6; i++)
 800bc5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc5e:	3301      	adds	r3, #1
 800bc60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc68:	2b05      	cmp	r3, #5
 800bc6a:	d9e2      	bls.n	800bc32 <lis2dh12_get_XYZ+0x26>
 800bc6c:	e000      	b.n	800bc70 <lis2dh12_get_XYZ+0x64>
		 {
			 break;
 800bc6e:	bf00      	nop
		 }
	}
    // upper 12bits are the valid data
	if( ret == 0)
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d125      	bne.n	800bcc2 <lis2dh12_get_XYZ+0xb6>
	{
		//*X = ((value[1] << 8) | value[0]) >> 4;
		*X = ((value[1]& 0x0F)<<8) + (value[0] & 0xFF);
 800bc76:	7f7b      	ldrb	r3, [r7, #29]
 800bc78:	021b      	lsls	r3, r3, #8
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	7f3b      	ldrb	r3, [r7, #28]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	4413      	add	r3, r2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	801a      	strh	r2, [r3, #0]
		//*Y = ((value[3] << 8) | value[2]) >> 4;
		*Y = ((value[3]& 0x0F)<<8) + (value[2] & 0xFF);
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	021b      	lsls	r3, r3, #8
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	7fbb      	ldrb	r3, [r7, #30]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4413      	add	r3, r2
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	801a      	strh	r2, [r3, #0]
		//*Z = ((value[5] << 8) | value[4]) >> 4;
		*Z = ((value[5]& 0x0F)<<8) + (value[4] & 0xFF);
 800bca6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bcaa:	021b      	lsls	r3, r3, #8
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	4413      	add	r3, r2
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	801a      	strh	r2, [r3, #0]
	}
	return (ret);
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3728      	adds	r7, #40	; 0x28
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	0801296c 	.word	0x0801296c

0800bcd0 <shtc3_sendcmd>:

/**
 * Send a single 16bit command to the SHTC3 device.
 */
static int shtc3_sendcmd(shtc3_driver_t *self_p, uint16_t cmd)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	807b      	strh	r3, [r7, #2]
    uint8_t i2ccmd[2];
    i2ccmd[0] = (cmd >> 8) & 0xff;
 800bcdc:	887b      	ldrh	r3, [r7, #2]
 800bcde:	0a1b      	lsrs	r3, r3, #8
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	733b      	strb	r3, [r7, #12]
    i2ccmd[1] = cmd & 0xff;
 800bce6:	887b      	ldrh	r3, [r7, #2]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(self_p->i2c_p, self_p->i2c_addr, i2ccmd, 2, 1000);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6818      	ldr	r0, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6859      	ldr	r1, [r3, #4]
 800bcf4:	f107 020c 	add.w	r2, r7, #12
 800bcf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	2302      	movs	r3, #2
 800bd00:	f003 fb4c 	bl	800f39c <HAL_I2C_Master_Transmit>
    return (0);
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <shtc3_read2x16>:

/**
 * Read 2x 16bit to the SHTC3 device.
 */
static int shtc3_read2x16(shtc3_driver_t *self_p, uint8_t *data_p)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af02      	add	r7, sp, #8
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	6039      	str	r1, [r7, #0]
    HAL_I2C_Master_Receive(self_p->i2c_p, self_p->i2c_addr, data_p, 6, 1000);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6859      	ldr	r1, [r3, #4]
 800bd20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	2306      	movs	r3, #6
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	f003 fc2b 	bl	800f584 <HAL_I2C_Master_Receive>
    return (0);
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <shtc3_init>:

int shtc3_init(shtc3_driver_t *self_p, void *i2c_p, int i2c_addr)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
    self_p->i2c_p = i2c_p;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	601a      	str	r2, [r3, #0]
    self_p->i2c_addr = i2c_addr;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	605a      	str	r2, [r3, #4]
    return (0);
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
	...

0800bd60 <shtc3_calculate_temp_c>:

/**
 * Calculate the temperature in Celsius from SHTC3 raw temperature.
 */
static float shtc3_calculate_temp_c(uint8_t msb, uint8_t lsb)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	460a      	mov	r2, r1
 800bd6a:	71fb      	strb	r3, [r7, #7]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	71bb      	strb	r3, [r7, #6]
    uint16_t val;
    float temp;

    val = msb << 8 | lsb;
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	021b      	lsls	r3, r3, #8
 800bd74:	b21a      	sxth	r2, r3
 800bd76:	79bb      	ldrb	r3, [r7, #6]
 800bd78:	b21b      	sxth	r3, r3
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	b21b      	sxth	r3, r3
 800bd7e:	81fb      	strh	r3, [r7, #14]
    temp = 175.0f * ((float)val / 65535.0f) - 45.0f;
 800bd80:	89fb      	ldrh	r3, [r7, #14]
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd8a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800bdbc <shtc3_calculate_temp_c+0x5c>
 800bd8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd92:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800bdc0 <shtc3_calculate_temp_c+0x60>
 800bd96:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd9a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800bdc4 <shtc3_calculate_temp_c+0x64>
 800bd9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bda2:	edc7 7a02 	vstr	s15, [r7, #8]

    return (temp);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	ee07 3a90 	vmov	s15, r3
}
 800bdac:	eeb0 0a67 	vmov.f32	s0, s15
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	477fff00 	.word	0x477fff00
 800bdc0:	432f0000 	.word	0x432f0000
 800bdc4:	42340000 	.word	0x42340000

0800bdc8 <shtc3_calculate_humid>:

/**
 * Calculate the humidity from SHT3xD raw temperature.
 */
static float shtc3_calculate_humid(uint8_t msb, uint8_t lsb)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	460a      	mov	r2, r1
 800bdd2:	71fb      	strb	r3, [r7, #7]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	71bb      	strb	r3, [r7, #6]
    uint16_t val;
    float humid;

    val = msb << 8 | lsb;
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	b21a      	sxth	r2, r3
 800bdde:	79bb      	ldrb	r3, [r7, #6]
 800bde0:	b21b      	sxth	r3, r3
 800bde2:	4313      	orrs	r3, r2
 800bde4:	b21b      	sxth	r3, r3
 800bde6:	81fb      	strh	r3, [r7, #14]
    humid = 100.0f * ((float)val / 65535.0f);
 800bde8:	89fb      	ldrh	r3, [r7, #14]
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bdf2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800be1c <shtc3_calculate_humid+0x54>
 800bdf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bdfa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800be20 <shtc3_calculate_humid+0x58>
 800bdfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be02:	edc7 7a02 	vstr	s15, [r7, #8]

    return (humid);
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	ee07 3a90 	vmov	s15, r3
}
 800be0c:	eeb0 0a67 	vmov.f32	s0, s15
 800be10:	3714      	adds	r7, #20
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	477fff00 	.word	0x477fff00
 800be20:	42c80000 	.word	0x42c80000

0800be24 <shtc3_get_temp_humid>:

int shtc3_get_temp_humid(shtc3_driver_t *self_p, float *temp_p, float *humid_p)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
    uint8_t data[6];

    shtc3_sendcmd(self_p, CMD_NORMAL_CLKSTRETCH_TEMPFIRST);
 800be30:	f647 41a2 	movw	r1, #31906	; 0x7ca2
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff ff4b 	bl	800bcd0 <shtc3_sendcmd>

    // We use max duration to avoid having to handle retry.
    HAL_Delay(MEASUREMENT_DURATION_HIGH_MS);
 800be3a:	200f      	movs	r0, #15
 800be3c:	f000 f8b4 	bl	800bfa8 <HAL_Delay>

    shtc3_read2x16(self_p, data);
 800be40:	f107 0310 	add.w	r3, r7, #16
 800be44:	4619      	mov	r1, r3
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f7ff ff61 	bl	800bd0e <shtc3_read2x16>

    if (temp_p != 0) {
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <shtc3_get_temp_humid+0x44>
        *temp_p = shtc3_calculate_temp_c(data[0], data[1]);
 800be52:	7c3b      	ldrb	r3, [r7, #16]
 800be54:	7c7a      	ldrb	r2, [r7, #17]
 800be56:	4611      	mov	r1, r2
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff ff81 	bl	800bd60 <shtc3_calculate_temp_c>
 800be5e:	eef0 7a40 	vmov.f32	s15, s0
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	edc3 7a00 	vstr	s15, [r3]
    }
    if (humid_p != 0) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00a      	beq.n	800be84 <shtc3_get_temp_humid+0x60>
        *humid_p = shtc3_calculate_humid(data[3], data[4]);
 800be6e:	7cfb      	ldrb	r3, [r7, #19]
 800be70:	7d3a      	ldrb	r2, [r7, #20]
 800be72:	4611      	mov	r1, r2
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff ffa7 	bl	800bdc8 <shtc3_calculate_humid>
 800be7a:	eef0 7a40 	vmov.f32	s15, s0
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	edc3 7a00 	vstr	s15, [r3]
    }

    return (0);
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800be94:	4b08      	ldr	r3, [pc, #32]	; (800beb8 <HAL_Init+0x28>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a07      	ldr	r2, [pc, #28]	; (800beb8 <HAL_Init+0x28>)
 800be9a:	f043 0310 	orr.w	r3, r3, #16
 800be9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bea0:	2003      	movs	r0, #3
 800bea2:	f002 fcad 	bl	800e800 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bea6:	2000      	movs	r0, #0
 800bea8:	f000 f82e 	bl	800bf08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800beac:	f7fe fdaa 	bl	800aa04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	40022000 	.word	0x40022000

0800bebc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <HAL_DeInit+0x38>)
 800bec2:	f04f 32ff 	mov.w	r2, #4294967295
 800bec6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800bec8:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <HAL_DeInit+0x38>)
 800beca:	2200      	movs	r2, #0
 800becc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800bece:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <HAL_DeInit+0x38>)
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800bed6:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <HAL_DeInit+0x38>)
 800bed8:	2200      	movs	r2, #0
 800beda:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <HAL_DeInit+0x38>)
 800bede:	f04f 32ff 	mov.w	r2, #4294967295
 800bee2:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 800bee4:	4b03      	ldr	r3, [pc, #12]	; (800bef4 <HAL_DeInit+0x38>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800beea:	f000 f805 	bl	800bef8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	40021000 	.word	0x40021000

0800bef8 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800bef8:	b480      	push	{r7}
 800befa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
	...

0800bf08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bf10:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <HAL_InitTick+0x54>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	4b12      	ldr	r3, [pc, #72]	; (800bf60 <HAL_InitTick+0x58>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf22:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf26:	4618      	mov	r0, r3
 800bf28:	f002 fcad 	bl	800e886 <HAL_SYSTICK_Config>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e00e      	b.n	800bf54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b0f      	cmp	r3, #15
 800bf3a:	d80a      	bhi.n	800bf52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	f002 fc67 	bl	800e816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bf48:	4a06      	ldr	r2, [pc, #24]	; (800bf64 <HAL_InitTick+0x5c>)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e000      	b.n	800bf54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20000000 	.word	0x20000000
 800bf60:	20000008 	.word	0x20000008
 800bf64:	20000004 	.word	0x20000004

0800bf68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bf6c:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <HAL_IncTick+0x20>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	461a      	mov	r2, r3
 800bf72:	4b06      	ldr	r3, [pc, #24]	; (800bf8c <HAL_IncTick+0x24>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4413      	add	r3, r2
 800bf78:	4a04      	ldr	r2, [pc, #16]	; (800bf8c <HAL_IncTick+0x24>)
 800bf7a:	6013      	str	r3, [r2, #0]
}
 800bf7c:	bf00      	nop
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	20000008 	.word	0x20000008
 800bf8c:	20000674 	.word	0x20000674

0800bf90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bf90:	b480      	push	{r7}
 800bf92:	af00      	add	r7, sp, #0
  return uwTick;  
 800bf94:	4b03      	ldr	r3, [pc, #12]	; (800bfa4 <HAL_GetTick+0x14>)
 800bf96:	681b      	ldr	r3, [r3, #0]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	20000674 	.word	0x20000674

0800bfa8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bfb0:	f7ff ffee 	bl	800bf90 <HAL_GetTick>
 800bfb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc0:	d005      	beq.n	800bfce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bfc2:	4b09      	ldr	r3, [pc, #36]	; (800bfe8 <HAL_Delay+0x40>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800bfce:	bf00      	nop
 800bfd0:	f7ff ffde 	bl	800bf90 <HAL_GetTick>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d8f7      	bhi.n	800bfd0 <HAL_Delay+0x28>
  {
  }
}
 800bfe0:	bf00      	nop
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20000008 	.word	0x20000008

0800bfec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b09a      	sub	sp, #104	; 0x68
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800c022:	2300      	movs	r3, #0
 800c024:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e1e3      	b.n	800c3fc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	f003 0310 	and.w	r3, r3, #16
 800c042:	2b00      	cmp	r3, #0
 800c044:	d176      	bne.n	800c134 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d152      	bne.n	800c0f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2200      	movs	r2, #0
 800c058:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7fe fcef 	bl	800aa4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d13b      	bne.n	800c0f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 fad9 	bl	800d634 <ADC_Disable>
 800c082:	4603      	mov	r3, r0
 800c084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	d12f      	bne.n	800c0f4 <HAL_ADC_Init+0xe0>
 800c094:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d12b      	bne.n	800c0f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c0a4:	f023 0302 	bic.w	r3, r3, #2
 800c0a8:	f043 0202 	orr.w	r2, r3, #2
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689a      	ldr	r2, [r3, #8]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c0be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c0ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c0d0:	4b92      	ldr	r3, [pc, #584]	; (800c31c <HAL_ADC_Init+0x308>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a92      	ldr	r2, [pc, #584]	; (800c320 <HAL_ADC_Init+0x30c>)
 800c0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0da:	0c9a      	lsrs	r2, r3, #18
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c0e6:	e002      	b.n	800c0ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1f9      	bne.n	800c0e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800c10c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c110:	d110      	bne.n	800c134 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c116:	f023 0312 	bic.w	r3, r3, #18
 800c11a:	f043 0210 	orr.w	r2, r3, #16
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c126:	f043 0201 	orr.w	r2, r3, #1
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c138:	f003 0310 	and.w	r3, r3, #16
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f040 8150 	bne.w	800c3e2 <HAL_ADC_Init+0x3ce>
 800c142:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 814b 	bne.w	800c3e2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 8143 	bne.w	800c3e2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c160:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800c164:	f043 0202 	orr.w	r2, r3, #2
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c174:	d004      	beq.n	800c180 <HAL_ADC_Init+0x16c>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a6a      	ldr	r2, [pc, #424]	; (800c324 <HAL_ADC_Init+0x310>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d101      	bne.n	800c184 <HAL_ADC_Init+0x170>
 800c180:	4b69      	ldr	r3, [pc, #420]	; (800c328 <HAL_ADC_Init+0x314>)
 800c182:	e000      	b.n	800c186 <HAL_ADC_Init+0x172>
 800c184:	4b69      	ldr	r3, [pc, #420]	; (800c32c <HAL_ADC_Init+0x318>)
 800c186:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c190:	d102      	bne.n	800c198 <HAL_ADC_Init+0x184>
 800c192:	4b64      	ldr	r3, [pc, #400]	; (800c324 <HAL_ADC_Init+0x310>)
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	e01a      	b.n	800c1ce <HAL_ADC_Init+0x1ba>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a61      	ldr	r2, [pc, #388]	; (800c324 <HAL_ADC_Init+0x310>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d103      	bne.n	800c1aa <HAL_ADC_Init+0x196>
 800c1a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	e011      	b.n	800c1ce <HAL_ADC_Init+0x1ba>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a60      	ldr	r2, [pc, #384]	; (800c330 <HAL_ADC_Init+0x31c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d102      	bne.n	800c1ba <HAL_ADC_Init+0x1a6>
 800c1b4:	4b5f      	ldr	r3, [pc, #380]	; (800c334 <HAL_ADC_Init+0x320>)
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	e009      	b.n	800c1ce <HAL_ADC_Init+0x1ba>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a5d      	ldr	r2, [pc, #372]	; (800c334 <HAL_ADC_Init+0x320>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d102      	bne.n	800c1ca <HAL_ADC_Init+0x1b6>
 800c1c4:	4b5a      	ldr	r3, [pc, #360]	; (800c330 <HAL_ADC_Init+0x31c>)
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	e001      	b.n	800c1ce <HAL_ADC_Init+0x1ba>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f003 0303 	and.w	r3, r3, #3
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d108      	bne.n	800c1ee <HAL_ADC_Init+0x1da>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d101      	bne.n	800c1ee <HAL_ADC_Init+0x1da>
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e000      	b.n	800c1f0 <HAL_ADC_Init+0x1dc>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11c      	bne.n	800c22e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800c1f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d010      	beq.n	800c21c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	2b01      	cmp	r3, #1
 800c204:	d107      	bne.n	800c216 <HAL_ADC_Init+0x202>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <HAL_ADC_Init+0x202>
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <HAL_ADC_Init+0x204>
 800c216:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d108      	bne.n	800c22e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800c21c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	431a      	orrs	r2, r3
 800c22a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c22c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7e5b      	ldrb	r3, [r3, #25]
 800c232:	035b      	lsls	r3, r3, #13
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c238:	2a01      	cmp	r2, #1
 800c23a:	d002      	beq.n	800c242 <HAL_ADC_Init+0x22e>
 800c23c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c240:	e000      	b.n	800c244 <HAL_ADC_Init+0x230>
 800c242:	2200      	movs	r2, #0
 800c244:	431a      	orrs	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	4313      	orrs	r3, r2
 800c252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c254:	4313      	orrs	r3, r2
 800c256:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d11b      	bne.n	800c29a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	7e5b      	ldrb	r3, [r3, #25]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26e:	3b01      	subs	r3, #1
 800c270:	045a      	lsls	r2, r3, #17
 800c272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c274:	4313      	orrs	r3, r2
 800c276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c27a:	663b      	str	r3, [r7, #96]	; 0x60
 800c27c:	e00d      	b.n	800c29a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c282:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c286:	f043 0220 	orr.w	r2, r3, #32
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c292:	f043 0201 	orr.w	r2, r3, #1
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d054      	beq.n	800c34c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a22      	ldr	r2, [pc, #136]	; (800c330 <HAL_ADC_Init+0x31c>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d004      	beq.n	800c2b6 <HAL_ADC_Init+0x2a2>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a20      	ldr	r2, [pc, #128]	; (800c334 <HAL_ADC_Init+0x320>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d140      	bne.n	800c338 <HAL_ADC_Init+0x324>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800c2be:	d02a      	beq.n	800c316 <HAL_ADC_Init+0x302>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2c8:	d022      	beq.n	800c310 <HAL_ADC_Init+0x2fc>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ce:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800c2d2:	d01a      	beq.n	800c30a <HAL_ADC_Init+0x2f6>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800c2dc:	d012      	beq.n	800c304 <HAL_ADC_Init+0x2f0>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2e2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800c2e6:	d00a      	beq.n	800c2fe <HAL_ADC_Init+0x2ea>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ec:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800c2f0:	d002      	beq.n	800c2f8 <HAL_ADC_Init+0x2e4>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f6:	e023      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c2f8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c2fc:	e020      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c2fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800c302:	e01d      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c304:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c308:	e01a      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c30e:	e017      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c310:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800c314:	e014      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c316:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800c31a:	e011      	b.n	800c340 <HAL_ADC_Init+0x32c>
 800c31c:	20000000 	.word	0x20000000
 800c320:	431bde83 	.word	0x431bde83
 800c324:	50000100 	.word	0x50000100
 800c328:	50000300 	.word	0x50000300
 800c32c:	50000700 	.word	0x50000700
 800c330:	50000400 	.word	0x50000400
 800c334:	50000500 	.word	0x50000500
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c33c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c344:	4313      	orrs	r3, r2
 800c346:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c348:	4313      	orrs	r3, r2
 800c34a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f003 030c 	and.w	r3, r3, #12
 800c356:	2b00      	cmp	r3, #0
 800c358:	d114      	bne.n	800c384 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	6812      	ldr	r2, [r2, #0]
 800c364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c368:	f023 0302 	bic.w	r3, r3, #2
 800c36c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7e1b      	ldrb	r3, [r3, #24]
 800c372:	039a      	lsls	r2, r3, #14
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	4313      	orrs	r3, r2
 800c37e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c380:	4313      	orrs	r3, r2
 800c382:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <HAL_ADC_Init+0x3f0>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	6812      	ldr	r2, [r2, #0]
 800c392:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c394:	430b      	orrs	r3, r1
 800c396:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d10c      	bne.n	800c3ba <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a6:	f023 010f 	bic.w	r1, r3, #15
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	69db      	ldr	r3, [r3, #28]
 800c3ae:	1e5a      	subs	r2, r3, #1
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	430a      	orrs	r2, r1
 800c3b6:	631a      	str	r2, [r3, #48]	; 0x30
 800c3b8:	e007      	b.n	800c3ca <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 020f 	bic.w	r2, r2, #15
 800c3c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d4:	f023 0303 	bic.w	r3, r3, #3
 800c3d8:	f043 0201 	orr.w	r2, r3, #1
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	641a      	str	r2, [r3, #64]	; 0x40
 800c3e0:	e00a      	b.n	800c3f8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	f023 0312 	bic.w	r3, r3, #18
 800c3ea:	f043 0210 	orr.w	r2, r3, #16
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800c3f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3768      	adds	r7, #104	; 0x68
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	fff0c007 	.word	0xfff0c007

0800c408 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b098      	sub	sp, #96	; 0x60
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <HAL_ADC_DeInit+0x18>
  {
     return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e154      	b.n	800c6ca <HAL_ADC_DeInit+0x2c2>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	f043 0202 	orr.w	r2, r3, #2
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800c42c:	216c      	movs	r1, #108	; 0x6c
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f001 f960 	bl	800d6f4 <ADC_ConversionStop>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800c43a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d118      	bne.n	800c474 <HAL_ADC_DeInit+0x6c>
  {
    /* Flush register JSQR: queue sequencer reset when injected queue         */
    /* sequencer is enabled and ADC disabled.                                 */
    /* Enable injected queue sequencer after injected conversion stop         */
    SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800c450:	60da      	str	r2, [r3, #12]
    
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f001 f8ee 	bl	800d634 <ADC_Disable>
 800c458:	4603      	mov	r3, r0
 800c45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800c45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c462:	2b00      	cmp	r3, #0
 800c464:	d103      	bne.n	800c46e <HAL_ADC_DeInit+0x66>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	641a      	str	r2, [r3, #64]	; 0x40
 800c46c:	e002      	b.n	800c474 <HAL_ADC_DeInit+0x6c>
    }
    else
    {      
      tmp_hal_status = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 800c474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f040 8120 	bne.w	800c6be <HAL_ADC_DeInit+0x2b6>
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	6812      	ldr	r2, [r2, #0]
 800c488:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c48c:	f023 0307 	bic.w	r3, r3, #7
 800c490:	6053      	str	r3, [r2, #4]
                                ADC_IT_JEOS  | ADC_IT_JEOC |
                                ADC_IT_EOS   | ADC_IT_EOC  |
                                ADC_IT_EOSMP | ADC_IT_RDY                 ) );
    
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c49a:	601a      	str	r2, [r3, #0]
    /*       already done above.                                              */
    /* Note: Voltage regulator disable is intended for power saving.          */
    /* Sequence to disable voltage regulator:                                 */
    /* 1. Set the intermediate state before moving the ADC voltage regulator  */
    /*    to disable state.                                                   */
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0 | ADC_CR_ADCALDIF);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	689a      	ldr	r2, [r3, #8]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800c4aa:	609a      	str	r2, [r3, #8]
    /* 2. Set ADVREGEN bits to 0x10U */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_1);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689a      	ldr	r2, [r3, #8]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800c4ba:	609a      	str	r2, [r3, #8]
        
    /* Reset register CFGR */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |   
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68d9      	ldr	r1, [r3, #12]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b83      	ldr	r3, [pc, #524]	; (800c6d4 <HAL_ADC_DeInit+0x2cc>)
 800c4c8:	400b      	ands	r3, r1
 800c4ca:	60d3      	str	r3, [r2, #12]
                                    ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |     
                                    ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  | ADC_CFGR_ALIGN   |     
                                    ADC_CFGR_RES     | ADC_CFGR_DMACFG  | ADC_CFGR_DMAEN    );
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_SMP9 | ADC_SMPR1_SMP8 | ADC_SMPR1_SMP7 | 
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6959      	ldr	r1, [r3, #20]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	4b80      	ldr	r3, [pc, #512]	; (800c6d8 <HAL_ADC_DeInit+0x2d0>)
 800c4d8:	400b      	ands	r3, r1
 800c4da:	6153      	str	r3, [r2, #20]
                                     ADC_SMPR1_SMP6 | ADC_SMPR1_SMP5 | ADC_SMPR1_SMP4 | 
                                     ADC_SMPR1_SMP3 | ADC_SMPR1_SMP2 | ADC_SMPR1_SMP1  );
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 800c4ea:	619a      	str	r2, [r3, #24]
                                     ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 | 
                                     ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10  );
    
    /* Reset register TR1 */
    CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6a1a      	ldr	r2, [r3, #32]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800c4fa:	621a      	str	r2, [r3, #32]
    
    /* Reset register TR2 */
    CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800c50a:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Reset register TR3 */
    CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800c51a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	4b6d      	ldr	r3, [pc, #436]	; (800c6dc <HAL_ADC_DeInit+0x2d4>)
 800c528:	400b      	ands	r3, r1
 800c52a:	6313      	str	r3, [r2, #48]	; 0x30
                                    ADC_SQR1_SQ1 | ADC_SQR1_L);
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	4b6a      	ldr	r3, [pc, #424]	; (800c6e0 <HAL_ADC_DeInit+0x2d8>)
 800c538:	400b      	ands	r3, r1
 800c53a:	6353      	str	r3, [r2, #52]	; 0x34
                                    ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	4b66      	ldr	r3, [pc, #408]	; (800c6e0 <HAL_ADC_DeInit+0x2d8>)
 800c548:	400b      	ands	r3, r1
 800c54a:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
    
    /* Reset register SQR4 */
    CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	6812      	ldr	r2, [r2, #0]
 800c556:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 800c55a:	f023 0307 	bic.w	r3, r3, #7
 800c55e:	63d3      	str	r3, [r2, #60]	; 0x3c
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
      
    /* Reset register OFR1 */
    CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b5e      	ldr	r3, [pc, #376]	; (800c6e4 <HAL_ADC_DeInit+0x2dc>)
 800c56c:	400b      	ands	r3, r1
 800c56e:	6613      	str	r3, [r2, #96]	; 0x60
    /* Reset register OFR2 */
    CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b5a      	ldr	r3, [pc, #360]	; (800c6e4 <HAL_ADC_DeInit+0x2dc>)
 800c57c:	400b      	ands	r3, r1
 800c57e:	6653      	str	r3, [r2, #100]	; 0x64
    /* Reset register OFR3 */
    CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	4b56      	ldr	r3, [pc, #344]	; (800c6e4 <HAL_ADC_DeInit+0x2dc>)
 800c58c:	400b      	ands	r3, r1
 800c58e:	6693      	str	r3, [r2, #104]	; 0x68
    /* Reset register OFR4 */
    CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	4b52      	ldr	r3, [pc, #328]	; (800c6e4 <HAL_ADC_DeInit+0x2dc>)
 800c59c:	400b      	ands	r3, r1
 800c59e:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    /* Reset registers JDR1, JDR2, JDR3, JDR4 */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register AWD2CR */
    CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	4b4e      	ldr	r3, [pc, #312]	; (800c6e8 <HAL_ADC_DeInit+0x2e0>)
 800c5ae:	400b      	ands	r3, r1
 800c5b0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    
    /* Reset register AWD3CR */
    CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b49      	ldr	r3, [pc, #292]	; (800c6e8 <HAL_ADC_DeInit+0x2e0>)
 800c5c2:	400b      	ands	r3, r1
 800c5c4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    
    /* Reset register DIFSEL */
    CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	4b44      	ldr	r3, [pc, #272]	; (800c6e8 <HAL_ADC_DeInit+0x2e0>)
 800c5d6:	400b      	ands	r3, r1
 800c5d8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 800c5ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    /* ========== Reset common ADC registers ========== */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5f8:	d004      	beq.n	800c604 <HAL_ADC_DeInit+0x1fc>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a3b      	ldr	r2, [pc, #236]	; (800c6ec <HAL_ADC_DeInit+0x2e4>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d101      	bne.n	800c608 <HAL_ADC_DeInit+0x200>
 800c604:	4b3a      	ldr	r3, [pc, #232]	; (800c6f0 <HAL_ADC_DeInit+0x2e8>)
 800c606:	e000      	b.n	800c60a <HAL_ADC_DeInit+0x202>
 800c608:	4b3a      	ldr	r3, [pc, #232]	; (800c6f4 <HAL_ADC_DeInit+0x2ec>)
 800c60a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c614:	d102      	bne.n	800c61c <HAL_ADC_DeInit+0x214>
 800c616:	4b35      	ldr	r3, [pc, #212]	; (800c6ec <HAL_ADC_DeInit+0x2e4>)
 800c618:	60bb      	str	r3, [r7, #8]
 800c61a:	e01a      	b.n	800c652 <HAL_ADC_DeInit+0x24a>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a32      	ldr	r2, [pc, #200]	; (800c6ec <HAL_ADC_DeInit+0x2e4>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d103      	bne.n	800c62e <HAL_ADC_DeInit+0x226>
 800c626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800c62a:	60bb      	str	r3, [r7, #8]
 800c62c:	e011      	b.n	800c652 <HAL_ADC_DeInit+0x24a>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a31      	ldr	r2, [pc, #196]	; (800c6f8 <HAL_ADC_DeInit+0x2f0>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d102      	bne.n	800c63e <HAL_ADC_DeInit+0x236>
 800c638:	4b30      	ldr	r3, [pc, #192]	; (800c6fc <HAL_ADC_DeInit+0x2f4>)
 800c63a:	60bb      	str	r3, [r7, #8]
 800c63c:	e009      	b.n	800c652 <HAL_ADC_DeInit+0x24a>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a2e      	ldr	r2, [pc, #184]	; (800c6fc <HAL_ADC_DeInit+0x2f4>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d102      	bne.n	800c64e <HAL_ADC_DeInit+0x246>
 800c648:	4b2b      	ldr	r3, [pc, #172]	; (800c6f8 <HAL_ADC_DeInit+0x2f0>)
 800c64a:	60bb      	str	r3, [r7, #8]
 800c64c:	e001      	b.n	800c652 <HAL_ADC_DeInit+0x24a>
 800c64e:	2300      	movs	r3, #0
 800c650:	60bb      	str	r3, [r7, #8]
    
    /* Software is allowed to change common parameters only when all ADCs of  */
    /* the common group are disabled.                                         */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	f003 0303 	and.w	r3, r3, #3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d108      	bne.n	800c672 <HAL_ADC_DeInit+0x26a>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d101      	bne.n	800c672 <HAL_ADC_DeInit+0x26a>
 800c66e:	2301      	movs	r3, #1
 800c670:	e000      	b.n	800c674 <HAL_ADC_DeInit+0x26c>
 800c672:	2300      	movs	r3, #0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d119      	bne.n	800c6ac <HAL_ADC_DeInit+0x2a4>
        ( (tmphadcSharingSameCommonRegister.Instance == NULL) ||
 800c678:	68bb      	ldr	r3, [r7, #8]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                  &&
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d010      	beq.n	800c6a0 <HAL_ADC_DeInit+0x298>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET) )   )
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	2b01      	cmp	r3, #1
 800c688:	d107      	bne.n	800c69a <HAL_ADC_DeInit+0x292>
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 0301 	and.w	r3, r3, #1
 800c692:	2b01      	cmp	r3, #1
 800c694:	d101      	bne.n	800c69a <HAL_ADC_DeInit+0x292>
 800c696:	2301      	movs	r3, #1
 800c698:	e000      	b.n	800c69c <HAL_ADC_DeInit+0x294>
 800c69a:	2300      	movs	r3, #0
        ( (tmphadcSharingSameCommonRegister.Instance == NULL) ||
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d105      	bne.n	800c6ac <HAL_ADC_DeInit+0x2a4>
        - multimode related parameters: MDMA, DMACFG, DELAY, MULTI (set into
          HAL_ADCEx_MultiModeConfigChannel() )
        - internal measurement paths: Vbat, temperature sensor, Vref (set into
          HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
      */
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_CKMODE |
 800c6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	4b16      	ldr	r3, [pc, #88]	; (800c700 <HAL_ADC_DeInit+0x2f8>)
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6aa:	6093      	str	r3, [r2, #8]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7fe fa4f 	bl	800ab50 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  
  /* Return function status */
  return tmp_hal_status;
 800c6c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3760      	adds	r7, #96	; 0x60
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	80008004 	.word	0x80008004
 800c6d8:	c0000007 	.word	0xc0000007
 800c6dc:	e0820830 	.word	0xe0820830
 800c6e0:	e0820820 	.word	0xe0820820
 800c6e4:	03fff000 	.word	0x03fff000
 800c6e8:	fff80001 	.word	0xfff80001
 800c6ec:	50000100 	.word	0x50000100
 800c6f0:	50000300 	.word	0x50000300
 800c6f4:	50000700 	.word	0x50000700
 800c6f8:	50000400 	.word	0x50000400
 800c6fc:	50000500 	.word	0x50000500
 800c700:	fe3c10e0 	.word	0xfe3c10e0

0800c704 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	f003 0304 	and.w	r3, r3, #4
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f040 8123 	bne.w	800c966 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <HAL_ADC_Start_IT+0x2a>
 800c72a:	2302      	movs	r3, #2
 800c72c:	e11e      	b.n	800c96c <HAL_ADC_Start_IT+0x268>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 ff1e 	bl	800d578 <ADC_Enable>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f040 810a 	bne.w	800c95c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c750:	f023 0301 	bic.w	r3, r3, #1
 800c754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c764:	d004      	beq.n	800c770 <HAL_ADC_Start_IT+0x6c>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a82      	ldr	r2, [pc, #520]	; (800c974 <HAL_ADC_Start_IT+0x270>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d106      	bne.n	800c77e <HAL_ADC_Start_IT+0x7a>
 800c770:	4b81      	ldr	r3, [pc, #516]	; (800c978 <HAL_ADC_Start_IT+0x274>)
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	f003 031f 	and.w	r3, r3, #31
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d010      	beq.n	800c79e <HAL_ADC_Start_IT+0x9a>
 800c77c:	e005      	b.n	800c78a <HAL_ADC_Start_IT+0x86>
 800c77e:	4b7f      	ldr	r3, [pc, #508]	; (800c97c <HAL_ADC_Start_IT+0x278>)
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f003 031f 	and.w	r3, r3, #31
 800c786:	2b00      	cmp	r3, #0
 800c788:	d009      	beq.n	800c79e <HAL_ADC_Start_IT+0x9a>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c792:	d004      	beq.n	800c79e <HAL_ADC_Start_IT+0x9a>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a79      	ldr	r2, [pc, #484]	; (800c980 <HAL_ADC_Start_IT+0x27c>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d115      	bne.n	800c7ca <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d036      	beq.n	800c826 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c7c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800c7c8:	e02d      	b.n	800c826 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7de:	d004      	beq.n	800c7ea <HAL_ADC_Start_IT+0xe6>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a63      	ldr	r2, [pc, #396]	; (800c974 <HAL_ADC_Start_IT+0x270>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d10a      	bne.n	800c800 <HAL_ADC_Start_IT+0xfc>
 800c7ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bf14      	ite	ne
 800c7f8:	2301      	movne	r3, #1
 800c7fa:	2300      	moveq	r3, #0
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	e008      	b.n	800c812 <HAL_ADC_Start_IT+0x10e>
 800c800:	4b5f      	ldr	r3, [pc, #380]	; (800c980 <HAL_ADC_Start_IT+0x27c>)
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	bf14      	ite	ne
 800c80c:	2301      	movne	r3, #1
 800c80e:	2300      	moveq	r3, #0
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d007      	beq.n	800c826 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c81e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c832:	d106      	bne.n	800c842 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c838:	f023 0206 	bic.w	r2, r3, #6
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	645a      	str	r2, [r3, #68]	; 0x44
 800c840:	e002      	b.n	800c848 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	221c      	movs	r2, #28
 800c856:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	2b08      	cmp	r3, #8
 800c85e:	d110      	bne.n	800c882 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f022 0204 	bic.w	r2, r2, #4
 800c86e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f042 0208 	orr.w	r2, r2, #8
 800c87e:	605a      	str	r2, [r3, #4]
          break;
 800c880:	e008      	b.n	800c894 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	685a      	ldr	r2, [r3, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f042 020c 	orr.w	r2, r2, #12
 800c890:	605a      	str	r2, [r3, #4]
          break;
 800c892:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d107      	bne.n	800c8ac <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f022 0210 	bic.w	r2, r2, #16
 800c8aa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8b4:	d004      	beq.n	800c8c0 <HAL_ADC_Start_IT+0x1bc>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a2e      	ldr	r2, [pc, #184]	; (800c974 <HAL_ADC_Start_IT+0x270>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d106      	bne.n	800c8ce <HAL_ADC_Start_IT+0x1ca>
 800c8c0:	4b2d      	ldr	r3, [pc, #180]	; (800c978 <HAL_ADC_Start_IT+0x274>)
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f003 031f 	and.w	r3, r3, #31
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d03e      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c8cc:	e005      	b.n	800c8da <HAL_ADC_Start_IT+0x1d6>
 800c8ce:	4b2b      	ldr	r3, [pc, #172]	; (800c97c <HAL_ADC_Start_IT+0x278>)
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f003 031f 	and.w	r3, r3, #31
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d037      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8e2:	d004      	beq.n	800c8ee <HAL_ADC_Start_IT+0x1ea>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a22      	ldr	r2, [pc, #136]	; (800c974 <HAL_ADC_Start_IT+0x270>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d106      	bne.n	800c8fc <HAL_ADC_Start_IT+0x1f8>
 800c8ee:	4b22      	ldr	r3, [pc, #136]	; (800c978 <HAL_ADC_Start_IT+0x274>)
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	f003 031f 	and.w	r3, r3, #31
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	d027      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c8fa:	e005      	b.n	800c908 <HAL_ADC_Start_IT+0x204>
 800c8fc:	4b1f      	ldr	r3, [pc, #124]	; (800c97c <HAL_ADC_Start_IT+0x278>)
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	f003 031f 	and.w	r3, r3, #31
 800c904:	2b05      	cmp	r3, #5
 800c906:	d020      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c910:	d004      	beq.n	800c91c <HAL_ADC_Start_IT+0x218>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a17      	ldr	r2, [pc, #92]	; (800c974 <HAL_ADC_Start_IT+0x270>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d106      	bne.n	800c92a <HAL_ADC_Start_IT+0x226>
 800c91c:	4b16      	ldr	r3, [pc, #88]	; (800c978 <HAL_ADC_Start_IT+0x274>)
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f003 031f 	and.w	r3, r3, #31
 800c924:	2b09      	cmp	r3, #9
 800c926:	d010      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c928:	e005      	b.n	800c936 <HAL_ADC_Start_IT+0x232>
 800c92a:	4b14      	ldr	r3, [pc, #80]	; (800c97c <HAL_ADC_Start_IT+0x278>)
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	f003 031f 	and.w	r3, r3, #31
 800c932:	2b09      	cmp	r3, #9
 800c934:	d009      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c93e:	d004      	beq.n	800c94a <HAL_ADC_Start_IT+0x246>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a0e      	ldr	r2, [pc, #56]	; (800c980 <HAL_ADC_Start_IT+0x27c>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d10f      	bne.n	800c96a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	689a      	ldr	r2, [r3, #8]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0204 	orr.w	r2, r2, #4
 800c958:	609a      	str	r2, [r3, #8]
 800c95a:	e006      	b.n	800c96a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c964:	e001      	b.n	800c96a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c966:	2302      	movs	r3, #2
 800c968:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800c96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	50000100 	.word	0x50000100
 800c978:	50000300 	.word	0x50000300
 800c97c:	50000700 	.word	0x50000700
 800c980:	50000400 	.word	0x50000400

0800c984 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c996:	2b01      	cmp	r3, #1
 800c998:	d101      	bne.n	800c99e <HAL_ADC_Stop_IT+0x1a>
 800c99a:	2302      	movs	r3, #2
 800c99c:	e02b      	b.n	800c9f6 <HAL_ADC_Stop_IT+0x72>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800c9a6:	216c      	movs	r1, #108	; 0x6c
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fea3 	bl	800d6f4 <ADC_ConversionStop>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d119      	bne.n	800c9ec <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 021c 	bic.w	r2, r2, #28
 800c9c6:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fe33 	bl	800d634 <ADC_Disable>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d109      	bne.n	800c9ec <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c9e0:	f023 0301 	bic.w	r3, r3, #1
 800c9e4:	f043 0201 	orr.w	r2, r3, #1
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f003 0304 	and.w	r3, r3, #4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f040 80f7 	bne.w	800cc0e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d101      	bne.n	800ca2e <HAL_ADC_Start_DMA+0x2e>
 800ca2a:	2302      	movs	r3, #2
 800ca2c:	e0f2      	b.n	800cc14 <HAL_ADC_Start_DMA+0x214>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca3e:	d004      	beq.n	800ca4a <HAL_ADC_Start_DMA+0x4a>
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a75      	ldr	r2, [pc, #468]	; (800cc1c <HAL_ADC_Start_DMA+0x21c>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d109      	bne.n	800ca5e <HAL_ADC_Start_DMA+0x5e>
 800ca4a:	4b75      	ldr	r3, [pc, #468]	; (800cc20 <HAL_ADC_Start_DMA+0x220>)
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	f003 031f 	and.w	r3, r3, #31
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bf0c      	ite	eq
 800ca56:	2301      	moveq	r3, #1
 800ca58:	2300      	movne	r3, #0
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	e008      	b.n	800ca70 <HAL_ADC_Start_DMA+0x70>
 800ca5e:	4b71      	ldr	r3, [pc, #452]	; (800cc24 <HAL_ADC_Start_DMA+0x224>)
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	f003 031f 	and.w	r3, r3, #31
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bf0c      	ite	eq
 800ca6a:	2301      	moveq	r3, #1
 800ca6c:	2300      	movne	r3, #0
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 80c5 	beq.w	800cc00 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 fd7e 	bl	800d578 <ADC_Enable>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f040 80b7 	bne.w	800cbf6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ca90:	f023 0301 	bic.w	r3, r3, #1
 800ca94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800caa4:	d004      	beq.n	800cab0 <HAL_ADC_Start_DMA+0xb0>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a5c      	ldr	r2, [pc, #368]	; (800cc1c <HAL_ADC_Start_DMA+0x21c>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d106      	bne.n	800cabe <HAL_ADC_Start_DMA+0xbe>
 800cab0:	4b5b      	ldr	r3, [pc, #364]	; (800cc20 <HAL_ADC_Start_DMA+0x220>)
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f003 031f 	and.w	r3, r3, #31
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d010      	beq.n	800cade <HAL_ADC_Start_DMA+0xde>
 800cabc:	e005      	b.n	800caca <HAL_ADC_Start_DMA+0xca>
 800cabe:	4b59      	ldr	r3, [pc, #356]	; (800cc24 <HAL_ADC_Start_DMA+0x224>)
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	f003 031f 	and.w	r3, r3, #31
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d009      	beq.n	800cade <HAL_ADC_Start_DMA+0xde>
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cad2:	d004      	beq.n	800cade <HAL_ADC_Start_DMA+0xde>
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a53      	ldr	r2, [pc, #332]	; (800cc28 <HAL_ADC_Start_DMA+0x228>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d115      	bne.n	800cb0a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d036      	beq.n	800cb66 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cb00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800cb08:	e02d      	b.n	800cb66 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb1e:	d004      	beq.n	800cb2a <HAL_ADC_Start_DMA+0x12a>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a3d      	ldr	r2, [pc, #244]	; (800cc1c <HAL_ADC_Start_DMA+0x21c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d10a      	bne.n	800cb40 <HAL_ADC_Start_DMA+0x140>
 800cb2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	bf14      	ite	ne
 800cb38:	2301      	movne	r3, #1
 800cb3a:	2300      	moveq	r3, #0
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	e008      	b.n	800cb52 <HAL_ADC_Start_DMA+0x152>
 800cb40:	4b39      	ldr	r3, [pc, #228]	; (800cc28 <HAL_ADC_Start_DMA+0x228>)
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	bf14      	ite	ne
 800cb4c:	2301      	movne	r3, #1
 800cb4e:	2300      	moveq	r3, #0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d007      	beq.n	800cb66 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cb5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cb6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb72:	d106      	bne.n	800cb82 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb78:	f023 0206 	bic.w	r2, r3, #6
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	645a      	str	r2, [r3, #68]	; 0x44
 800cb80:	e002      	b.n	800cb88 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb94:	4a25      	ldr	r2, [pc, #148]	; (800cc2c <HAL_ADC_Start_DMA+0x22c>)
 800cb96:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9c:	4a24      	ldr	r2, [pc, #144]	; (800cc30 <HAL_ADC_Start_DMA+0x230>)
 800cb9e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba4:	4a23      	ldr	r2, [pc, #140]	; (800cc34 <HAL_ADC_Start_DMA+0x234>)
 800cba6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	221c      	movs	r2, #28
 800cbae:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f042 0210 	orr.w	r2, r2, #16
 800cbbe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f042 0201 	orr.w	r2, r2, #1
 800cbce:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3340      	adds	r3, #64	; 0x40
 800cbda:	4619      	mov	r1, r3
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f001 feec 	bl	800e9bc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	689a      	ldr	r2, [r3, #8]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0204 	orr.w	r2, r2, #4
 800cbf2:	609a      	str	r2, [r3, #8]
 800cbf4:	e00d      	b.n	800cc12 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cbfe:	e008      	b.n	800cc12 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cc0c:	e001      	b.n	800cc12 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800cc0e:	2302      	movs	r3, #2
 800cc10:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	50000100 	.word	0x50000100
 800cc20:	50000300 	.word	0x50000300
 800cc24:	50000700 	.word	0x50000700
 800cc28:	50000400 	.word	0x50000400
 800cc2c:	0800d4ad 	.word	0x0800d4ad
 800cc30:	0800d527 	.word	0x0800d527
 800cc34:	0800d543 	.word	0x0800d543

0800cc38 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d101      	bne.n	800cc52 <HAL_ADC_Stop_DMA+0x1a>
 800cc4e:	2302      	movs	r3, #2
 800cc50:	e04a      	b.n	800cce8 <HAL_ADC_Stop_DMA+0xb0>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800cc5a:	216c      	movs	r1, #108	; 0x6c
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fd49 	bl	800d6f4 <ADC_ConversionStop>
 800cc62:	4603      	mov	r3, r0
 800cc64:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d138      	bne.n	800ccde <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68da      	ldr	r2, [r3, #12]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f022 0201 	bic.w	r2, r2, #1
 800cc7a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 fefa 	bl	800ea7a <HAL_DMA_Abort>
 800cc86:	4603      	mov	r3, r0
 800cc88:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d005      	beq.n	800cc9c <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f022 0210 	bic.w	r2, r2, #16
 800ccaa:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d105      	bne.n	800ccbe <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fcbe 	bl	800d634 <ADC_Disable>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]
 800ccbc:	e002      	b.n	800ccc4 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fcb8 	bl	800d634 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d109      	bne.n	800ccde <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ccd2:	f023 0301 	bic.w	r3, r3, #1
 800ccd6:	f043 0201 	orr.w	r2, r3, #1
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b09b      	sub	sp, #108	; 0x6c
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d101      	bne.n	800cd12 <HAL_ADC_ConfigChannel+0x22>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	e2cb      	b.n	800d2aa <HAL_ADC_ConfigChannel+0x5ba>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	f003 0304 	and.w	r3, r3, #4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f040 82af 	bne.w	800d288 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	d81c      	bhi.n	800cd6c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	4413      	add	r3, r2
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	461a      	mov	r2, r3
 800cd46:	231f      	movs	r3, #31
 800cd48:	4093      	lsls	r3, r2
 800cd4a:	43db      	mvns	r3, r3
 800cd4c:	4019      	ands	r1, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	6818      	ldr	r0, [r3, #0]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	4613      	mov	r3, r2
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4413      	add	r3, r2
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	fa00 f203 	lsl.w	r2, r0, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	631a      	str	r2, [r3, #48]	; 0x30
 800cd6a:	e063      	b.n	800ce34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	2b09      	cmp	r3, #9
 800cd72:	d81e      	bhi.n	800cdb2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	4413      	add	r3, r2
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	3b1e      	subs	r3, #30
 800cd88:	221f      	movs	r2, #31
 800cd8a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd8e:	43db      	mvns	r3, r3
 800cd90:	4019      	ands	r1, r3
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	4413      	add	r3, r2
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	3b1e      	subs	r3, #30
 800cda4:	fa00 f203 	lsl.w	r2, r0, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	430a      	orrs	r2, r1
 800cdae:	635a      	str	r2, [r3, #52]	; 0x34
 800cdb0:	e040      	b.n	800ce34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	2b0e      	cmp	r3, #14
 800cdb8:	d81e      	bhi.n	800cdf8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	4413      	add	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	3b3c      	subs	r3, #60	; 0x3c
 800cdce:	221f      	movs	r2, #31
 800cdd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd4:	43db      	mvns	r3, r3
 800cdd6:	4019      	ands	r1, r3
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	6818      	ldr	r0, [r3, #0]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	685a      	ldr	r2, [r3, #4]
 800cde0:	4613      	mov	r3, r2
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	4413      	add	r3, r2
 800cde6:	005b      	lsls	r3, r3, #1
 800cde8:	3b3c      	subs	r3, #60	; 0x3c
 800cdea:	fa00 f203 	lsl.w	r2, r0, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	639a      	str	r2, [r3, #56]	; 0x38
 800cdf6:	e01d      	b.n	800ce34 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	3b5a      	subs	r3, #90	; 0x5a
 800ce0c:	221f      	movs	r2, #31
 800ce0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce12:	43db      	mvns	r3, r3
 800ce14:	4019      	ands	r1, r3
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	005b      	lsls	r3, r3, #1
 800ce22:	4413      	add	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	3b5a      	subs	r3, #90	; 0x5a
 800ce28:	fa00 f203 	lsl.w	r2, r0, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	f003 030c 	and.w	r3, r3, #12
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f040 80e5 	bne.w	800d00e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b09      	cmp	r3, #9
 800ce4a:	d91c      	bls.n	800ce86 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6999      	ldr	r1, [r3, #24]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	4613      	mov	r3, r2
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	3b1e      	subs	r3, #30
 800ce5e:	2207      	movs	r2, #7
 800ce60:	fa02 f303 	lsl.w	r3, r2, r3
 800ce64:	43db      	mvns	r3, r3
 800ce66:	4019      	ands	r1, r3
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	6898      	ldr	r0, [r3, #8]
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	4613      	mov	r3, r2
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	4413      	add	r3, r2
 800ce76:	3b1e      	subs	r3, #30
 800ce78:	fa00 f203 	lsl.w	r2, r0, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	430a      	orrs	r2, r1
 800ce82:	619a      	str	r2, [r3, #24]
 800ce84:	e019      	b.n	800ceba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6959      	ldr	r1, [r3, #20]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	4613      	mov	r3, r2
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	4413      	add	r3, r2
 800ce96:	2207      	movs	r2, #7
 800ce98:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9c:	43db      	mvns	r3, r3
 800ce9e:	4019      	ands	r1, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	6898      	ldr	r0, [r3, #8]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	4413      	add	r3, r2
 800ceae:	fa00 f203 	lsl.w	r2, r0, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	695a      	ldr	r2, [r3, #20]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	08db      	lsrs	r3, r3, #3
 800cec6:	f003 0303 	and.w	r3, r3, #3
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	fa02 f303 	lsl.w	r3, r2, r3
 800ced0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	3b01      	subs	r3, #1
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d84f      	bhi.n	800cf7c <HAL_ADC_ConfigChannel+0x28c>
 800cedc:	a201      	add	r2, pc, #4	; (adr r2, 800cee4 <HAL_ADC_ConfigChannel+0x1f4>)
 800cede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee2:	bf00      	nop
 800cee4:	0800cef5 	.word	0x0800cef5
 800cee8:	0800cf17 	.word	0x0800cf17
 800ceec:	0800cf39 	.word	0x0800cf39
 800cef0:	0800cf5b 	.word	0x0800cf5b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cefa:	4b9f      	ldr	r3, [pc, #636]	; (800d178 <HAL_ADC_ConfigChannel+0x488>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	6812      	ldr	r2, [r2, #0]
 800cf02:	0691      	lsls	r1, r2, #26
 800cf04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf06:	430a      	orrs	r2, r1
 800cf08:	431a      	orrs	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cf12:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800cf14:	e07e      	b.n	800d014 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800cf1c:	4b96      	ldr	r3, [pc, #600]	; (800d178 <HAL_ADC_ConfigChannel+0x488>)
 800cf1e:	4013      	ands	r3, r2
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	6812      	ldr	r2, [r2, #0]
 800cf24:	0691      	lsls	r1, r2, #26
 800cf26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cf34:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800cf36:	e06d      	b.n	800d014 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cf3e:	4b8e      	ldr	r3, [pc, #568]	; (800d178 <HAL_ADC_ConfigChannel+0x488>)
 800cf40:	4013      	ands	r3, r2
 800cf42:	683a      	ldr	r2, [r7, #0]
 800cf44:	6812      	ldr	r2, [r2, #0]
 800cf46:	0691      	lsls	r1, r2, #26
 800cf48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf4a:	430a      	orrs	r2, r1
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cf56:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800cf58:	e05c      	b.n	800d014 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf60:	4b85      	ldr	r3, [pc, #532]	; (800d178 <HAL_ADC_ConfigChannel+0x488>)
 800cf62:	4013      	ands	r3, r2
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	6812      	ldr	r2, [r2, #0]
 800cf68:	0691      	lsls	r1, r2, #26
 800cf6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	431a      	orrs	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800cf78:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800cf7a:	e04b      	b.n	800d014 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	069b      	lsls	r3, r3, #26
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d107      	bne.n	800cfa0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800cf9e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	069b      	lsls	r3, r3, #26
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d107      	bne.n	800cfc4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800cfc2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	069b      	lsls	r3, r3, #26
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d107      	bne.n	800cfe8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800cfe6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	069b      	lsls	r3, r3, #26
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d10a      	bne.n	800d012 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d00a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800d00c:	e001      	b.n	800d012 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800d00e:	bf00      	nop
 800d010:	e000      	b.n	800d014 <HAL_ADC_ConfigChannel+0x324>
      break;
 800d012:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	f003 0303 	and.w	r3, r3, #3
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d108      	bne.n	800d034 <HAL_ADC_ConfigChannel+0x344>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d101      	bne.n	800d034 <HAL_ADC_ConfigChannel+0x344>
 800d030:	2301      	movs	r3, #1
 800d032:	e000      	b.n	800d036 <HAL_ADC_ConfigChannel+0x346>
 800d034:	2300      	movs	r3, #0
 800d036:	2b00      	cmp	r3, #0
 800d038:	f040 8131 	bne.w	800d29e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d00f      	beq.n	800d064 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2201      	movs	r2, #1
 800d052:	fa02 f303 	lsl.w	r3, r2, r3
 800d056:	43da      	mvns	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	400a      	ands	r2, r1
 800d05e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800d062:	e049      	b.n	800d0f8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2201      	movs	r2, #1
 800d072:	409a      	lsls	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	430a      	orrs	r2, r1
 800d07a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b09      	cmp	r3, #9
 800d084:	d91c      	bls.n	800d0c0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6999      	ldr	r1, [r3, #24]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	4613      	mov	r3, r2
 800d092:	005b      	lsls	r3, r3, #1
 800d094:	4413      	add	r3, r2
 800d096:	3b1b      	subs	r3, #27
 800d098:	2207      	movs	r2, #7
 800d09a:	fa02 f303 	lsl.w	r3, r2, r3
 800d09e:	43db      	mvns	r3, r3
 800d0a0:	4019      	ands	r1, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	6898      	ldr	r0, [r3, #8]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	005b      	lsls	r3, r3, #1
 800d0ae:	4413      	add	r3, r2
 800d0b0:	3b1b      	subs	r3, #27
 800d0b2:	fa00 f203 	lsl.w	r2, r0, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	430a      	orrs	r2, r1
 800d0bc:	619a      	str	r2, [r3, #24]
 800d0be:	e01b      	b.n	800d0f8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6959      	ldr	r1, [r3, #20]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	2207      	movs	r2, #7
 800d0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d8:	43db      	mvns	r3, r3
 800d0da:	4019      	ands	r1, r3
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	6898      	ldr	r0, [r3, #8]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	1c5a      	adds	r2, r3, #1
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	005b      	lsls	r3, r3, #1
 800d0ea:	4413      	add	r3, r2
 800d0ec:	fa00 f203 	lsl.w	r2, r0, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	430a      	orrs	r2, r1
 800d0f6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d100:	d004      	beq.n	800d10c <HAL_ADC_ConfigChannel+0x41c>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a1d      	ldr	r2, [pc, #116]	; (800d17c <HAL_ADC_ConfigChannel+0x48c>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d101      	bne.n	800d110 <HAL_ADC_ConfigChannel+0x420>
 800d10c:	4b1c      	ldr	r3, [pc, #112]	; (800d180 <HAL_ADC_ConfigChannel+0x490>)
 800d10e:	e000      	b.n	800d112 <HAL_ADC_ConfigChannel+0x422>
 800d110:	4b1c      	ldr	r3, [pc, #112]	; (800d184 <HAL_ADC_ConfigChannel+0x494>)
 800d112:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b10      	cmp	r3, #16
 800d11a:	d105      	bne.n	800d128 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800d11c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d124:	2b00      	cmp	r3, #0
 800d126:	d015      	beq.n	800d154 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800d12c:	2b11      	cmp	r3, #17
 800d12e:	d105      	bne.n	800d13c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800d130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00b      	beq.n	800d154 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800d140:	2b12      	cmp	r3, #18
 800d142:	f040 80ac 	bne.w	800d29e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800d146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 80a5 	bne.w	800d29e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d15c:	d102      	bne.n	800d164 <HAL_ADC_ConfigChannel+0x474>
 800d15e:	4b07      	ldr	r3, [pc, #28]	; (800d17c <HAL_ADC_ConfigChannel+0x48c>)
 800d160:	60fb      	str	r3, [r7, #12]
 800d162:	e023      	b.n	800d1ac <HAL_ADC_ConfigChannel+0x4bc>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a04      	ldr	r2, [pc, #16]	; (800d17c <HAL_ADC_ConfigChannel+0x48c>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d10c      	bne.n	800d188 <HAL_ADC_ConfigChannel+0x498>
 800d16e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	e01a      	b.n	800d1ac <HAL_ADC_ConfigChannel+0x4bc>
 800d176:	bf00      	nop
 800d178:	83fff000 	.word	0x83fff000
 800d17c:	50000100 	.word	0x50000100
 800d180:	50000300 	.word	0x50000300
 800d184:	50000700 	.word	0x50000700
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a4a      	ldr	r2, [pc, #296]	; (800d2b8 <HAL_ADC_ConfigChannel+0x5c8>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d102      	bne.n	800d198 <HAL_ADC_ConfigChannel+0x4a8>
 800d192:	4b4a      	ldr	r3, [pc, #296]	; (800d2bc <HAL_ADC_ConfigChannel+0x5cc>)
 800d194:	60fb      	str	r3, [r7, #12]
 800d196:	e009      	b.n	800d1ac <HAL_ADC_ConfigChannel+0x4bc>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a47      	ldr	r2, [pc, #284]	; (800d2bc <HAL_ADC_ConfigChannel+0x5cc>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d102      	bne.n	800d1a8 <HAL_ADC_ConfigChannel+0x4b8>
 800d1a2:	4b45      	ldr	r3, [pc, #276]	; (800d2b8 <HAL_ADC_ConfigChannel+0x5c8>)
 800d1a4:	60fb      	str	r3, [r7, #12]
 800d1a6:	e001      	b.n	800d1ac <HAL_ADC_ConfigChannel+0x4bc>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d108      	bne.n	800d1cc <HAL_ADC_ConfigChannel+0x4dc>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d101      	bne.n	800d1cc <HAL_ADC_ConfigChannel+0x4dc>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e000      	b.n	800d1ce <HAL_ADC_ConfigChannel+0x4de>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d150      	bne.n	800d274 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800d1d2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d010      	beq.n	800d1fa <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	f003 0303 	and.w	r3, r3, #3
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d107      	bne.n	800d1f4 <HAL_ADC_ConfigChannel+0x504>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d101      	bne.n	800d1f4 <HAL_ADC_ConfigChannel+0x504>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e000      	b.n	800d1f6 <HAL_ADC_ConfigChannel+0x506>
 800d1f4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d13c      	bne.n	800d274 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b10      	cmp	r3, #16
 800d200:	d11d      	bne.n	800d23e <HAL_ADC_ConfigChannel+0x54e>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d20a:	d118      	bne.n	800d23e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800d20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800d214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d216:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800d218:	4b29      	ldr	r3, [pc, #164]	; (800d2c0 <HAL_ADC_ConfigChannel+0x5d0>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a29      	ldr	r2, [pc, #164]	; (800d2c4 <HAL_ADC_ConfigChannel+0x5d4>)
 800d21e:	fba2 2303 	umull	r2, r3, r2, r3
 800d222:	0c9a      	lsrs	r2, r3, #18
 800d224:	4613      	mov	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800d22e:	e002      	b.n	800d236 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	3b01      	subs	r3, #1
 800d234:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1f9      	bne.n	800d230 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800d23c:	e02e      	b.n	800d29c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b11      	cmp	r3, #17
 800d244:	d10b      	bne.n	800d25e <HAL_ADC_ConfigChannel+0x56e>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d24e:	d106      	bne.n	800d25e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800d250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800d258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d25a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800d25c:	e01e      	b.n	800d29c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b12      	cmp	r3, #18
 800d264:	d11a      	bne.n	800d29c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800d266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800d26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d270:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800d272:	e013      	b.n	800d29c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	f043 0220 	orr.w	r2, r3, #32
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d286:	e00a      	b.n	800d29e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28c:	f043 0220 	orr.w	r2, r3, #32
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d29a:	e000      	b.n	800d29e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800d29c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800d2a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	376c      	adds	r7, #108	; 0x6c
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	50000400 	.word	0x50000400
 800d2bc:	50000500 	.word	0x50000500
 800d2c0:	20000000 	.word	0x20000000
 800d2c4:	431bde83 	.word	0x431bde83

0800d2c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b099      	sub	sp, #100	; 0x64
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2e0:	d102      	bne.n	800d2e8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800d2e2:	4b6d      	ldr	r3, [pc, #436]	; (800d498 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800d2e4:	60bb      	str	r3, [r7, #8]
 800d2e6:	e01a      	b.n	800d31e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a6a      	ldr	r2, [pc, #424]	; (800d498 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d103      	bne.n	800d2fa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800d2f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800d2f6:	60bb      	str	r3, [r7, #8]
 800d2f8:	e011      	b.n	800d31e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a67      	ldr	r2, [pc, #412]	; (800d49c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d102      	bne.n	800d30a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800d304:	4b66      	ldr	r3, [pc, #408]	; (800d4a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800d306:	60bb      	str	r3, [r7, #8]
 800d308:	e009      	b.n	800d31e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a64      	ldr	r2, [pc, #400]	; (800d4a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d102      	bne.n	800d31a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800d314:	4b61      	ldr	r3, [pc, #388]	; (800d49c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800d316:	60bb      	str	r3, [r7, #8]
 800d318:	e001      	b.n	800d31e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800d31a:	2300      	movs	r3, #0
 800d31c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	e0b0      	b.n	800d48a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d101      	bne.n	800d336 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800d332:	2302      	movs	r3, #2
 800d334:	e0a9      	b.n	800d48a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	f003 0304 	and.w	r3, r3, #4
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f040 808d 	bne.w	800d468 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f003 0304 	and.w	r3, r3, #4
 800d356:	2b00      	cmp	r3, #0
 800d358:	f040 8086 	bne.w	800d468 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d364:	d004      	beq.n	800d370 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a4b      	ldr	r2, [pc, #300]	; (800d498 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d101      	bne.n	800d374 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800d370:	4b4c      	ldr	r3, [pc, #304]	; (800d4a4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800d372:	e000      	b.n	800d376 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800d374:	4b4c      	ldr	r3, [pc, #304]	; (800d4a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800d376:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d040      	beq.n	800d402 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800d380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	6859      	ldr	r1, [r3, #4]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d392:	035b      	lsls	r3, r3, #13
 800d394:	430b      	orrs	r3, r1
 800d396:	431a      	orrs	r2, r3
 800d398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d39a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	f003 0303 	and.w	r3, r3, #3
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d108      	bne.n	800d3bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d101      	bne.n	800d3bc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e000      	b.n	800d3be <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d15c      	bne.n	800d47c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	f003 0303 	and.w	r3, r3, #3
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d107      	bne.n	800d3de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d101      	bne.n	800d3de <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800d3de:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d14b      	bne.n	800d47c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800d3e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d3ec:	f023 030f 	bic.w	r3, r3, #15
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	6811      	ldr	r1, [r2, #0]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	6892      	ldr	r2, [r2, #8]
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	431a      	orrs	r2, r3
 800d3fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3fe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800d400:	e03c      	b.n	800d47c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800d402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d40a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d40c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	f003 0303 	and.w	r3, r3, #3
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d108      	bne.n	800d42e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b01      	cmp	r3, #1
 800d428:	d101      	bne.n	800d42e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800d42e:	2300      	movs	r3, #0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d123      	bne.n	800d47c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	f003 0303 	and.w	r3, r3, #3
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d107      	bne.n	800d450 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f003 0301 	and.w	r3, r3, #1
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d101      	bne.n	800d450 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800d44c:	2301      	movs	r3, #1
 800d44e:	e000      	b.n	800d452 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800d450:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800d452:	2b00      	cmp	r3, #0
 800d454:	d112      	bne.n	800d47c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800d456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d45e:	f023 030f 	bic.w	r3, r3, #15
 800d462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d464:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800d466:	e009      	b.n	800d47c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	f043 0220 	orr.w	r2, r3, #32
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d47a:	e000      	b.n	800d47e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800d47c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800d486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800d48a:	4618      	mov	r0, r3
 800d48c:	3764      	adds	r7, #100	; 0x64
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	50000100 	.word	0x50000100
 800d49c:	50000400 	.word	0x50000400
 800d4a0:	50000500 	.word	0x50000500
 800d4a4:	50000300 	.word	0x50000300
 800d4a8:	50000700 	.word	0x50000700

0800d4ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d126      	bne.n	800d514 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d115      	bne.n	800d50c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d111      	bne.n	800d50c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d105      	bne.n	800d50c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d504:	f043 0201 	orr.w	r2, r3, #1
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7fc f9d5 	bl	80098bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800d512:	e004      	b.n	800d51e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	4798      	blx	r3
}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f7fe fd59 	bl	800bfec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800d53a:	bf00      	nop
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d560:	f043 0204 	orr.w	r2, r3, #4
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7fe fd49 	bl	800c000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d56e:	bf00      	nop
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
	...

0800d578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d580:	2300      	movs	r3, #0
 800d582:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d108      	bne.n	800d5a4 <ADC_Enable+0x2c>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <ADC_Enable+0x2c>
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e000      	b.n	800d5a6 <ADC_Enable+0x2e>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d13c      	bne.n	800d624 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	4b1f      	ldr	r3, [pc, #124]	; (800d630 <ADC_Enable+0xb8>)
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00d      	beq.n	800d5d4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5bc:	f043 0210 	orr.w	r2, r3, #16
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c8:	f043 0201 	orr.w	r2, r3, #1
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e028      	b.n	800d626 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	689a      	ldr	r2, [r3, #8]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f042 0201 	orr.w	r2, r2, #1
 800d5e2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800d5e4:	f7fe fcd4 	bl	800bf90 <HAL_GetTick>
 800d5e8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d5ea:	e014      	b.n	800d616 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d5ec:	f7fe fcd0 	bl	800bf90 <HAL_GetTick>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d90d      	bls.n	800d616 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fe:	f043 0210 	orr.w	r2, r3, #16
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d60a:	f043 0201 	orr.w	r2, r3, #1
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	e007      	b.n	800d626 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b01      	cmp	r3, #1
 800d622:	d1e3      	bne.n	800d5ec <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	8000003f 	.word	0x8000003f

0800d634 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d63c:	2300      	movs	r3, #0
 800d63e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	f003 0303 	and.w	r3, r3, #3
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d108      	bne.n	800d660 <ADC_Disable+0x2c>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f003 0301 	and.w	r3, r3, #1
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d101      	bne.n	800d660 <ADC_Disable+0x2c>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e000      	b.n	800d662 <ADC_Disable+0x2e>
 800d660:	2300      	movs	r3, #0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d040      	beq.n	800d6e8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f003 030d 	and.w	r3, r3, #13
 800d670:	2b01      	cmp	r3, #1
 800d672:	d10f      	bne.n	800d694 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	689a      	ldr	r2, [r3, #8]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f042 0202 	orr.w	r2, r2, #2
 800d682:	609a      	str	r2, [r3, #8]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2203      	movs	r2, #3
 800d68a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800d68c:	f7fe fc80 	bl	800bf90 <HAL_GetTick>
 800d690:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800d692:	e022      	b.n	800d6da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d698:	f043 0210 	orr.w	r2, r3, #16
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6a4:	f043 0201 	orr.w	r2, r3, #1
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e01c      	b.n	800d6ea <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800d6b0:	f7fe fc6e 	bl	800bf90 <HAL_GetTick>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d90d      	bls.n	800d6da <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c2:	f043 0210 	orr.w	r2, r3, #16
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ce:	f043 0201 	orr.w	r2, r3, #1
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e007      	b.n	800d6ea <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d0e3      	beq.n	800d6b0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800d6fe:	2300      	movs	r3, #0
 800d700:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800d702:	2300      	movs	r3, #0
 800d704:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800d706:	2300      	movs	r3, #0
 800d708:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	f003 030c 	and.w	r3, r3, #12
 800d714:	2b00      	cmp	r3, #0
 800d716:	f000 8093 	beq.w	800d840 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68db      	ldr	r3, [r3, #12]
 800d720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d728:	d12a      	bne.n	800d780 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800d72e:	2b01      	cmp	r3, #1
 800d730:	d126      	bne.n	800d780 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800d736:	2b01      	cmp	r3, #1
 800d738:	d122      	bne.n	800d780 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800d73a:	230c      	movs	r3, #12
 800d73c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800d73e:	e014      	b.n	800d76a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	4a42      	ldr	r2, [pc, #264]	; (800d84c <ADC_ConversionStop+0x158>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d90d      	bls.n	800d764 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74c:	f043 0210 	orr.w	r2, r3, #16
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d758:	f043 0201 	orr.w	r2, r3, #1
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e06e      	b.n	800d842 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	3301      	adds	r3, #1
 800d768:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d774:	2b40      	cmp	r3, #64	; 0x40
 800d776:	d1e3      	bne.n	800d740 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2240      	movs	r2, #64	; 0x40
 800d77e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2b60      	cmp	r3, #96	; 0x60
 800d784:	d015      	beq.n	800d7b2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b04      	cmp	r3, #4
 800d792:	d10e      	bne.n	800d7b2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d107      	bne.n	800d7b2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	689a      	ldr	r2, [r3, #8]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f042 0210 	orr.w	r2, r2, #16
 800d7b0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b0c      	cmp	r3, #12
 800d7b6:	d015      	beq.n	800d7e4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	f003 0308 	and.w	r3, r3, #8
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d10e      	bne.n	800d7e4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d107      	bne.n	800d7e4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	689a      	ldr	r2, [r3, #8]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f042 0220 	orr.w	r2, r2, #32
 800d7e2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b60      	cmp	r3, #96	; 0x60
 800d7e8:	d004      	beq.n	800d7f4 <ADC_ConversionStop+0x100>
 800d7ea:	2b6c      	cmp	r3, #108	; 0x6c
 800d7ec:	d105      	bne.n	800d7fa <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800d7ee:	230c      	movs	r3, #12
 800d7f0:	617b      	str	r3, [r7, #20]
        break;
 800d7f2:	e005      	b.n	800d800 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800d7f4:	2308      	movs	r3, #8
 800d7f6:	617b      	str	r3, [r7, #20]
        break;
 800d7f8:	e002      	b.n	800d800 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800d7fa:	2304      	movs	r3, #4
 800d7fc:	617b      	str	r3, [r7, #20]
        break;
 800d7fe:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800d800:	f7fe fbc6 	bl	800bf90 <HAL_GetTick>
 800d804:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800d806:	e014      	b.n	800d832 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800d808:	f7fe fbc2 	bl	800bf90 <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	2b0b      	cmp	r3, #11
 800d814:	d90d      	bls.n	800d832 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d81a:	f043 0210 	orr.w	r2, r3, #16
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d826:	f043 0201 	orr.w	r2, r3, #1
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	e007      	b.n	800d842 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	689a      	ldr	r2, [r3, #8]
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	4013      	ands	r3, r2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1e3      	bne.n	800d808 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3718      	adds	r7, #24
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	000993ff 	.word	0x000993ff

0800d850 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e0ed      	b.n	800da3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d102      	bne.n	800d874 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7fd f994 	bl	800ab9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f022 0202 	bic.w	r2, r2, #2
 800d882:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d884:	f7fe fb84 	bl	800bf90 <HAL_GetTick>
 800d888:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800d88a:	e012      	b.n	800d8b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d88c:	f7fe fb80 	bl	800bf90 <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	2b0a      	cmp	r3, #10
 800d898:	d90b      	bls.n	800d8b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2205      	movs	r2, #5
 800d8aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e0c5      	b.n	800da3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	f003 0302 	and.w	r3, r3, #2
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e5      	bne.n	800d88c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f042 0201 	orr.w	r2, r2, #1
 800d8ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d8d0:	f7fe fb5e 	bl	800bf90 <HAL_GetTick>
 800d8d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d8d6:	e012      	b.n	800d8fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d8d8:	f7fe fb5a 	bl	800bf90 <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	2b0a      	cmp	r3, #10
 800d8e4:	d90b      	bls.n	800d8fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2205      	movs	r2, #5
 800d8f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e09f      	b.n	800da3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d0e5      	beq.n	800d8d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	7e1b      	ldrb	r3, [r3, #24]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d108      	bne.n	800d926 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	e007      	b.n	800d936 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d934:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7e5b      	ldrb	r3, [r3, #25]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d108      	bne.n	800d950 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	e007      	b.n	800d960 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d95e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7e9b      	ldrb	r3, [r3, #26]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d108      	bne.n	800d97a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f042 0220 	orr.w	r2, r2, #32
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	e007      	b.n	800d98a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f022 0220 	bic.w	r2, r2, #32
 800d988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7edb      	ldrb	r3, [r3, #27]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d108      	bne.n	800d9a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f022 0210 	bic.w	r2, r2, #16
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	e007      	b.n	800d9b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f042 0210 	orr.w	r2, r2, #16
 800d9b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	7f1b      	ldrb	r3, [r3, #28]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d108      	bne.n	800d9ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f042 0208 	orr.w	r2, r2, #8
 800d9ca:	601a      	str	r2, [r3, #0]
 800d9cc:	e007      	b.n	800d9de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f022 0208 	bic.w	r2, r2, #8
 800d9dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7f5b      	ldrb	r3, [r3, #29]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d108      	bne.n	800d9f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f042 0204 	orr.w	r2, r2, #4
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	e007      	b.n	800da08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f022 0204 	bic.w	r2, r2, #4
 800da06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	431a      	orrs	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	691b      	ldr	r3, [r3, #16]
 800da16:	431a      	orrs	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	ea42 0103 	orr.w	r1, r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	1e5a      	subs	r2, r3, #1
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	430a      	orrs	r2, r1
 800da2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b082      	sub	sp, #8
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e015      	b.n	800da84 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 f925 	bl	800dca8 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7fd f8e8 	bl	800ac34 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da72:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b087      	sub	sp, #28
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daa2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800daa4:	7cfb      	ldrb	r3, [r7, #19]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d003      	beq.n	800dab2 <HAL_CAN_ConfigFilter+0x26>
 800daaa:	7cfb      	ldrb	r3, [r7, #19]
 800daac:	2b02      	cmp	r3, #2
 800daae:	f040 80aa 	bne.w	800dc06 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dab8:	f043 0201 	orr.w	r2, r3, #1
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	f003 031f 	and.w	r3, r3, #31
 800daca:	2201      	movs	r2, #1
 800dacc:	fa02 f303 	lsl.w	r3, r2, r3
 800dad0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	43db      	mvns	r3, r3
 800dadc:	401a      	ands	r2, r3
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d123      	bne.n	800db34 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	43db      	mvns	r3, r3
 800daf6:	401a      	ands	r2, r3
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800db0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	3248      	adds	r2, #72	; 0x48
 800db14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800db28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800db2a:	6979      	ldr	r1, [r7, #20]
 800db2c:	3348      	adds	r3, #72	; 0x48
 800db2e:	00db      	lsls	r3, r3, #3
 800db30:	440b      	add	r3, r1
 800db32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d122      	bne.n	800db82 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	431a      	orrs	r2, r3
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800db58:	683a      	ldr	r2, [r7, #0]
 800db5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800db5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	3248      	adds	r2, #72	; 0x48
 800db62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800db76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800db78:	6979      	ldr	r1, [r7, #20]
 800db7a:	3348      	adds	r3, #72	; 0x48
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	440b      	add	r3, r1
 800db80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	699b      	ldr	r3, [r3, #24]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d109      	bne.n	800db9e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	43db      	mvns	r3, r3
 800db94:	401a      	ands	r2, r3
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800db9c:	e007      	b.n	800dbae <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	431a      	orrs	r2, r3
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	691b      	ldr	r3, [r3, #16]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d109      	bne.n	800dbca <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	43db      	mvns	r3, r3
 800dbc0:	401a      	ands	r2, r3
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800dbc8:	e007      	b.n	800dbda <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d107      	bne.n	800dbf2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	431a      	orrs	r2, r3
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800dbf8:	f023 0201 	bic.w	r2, r3, #1
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	e006      	b.n	800dc14 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
  }
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	371c      	adds	r7, #28
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d12e      	bne.n	800dc92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2202      	movs	r2, #2
 800dc38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f022 0201 	bic.w	r2, r2, #1
 800dc4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dc4c:	f7fe f9a0 	bl	800bf90 <HAL_GetTick>
 800dc50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800dc52:	e012      	b.n	800dc7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800dc54:	f7fe f99c 	bl	800bf90 <HAL_GetTick>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	2b0a      	cmp	r3, #10
 800dc60:	d90b      	bls.n	800dc7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2205      	movs	r2, #5
 800dc72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e012      	b.n	800dca0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d1e5      	bne.n	800dc54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	e006      	b.n	800dca0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
  }
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d133      	bne.n	800dd24 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f042 0201 	orr.w	r2, r2, #1
 800dcca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dccc:	f7fe f960 	bl	800bf90 <HAL_GetTick>
 800dcd0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800dcd2:	e012      	b.n	800dcfa <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800dcd4:	f7fe f95c 	bl	800bf90 <HAL_GetTick>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	2b0a      	cmp	r3, #10
 800dce0:	d90b      	bls.n	800dcfa <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2205      	movs	r2, #5
 800dcf2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e01b      	b.n	800dd32 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f003 0301 	and.w	r3, r3, #1
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d0e5      	beq.n	800dcd4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f022 0202 	bic.w	r2, r2, #2
 800dd16:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	e006      	b.n	800dd32 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
  }
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b089      	sub	sp, #36	; 0x24
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
 800dd46:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800dd58:	7ffb      	ldrb	r3, [r7, #31]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d003      	beq.n	800dd66 <HAL_CAN_AddTxMessage+0x2c>
 800dd5e:	7ffb      	ldrb	r3, [r7, #31]
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	f040 80b8 	bne.w	800ded6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10a      	bne.n	800dd86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 80a0 	beq.w	800dec6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	0e1b      	lsrs	r3, r3, #24
 800dd8a:	f003 0303 	and.w	r3, r3, #3
 800dd8e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d907      	bls.n	800dda6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e09e      	b.n	800dee4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800dda6:	2201      	movs	r2, #1
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	409a      	lsls	r2, r3
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10d      	bne.n	800ddd4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ddc2:	68f9      	ldr	r1, [r7, #12]
 800ddc4:	6809      	ldr	r1, [r1, #0]
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	3318      	adds	r3, #24
 800ddcc:	011b      	lsls	r3, r3, #4
 800ddce:	440b      	add	r3, r1
 800ddd0:	601a      	str	r2, [r3, #0]
 800ddd2:	e00f      	b.n	800ddf4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ddde:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800dde4:	68f9      	ldr	r1, [r7, #12]
 800dde6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800dde8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	3318      	adds	r3, #24
 800ddee:	011b      	lsls	r3, r3, #4
 800ddf0:	440b      	add	r3, r1
 800ddf2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6819      	ldr	r1, [r3, #0]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	691a      	ldr	r2, [r3, #16]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	3318      	adds	r3, #24
 800de00:	011b      	lsls	r3, r3, #4
 800de02:	440b      	add	r3, r1
 800de04:	3304      	adds	r3, #4
 800de06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	7d1b      	ldrb	r3, [r3, #20]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d111      	bne.n	800de34 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3318      	adds	r3, #24
 800de18:	011b      	lsls	r3, r3, #4
 800de1a:	4413      	add	r3, r2
 800de1c:	3304      	adds	r3, #4
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	6811      	ldr	r1, [r2, #0]
 800de24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	3318      	adds	r3, #24
 800de2c:	011b      	lsls	r3, r3, #4
 800de2e:	440b      	add	r3, r1
 800de30:	3304      	adds	r3, #4
 800de32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3307      	adds	r3, #7
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	061a      	lsls	r2, r3, #24
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3306      	adds	r3, #6
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	041b      	lsls	r3, r3, #16
 800de44:	431a      	orrs	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	3305      	adds	r3, #5
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	021b      	lsls	r3, r3, #8
 800de4e:	4313      	orrs	r3, r2
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	3204      	adds	r2, #4
 800de54:	7812      	ldrb	r2, [r2, #0]
 800de56:	4610      	mov	r0, r2
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	6811      	ldr	r1, [r2, #0]
 800de5c:	ea43 0200 	orr.w	r2, r3, r0
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	011b      	lsls	r3, r3, #4
 800de64:	440b      	add	r3, r1
 800de66:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800de6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	3303      	adds	r3, #3
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	061a      	lsls	r2, r3, #24
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3302      	adds	r3, #2
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	041b      	lsls	r3, r3, #16
 800de7c:	431a      	orrs	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3301      	adds	r3, #1
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	021b      	lsls	r3, r3, #8
 800de86:	4313      	orrs	r3, r2
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	7812      	ldrb	r2, [r2, #0]
 800de8c:	4610      	mov	r0, r2
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	6811      	ldr	r1, [r2, #0]
 800de92:	ea43 0200 	orr.w	r2, r3, r0
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	011b      	lsls	r3, r3, #4
 800de9a:	440b      	add	r3, r1
 800de9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800dea0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	3318      	adds	r3, #24
 800deaa:	011b      	lsls	r3, r3, #4
 800deac:	4413      	add	r3, r2
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	6811      	ldr	r1, [r2, #0]
 800deb4:	f043 0201 	orr.w	r2, r3, #1
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	3318      	adds	r3, #24
 800debc:	011b      	lsls	r3, r3, #4
 800debe:	440b      	add	r3, r1
 800dec0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800dec2:	2300      	movs	r3, #0
 800dec4:	e00e      	b.n	800dee4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e006      	b.n	800dee4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
  }
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3724      	adds	r7, #36	; 0x24
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800def8:	2300      	movs	r3, #0
 800defa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df02:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800df04:	7afb      	ldrb	r3, [r7, #11]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d002      	beq.n	800df10 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800df0a:	7afb      	ldrb	r3, [r7, #11]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d11d      	bne.n	800df4c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3301      	adds	r3, #1
 800df22:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	3301      	adds	r3, #1
 800df36:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	3301      	adds	r3, #1
 800df4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800df4c:	68fb      	ldr	r3, [r7, #12]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800df5a:	b480      	push	{r7}
 800df5c:	b087      	sub	sp, #28
 800df5e:	af00      	add	r7, sp, #0
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	60b9      	str	r1, [r7, #8]
 800df64:	607a      	str	r2, [r7, #4]
 800df66:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df6e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800df70:	7dfb      	ldrb	r3, [r7, #23]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d003      	beq.n	800df7e <HAL_CAN_GetRxMessage+0x24>
 800df76:	7dfb      	ldrb	r3, [r7, #23]
 800df78:	2b02      	cmp	r3, #2
 800df7a:	f040 80f3 	bne.w	800e164 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d10e      	bne.n	800dfa2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f003 0303 	and.w	r3, r3, #3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d116      	bne.n	800dfc0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e0e7      	b.n	800e172 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	f003 0303 	and.w	r3, r3, #3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d107      	bne.n	800dfc0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e0d8      	b.n	800e172 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	331b      	adds	r3, #27
 800dfc8:	011b      	lsls	r3, r3, #4
 800dfca:	4413      	add	r3, r2
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f003 0204 	and.w	r2, r3, #4
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10c      	bne.n	800dff8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	331b      	adds	r3, #27
 800dfe6:	011b      	lsls	r3, r3, #4
 800dfe8:	4413      	add	r3, r2
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	0d5b      	lsrs	r3, r3, #21
 800dfee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	601a      	str	r2, [r3, #0]
 800dff6:	e00b      	b.n	800e010 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	331b      	adds	r3, #27
 800e000:	011b      	lsls	r3, r3, #4
 800e002:	4413      	add	r3, r2
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	08db      	lsrs	r3, r3, #3
 800e008:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	331b      	adds	r3, #27
 800e018:	011b      	lsls	r3, r3, #4
 800e01a:	4413      	add	r3, r2
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f003 0202 	and.w	r2, r3, #2
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	331b      	adds	r3, #27
 800e02e:	011b      	lsls	r3, r3, #4
 800e030:	4413      	add	r3, r2
 800e032:	3304      	adds	r3, #4
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 020f 	and.w	r2, r3, #15
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	331b      	adds	r3, #27
 800e046:	011b      	lsls	r3, r3, #4
 800e048:	4413      	add	r3, r2
 800e04a:	3304      	adds	r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	0a1b      	lsrs	r3, r3, #8
 800e050:	b2da      	uxtb	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	331b      	adds	r3, #27
 800e05e:	011b      	lsls	r3, r3, #4
 800e060:	4413      	add	r3, r2
 800e062:	3304      	adds	r3, #4
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	0c1b      	lsrs	r3, r3, #16
 800e068:	b29a      	uxth	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	011b      	lsls	r3, r3, #4
 800e076:	4413      	add	r3, r2
 800e078:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	b2da      	uxtb	r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	4413      	add	r3, r2
 800e08e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	0a1a      	lsrs	r2, r3, #8
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	b2d2      	uxtb	r2, r2
 800e09c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	011b      	lsls	r3, r3, #4
 800e0a6:	4413      	add	r3, r2
 800e0a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	0c1a      	lsrs	r2, r3, #16
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	3302      	adds	r3, #2
 800e0b4:	b2d2      	uxtb	r2, r2
 800e0b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	011b      	lsls	r3, r3, #4
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	0e1a      	lsrs	r2, r3, #24
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	3303      	adds	r3, #3
 800e0ce:	b2d2      	uxtb	r2, r2
 800e0d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	011b      	lsls	r3, r3, #4
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	b2d2      	uxtb	r2, r2
 800e0e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	011b      	lsls	r3, r3, #4
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	0a1a      	lsrs	r2, r3, #8
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	3305      	adds	r3, #5
 800e100:	b2d2      	uxtb	r2, r2
 800e102:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	011b      	lsls	r3, r3, #4
 800e10c:	4413      	add	r3, r2
 800e10e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	0c1a      	lsrs	r2, r3, #16
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	3306      	adds	r3, #6
 800e11a:	b2d2      	uxtb	r2, r2
 800e11c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	011b      	lsls	r3, r3, #4
 800e126:	4413      	add	r3, r2
 800e128:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	0e1a      	lsrs	r2, r3, #24
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	3307      	adds	r3, #7
 800e134:	b2d2      	uxtb	r2, r2
 800e136:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d108      	bne.n	800e150 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68da      	ldr	r2, [r3, #12]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f042 0220 	orr.w	r2, r2, #32
 800e14c:	60da      	str	r2, [r3, #12]
 800e14e:	e007      	b.n	800e160 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	691a      	ldr	r2, [r3, #16]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f042 0220 	orr.w	r2, r2, #32
 800e15e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	e006      	b.n	800e172 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
  }
}
 800e172:	4618      	mov	r0, r3
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800e17e:	b480      	push	{r7}
 800e180:	b085      	sub	sp, #20
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
 800e186:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e18e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d002      	beq.n	800e19c <HAL_CAN_ActivateNotification+0x1e>
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d109      	bne.n	800e1b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	6959      	ldr	r1, [r3, #20]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e006      	b.n	800e1be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
  }
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3714      	adds	r7, #20
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b08a      	sub	sp, #40	; 0x28
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	699b      	ldr	r3, [r3, #24]
 800e204:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800e206:	6a3b      	ldr	r3, [r7, #32]
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d07c      	beq.n	800e30a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	f003 0301 	and.w	r3, r3, #1
 800e216:	2b00      	cmp	r3, #0
 800e218:	d023      	beq.n	800e262 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2201      	movs	r2, #1
 800e220:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	f003 0302 	and.w	r3, r3, #2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d003      	beq.n	800e234 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f97d 	bl	800e52c <HAL_CAN_TxMailbox0CompleteCallback>
 800e232:	e016      	b.n	800e262 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	f003 0304 	and.w	r3, r3, #4
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e244:	627b      	str	r3, [r7, #36]	; 0x24
 800e246:	e00c      	b.n	800e262 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	f003 0308 	and.w	r3, r3, #8
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d004      	beq.n	800e25c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e258:	627b      	str	r3, [r7, #36]	; 0x24
 800e25a:	e002      	b.n	800e262 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f983 	bl	800e568 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d024      	beq.n	800e2b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e274:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d003      	beq.n	800e288 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f95d 	bl	800e540 <HAL_CAN_TxMailbox1CompleteCallback>
 800e286:	e016      	b.n	800e2b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d004      	beq.n	800e29c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e298:	627b      	str	r3, [r7, #36]	; 0x24
 800e29a:	e00c      	b.n	800e2b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d004      	beq.n	800e2b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ae:	e002      	b.n	800e2b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f963 	bl	800e57c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d024      	beq.n	800e30a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e2c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d003      	beq.n	800e2dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f93d 	bl	800e554 <HAL_CAN_TxMailbox2CompleteCallback>
 800e2da:	e016      	b.n	800e30a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d004      	beq.n	800e2f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ee:	e00c      	b.n	800e30a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d004      	beq.n	800e304 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
 800e302:	e002      	b.n	800e30a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f943 	bl	800e590 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	f003 0308 	and.w	r3, r3, #8
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00c      	beq.n	800e32e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	f003 0310 	and.w	r3, r3, #16
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d007      	beq.n	800e32e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2210      	movs	r2, #16
 800e32c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	f003 0304 	and.w	r3, r3, #4
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00b      	beq.n	800e350 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	f003 0308 	and.w	r3, r3, #8
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d006      	beq.n	800e350 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2208      	movs	r2, #8
 800e348:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f92a 	bl	800e5a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800e350:	6a3b      	ldr	r3, [r7, #32]
 800e352:	f003 0302 	and.w	r3, r3, #2
 800e356:	2b00      	cmp	r3, #0
 800e358:	d009      	beq.n	800e36e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f003 0303 	and.w	r3, r3, #3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7fb fdd5 	bl	8009f18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00c      	beq.n	800e392 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	f003 0310 	and.w	r3, r3, #16
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d007      	beq.n	800e392 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800e382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2210      	movs	r2, #16
 800e390:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	f003 0320 	and.w	r3, r3, #32
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	f003 0308 	and.w	r3, r3, #8
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d006      	beq.n	800e3b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2208      	movs	r2, #8
 800e3ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 f90c 	bl	800e5cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	f003 0310 	and.w	r3, r3, #16
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d009      	beq.n	800e3d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	f003 0303 	and.w	r3, r3, #3
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f8f3 	bl	800e5b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	f003 0310 	and.w	r3, r3, #16
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d006      	beq.n	800e3f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2210      	movs	r2, #16
 800e3ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f8f6 	bl	800e5e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800e3f4:	6a3b      	ldr	r3, [r7, #32]
 800e3f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00b      	beq.n	800e416 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	f003 0308 	and.w	r3, r3, #8
 800e404:	2b00      	cmp	r3, #0
 800e406:	d006      	beq.n	800e416 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2208      	movs	r2, #8
 800e40e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f8ef 	bl	800e5f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d075      	beq.n	800e50c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	f003 0304 	and.w	r3, r3, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	d06c      	beq.n	800e504 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e430:	2b00      	cmp	r3, #0
 800e432:	d008      	beq.n	800e446 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	f043 0301 	orr.w	r3, r3, #1
 800e444:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d008      	beq.n	800e462 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e456:	2b00      	cmp	r3, #0
 800e458:	d003      	beq.n	800e462 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	f043 0302 	orr.w	r3, r3, #2
 800e460:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e462:	6a3b      	ldr	r3, [r7, #32]
 800e464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d008      	beq.n	800e47e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e472:	2b00      	cmp	r3, #0
 800e474:	d003      	beq.n	800e47e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800e476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e478:	f043 0304 	orr.w	r3, r3, #4
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e484:	2b00      	cmp	r3, #0
 800e486:	d03d      	beq.n	800e504 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d038      	beq.n	800e504 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e498:	2b30      	cmp	r3, #48	; 0x30
 800e49a:	d017      	beq.n	800e4cc <HAL_CAN_IRQHandler+0x302>
 800e49c:	2b30      	cmp	r3, #48	; 0x30
 800e49e:	d804      	bhi.n	800e4aa <HAL_CAN_IRQHandler+0x2e0>
 800e4a0:	2b10      	cmp	r3, #16
 800e4a2:	d009      	beq.n	800e4b8 <HAL_CAN_IRQHandler+0x2ee>
 800e4a4:	2b20      	cmp	r3, #32
 800e4a6:	d00c      	beq.n	800e4c2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800e4a8:	e024      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800e4aa:	2b50      	cmp	r3, #80	; 0x50
 800e4ac:	d018      	beq.n	800e4e0 <HAL_CAN_IRQHandler+0x316>
 800e4ae:	2b60      	cmp	r3, #96	; 0x60
 800e4b0:	d01b      	beq.n	800e4ea <HAL_CAN_IRQHandler+0x320>
 800e4b2:	2b40      	cmp	r3, #64	; 0x40
 800e4b4:	d00f      	beq.n	800e4d6 <HAL_CAN_IRQHandler+0x30c>
            break;
 800e4b6:	e01d      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	f043 0308 	orr.w	r3, r3, #8
 800e4be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e4c0:	e018      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	f043 0310 	orr.w	r3, r3, #16
 800e4c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e4ca:	e013      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	f043 0320 	orr.w	r3, r3, #32
 800e4d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e4d4:	e00e      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e4de:	e009      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e4e8:	e004      	b.n	800e4f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e4f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	699a      	ldr	r2, [r3, #24]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800e502:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2204      	movs	r2, #4
 800e50a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d008      	beq.n	800e524 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e518:	431a      	orrs	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f872 	bl	800e608 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800e524:	bf00      	nop
 800e526:	3728      	adds	r7, #40	; 0x28
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800e534:	bf00      	nop
 800e536:	370c      	adds	r7, #12
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800e570:	bf00      	nop
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800e584:	bf00      	nop
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800e5ac:	bf00      	nop
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr

0800e5b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800e5c0:	bf00      	nop
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b083      	sub	sp, #12
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800e5d4:	bf00      	nop
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b083      	sub	sp, #12
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800e5e8:	bf00      	nop
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <__NVIC_SetPriorityGrouping>:
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f003 0307 	and.w	r3, r3, #7
 800e62a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e62c:	4b0c      	ldr	r3, [pc, #48]	; (800e660 <__NVIC_SetPriorityGrouping+0x44>)
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e638:	4013      	ands	r3, r2
 800e63a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e64c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e64e:	4a04      	ldr	r2, [pc, #16]	; (800e660 <__NVIC_SetPriorityGrouping+0x44>)
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	60d3      	str	r3, [r2, #12]
}
 800e654:	bf00      	nop
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	e000ed00 	.word	0xe000ed00

0800e664 <__NVIC_GetPriorityGrouping>:
{
 800e664:	b480      	push	{r7}
 800e666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e668:	4b04      	ldr	r3, [pc, #16]	; (800e67c <__NVIC_GetPriorityGrouping+0x18>)
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	0a1b      	lsrs	r3, r3, #8
 800e66e:	f003 0307 	and.w	r3, r3, #7
}
 800e672:	4618      	mov	r0, r3
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr
 800e67c:	e000ed00 	.word	0xe000ed00

0800e680 <__NVIC_EnableIRQ>:
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	db0b      	blt.n	800e6aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	f003 021f 	and.w	r2, r3, #31
 800e698:	4907      	ldr	r1, [pc, #28]	; (800e6b8 <__NVIC_EnableIRQ+0x38>)
 800e69a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e69e:	095b      	lsrs	r3, r3, #5
 800e6a0:	2001      	movs	r0, #1
 800e6a2:	fa00 f202 	lsl.w	r2, r0, r2
 800e6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e6aa:	bf00      	nop
 800e6ac:	370c      	adds	r7, #12
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	e000e100 	.word	0xe000e100

0800e6bc <__NVIC_DisableIRQ>:
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e6c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	db10      	blt.n	800e6f0 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	f003 021f 	and.w	r2, r3, #31
 800e6d4:	4909      	ldr	r1, [pc, #36]	; (800e6fc <__NVIC_DisableIRQ+0x40>)
 800e6d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6da:	095b      	lsrs	r3, r3, #5
 800e6dc:	2001      	movs	r0, #1
 800e6de:	fa00 f202 	lsl.w	r2, r0, r2
 800e6e2:	3320      	adds	r3, #32
 800e6e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e6e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e6ec:	f3bf 8f6f 	isb	sy
}
 800e6f0:	bf00      	nop
 800e6f2:	370c      	adds	r7, #12
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	e000e100 	.word	0xe000e100

0800e700 <__NVIC_SetPriority>:
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	6039      	str	r1, [r7, #0]
 800e70a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e70c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e710:	2b00      	cmp	r3, #0
 800e712:	db0a      	blt.n	800e72a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	b2da      	uxtb	r2, r3
 800e718:	490c      	ldr	r1, [pc, #48]	; (800e74c <__NVIC_SetPriority+0x4c>)
 800e71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e71e:	0112      	lsls	r2, r2, #4
 800e720:	b2d2      	uxtb	r2, r2
 800e722:	440b      	add	r3, r1
 800e724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e728:	e00a      	b.n	800e740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	4908      	ldr	r1, [pc, #32]	; (800e750 <__NVIC_SetPriority+0x50>)
 800e730:	79fb      	ldrb	r3, [r7, #7]
 800e732:	f003 030f 	and.w	r3, r3, #15
 800e736:	3b04      	subs	r3, #4
 800e738:	0112      	lsls	r2, r2, #4
 800e73a:	b2d2      	uxtb	r2, r2
 800e73c:	440b      	add	r3, r1
 800e73e:	761a      	strb	r2, [r3, #24]
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	e000e100 	.word	0xe000e100
 800e750:	e000ed00 	.word	0xe000ed00

0800e754 <NVIC_EncodePriority>:
{
 800e754:	b480      	push	{r7}
 800e756:	b089      	sub	sp, #36	; 0x24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f003 0307 	and.w	r3, r3, #7
 800e766:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	f1c3 0307 	rsb	r3, r3, #7
 800e76e:	2b04      	cmp	r3, #4
 800e770:	bf28      	it	cs
 800e772:	2304      	movcs	r3, #4
 800e774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	3304      	adds	r3, #4
 800e77a:	2b06      	cmp	r3, #6
 800e77c:	d902      	bls.n	800e784 <NVIC_EncodePriority+0x30>
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	3b03      	subs	r3, #3
 800e782:	e000      	b.n	800e786 <NVIC_EncodePriority+0x32>
 800e784:	2300      	movs	r3, #0
 800e786:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e788:	f04f 32ff 	mov.w	r2, #4294967295
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	fa02 f303 	lsl.w	r3, r2, r3
 800e792:	43da      	mvns	r2, r3
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	401a      	ands	r2, r3
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e79c:	f04f 31ff 	mov.w	r1, #4294967295
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	fa01 f303 	lsl.w	r3, r1, r3
 800e7a6:	43d9      	mvns	r1, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e7ac:	4313      	orrs	r3, r2
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3724      	adds	r7, #36	; 0x24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
	...

0800e7bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e7cc:	d301      	bcc.n	800e7d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e00f      	b.n	800e7f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e7d2:	4a0a      	ldr	r2, [pc, #40]	; (800e7fc <SysTick_Config+0x40>)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e7da:	210f      	movs	r1, #15
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	f7ff ff8e 	bl	800e700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <SysTick_Config+0x40>)
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e7ea:	4b04      	ldr	r3, [pc, #16]	; (800e7fc <SysTick_Config+0x40>)
 800e7ec:	2207      	movs	r2, #7
 800e7ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	e000e010 	.word	0xe000e010

0800e800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff ff07 	bl	800e61c <__NVIC_SetPriorityGrouping>
}
 800e80e:	bf00      	nop
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b086      	sub	sp, #24
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	4603      	mov	r3, r0
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e824:	2300      	movs	r3, #0
 800e826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e828:	f7ff ff1c 	bl	800e664 <__NVIC_GetPriorityGrouping>
 800e82c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	6978      	ldr	r0, [r7, #20]
 800e834:	f7ff ff8e 	bl	800e754 <NVIC_EncodePriority>
 800e838:	4602      	mov	r2, r0
 800e83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e83e:	4611      	mov	r1, r2
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff ff5d 	bl	800e700 <__NVIC_SetPriority>
}
 800e846:	bf00      	nop
 800e848:	3718      	adds	r7, #24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	4603      	mov	r3, r0
 800e856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7ff ff0f 	bl	800e680 <__NVIC_EnableIRQ>
}
 800e862:	bf00      	nop
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b082      	sub	sp, #8
 800e86e:	af00      	add	r7, sp, #0
 800e870:	4603      	mov	r3, r0
 800e872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800e874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff ff1f 	bl	800e6bc <__NVIC_DisableIRQ>
}
 800e87e:	bf00      	nop
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b082      	sub	sp, #8
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff ff94 	bl	800e7bc <SysTick_Config>
 800e894:	4603      	mov	r3, r0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d101      	bne.n	800e8b4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e037      	b.n	800e924 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800e8ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e8ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800e8d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e8e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e8f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f000 f9c2 	bl	800ec90 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800e922:	2300      	movs	r3, #0
}  
 800e924:	4618      	mov	r0, r3
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d101      	bne.n	800e93e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	e03a      	b.n	800e9b4 <HAL_DMA_DeInit+0x88>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 0201 	bic.w	r2, r2, #1
 800e94c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2200      	movs	r2, #0
 800e95c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2200      	movs	r2, #0
 800e964:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2200      	movs	r2, #0
 800e96c:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f98e 	bl	800ec90 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e97c:	2101      	movs	r1, #1
 800e97e:	fa01 f202 	lsl.w	r2, r1, r2
 800e982:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d101      	bne.n	800e9dc <HAL_DMA_Start_IT+0x20>
 800e9d8:	2302      	movs	r3, #2
 800e9da:	e04a      	b.n	800ea72 <HAL_DMA_Start_IT+0xb6>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d13a      	bne.n	800ea64 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2202      	movs	r2, #2
 800e9f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f022 0201 	bic.w	r2, r2, #1
 800ea0a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	68b9      	ldr	r1, [r7, #8]
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f000 f90d 	bl	800ec32 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d008      	beq.n	800ea32 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f042 020e 	orr.w	r2, r2, #14
 800ea2e:	601a      	str	r2, [r3, #0]
 800ea30:	e00f      	b.n	800ea52 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f042 020a 	orr.w	r2, r2, #10
 800ea40:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f022 0204 	bic.w	r2, r2, #4
 800ea50:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f042 0201 	orr.w	r2, r2, #1
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	e005      	b.n	800ea70 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800ea70:	7dfb      	ldrb	r3, [r7, #23]
} 
 800ea72:	4618      	mov	r0, r3
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b083      	sub	sp, #12
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d008      	beq.n	800ea9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2204      	movs	r2, #4
 800ea90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e020      	b.n	800eae0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 020e 	bic.w	r2, r2, #14
 800eaac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 0201 	bic.w	r2, r2, #1
 800eabc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac6:	2101      	movs	r1, #1
 800eac8:	fa01 f202 	lsl.w	r2, r1, r2
 800eacc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb08:	2204      	movs	r2, #4
 800eb0a:	409a      	lsls	r2, r3
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	4013      	ands	r3, r2
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d024      	beq.n	800eb5e <HAL_DMA_IRQHandler+0x72>
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	f003 0304 	and.w	r3, r3, #4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d01f      	beq.n	800eb5e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f003 0320 	and.w	r3, r3, #32
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d107      	bne.n	800eb3c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f022 0204 	bic.w	r2, r2, #4
 800eb3a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb44:	2104      	movs	r1, #4
 800eb46:	fa01 f202 	lsl.w	r2, r1, r2
 800eb4a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d06a      	beq.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800eb5c:	e065      	b.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb62:	2202      	movs	r2, #2
 800eb64:	409a      	lsls	r2, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4013      	ands	r3, r2
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d02c      	beq.n	800ebc8 <HAL_DMA_IRQHandler+0xdc>
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	f003 0302 	and.w	r3, r3, #2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d027      	beq.n	800ebc8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f003 0320 	and.w	r3, r3, #32
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10b      	bne.n	800eb9e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f022 020a 	bic.w	r2, r2, #10
 800eb94:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba6:	2102      	movs	r1, #2
 800eba8:	fa01 f202 	lsl.w	r2, r1, r2
 800ebac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d035      	beq.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800ebc6:	e030      	b.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebcc:	2208      	movs	r2, #8
 800ebce:	409a      	lsls	r2, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	4013      	ands	r3, r2
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d028      	beq.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	f003 0308 	and.w	r3, r3, #8
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d023      	beq.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f022 020e 	bic.w	r2, r2, #14
 800ebf0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebfa:	2101      	movs	r1, #1
 800ebfc:	fa01 f202 	lsl.w	r2, r1, r2
 800ec00:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2201      	movs	r2, #1
 800ec06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d004      	beq.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	4798      	blx	r3
    }
  }
}  
 800ec28:	e7ff      	b.n	800ec2a <HAL_DMA_IRQHandler+0x13e>
 800ec2a:	bf00      	nop
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ec32:	b480      	push	{r7}
 800ec34:	b085      	sub	sp, #20
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	60f8      	str	r0, [r7, #12]
 800ec3a:	60b9      	str	r1, [r7, #8]
 800ec3c:	607a      	str	r2, [r7, #4]
 800ec3e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec48:	2101      	movs	r1, #1
 800ec4a:	fa01 f202 	lsl.w	r2, r1, r2
 800ec4e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	2b10      	cmp	r3, #16
 800ec5e:	d108      	bne.n	800ec72 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ec70:	e007      	b.n	800ec82 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	60da      	str	r2, [r3, #12]
}
 800ec82:	bf00      	nop
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
	...

0800ec90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	4b14      	ldr	r3, [pc, #80]	; (800ecf0 <DMA_CalcBaseAndBitshift+0x60>)
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d80f      	bhi.n	800ecc4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <DMA_CalcBaseAndBitshift+0x64>)
 800ecac:	4413      	add	r3, r2
 800ecae:	4a12      	ldr	r2, [pc, #72]	; (800ecf8 <DMA_CalcBaseAndBitshift+0x68>)
 800ecb0:	fba2 2303 	umull	r2, r3, r2, r3
 800ecb4:	091b      	lsrs	r3, r3, #4
 800ecb6:	009a      	lsls	r2, r3, #2
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a0f      	ldr	r2, [pc, #60]	; (800ecfc <DMA_CalcBaseAndBitshift+0x6c>)
 800ecc0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800ecc2:	e00e      	b.n	800ece2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4b0d      	ldr	r3, [pc, #52]	; (800ed00 <DMA_CalcBaseAndBitshift+0x70>)
 800eccc:	4413      	add	r3, r2
 800ecce:	4a0a      	ldr	r2, [pc, #40]	; (800ecf8 <DMA_CalcBaseAndBitshift+0x68>)
 800ecd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ecd4:	091b      	lsrs	r3, r3, #4
 800ecd6:	009a      	lsls	r2, r3, #2
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a09      	ldr	r2, [pc, #36]	; (800ed04 <DMA_CalcBaseAndBitshift+0x74>)
 800ece0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ece2:	bf00      	nop
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	40020407 	.word	0x40020407
 800ecf4:	bffdfff8 	.word	0xbffdfff8
 800ecf8:	cccccccd 	.word	0xcccccccd
 800ecfc:	40020000 	.word	0x40020000
 800ed00:	bffdfbf8 	.word	0xbffdfbf8
 800ed04:	40020400 	.word	0x40020400

0800ed08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ed12:	2300      	movs	r3, #0
 800ed14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ed16:	e160      	b.n	800efda <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	2101      	movs	r1, #1
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	fa01 f303 	lsl.w	r3, r1, r3
 800ed24:	4013      	ands	r3, r2
 800ed26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f000 8152 	beq.w	800efd4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d003      	beq.n	800ed40 <HAL_GPIO_Init+0x38>
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	2b12      	cmp	r3, #18
 800ed3e:	d123      	bne.n	800ed88 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	08da      	lsrs	r2, r3, #3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3208      	adds	r2, #8
 800ed48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f003 0307 	and.w	r3, r3, #7
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	220f      	movs	r2, #15
 800ed58:	fa02 f303 	lsl.w	r3, r2, r3
 800ed5c:	43db      	mvns	r3, r3
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	4013      	ands	r3, r2
 800ed62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	691a      	ldr	r2, [r3, #16]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	f003 0307 	and.w	r3, r3, #7
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	fa02 f303 	lsl.w	r3, r2, r3
 800ed74:	693a      	ldr	r2, [r7, #16]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	08da      	lsrs	r2, r3, #3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	3208      	adds	r2, #8
 800ed82:	6939      	ldr	r1, [r7, #16]
 800ed84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	005b      	lsls	r3, r3, #1
 800ed92:	2203      	movs	r2, #3
 800ed94:	fa02 f303 	lsl.w	r3, r2, r3
 800ed98:	43db      	mvns	r3, r3
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f003 0203 	and.w	r2, r3, #3
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	fa02 f303 	lsl.w	r3, r2, r3
 800edb0:	693a      	ldr	r2, [r7, #16]
 800edb2:	4313      	orrs	r3, r2
 800edb4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d00b      	beq.n	800eddc <HAL_GPIO_Init+0xd4>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d007      	beq.n	800eddc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800edd0:	2b11      	cmp	r3, #17
 800edd2:	d003      	beq.n	800eddc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	2b12      	cmp	r3, #18
 800edda:	d130      	bne.n	800ee3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	689b      	ldr	r3, [r3, #8]
 800ede0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	2203      	movs	r2, #3
 800ede8:	fa02 f303 	lsl.w	r3, r2, r3
 800edec:	43db      	mvns	r3, r3
 800edee:	693a      	ldr	r2, [r7, #16]
 800edf0:	4013      	ands	r3, r2
 800edf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ee12:	2201      	movs	r2, #1
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	fa02 f303 	lsl.w	r3, r2, r3
 800ee1a:	43db      	mvns	r3, r3
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	4013      	ands	r3, r2
 800ee20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	091b      	lsrs	r3, r3, #4
 800ee28:	f003 0201 	and.w	r2, r3, #1
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	2203      	movs	r2, #3
 800ee4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee4e:	43db      	mvns	r3, r3
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	4013      	ands	r3, r2
 800ee54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	689a      	ldr	r2, [r3, #8]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	005b      	lsls	r3, r3, #1
 800ee5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee62:	693a      	ldr	r2, [r7, #16]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f000 80ac 	beq.w	800efd4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ee7c:	4b5e      	ldr	r3, [pc, #376]	; (800eff8 <HAL_GPIO_Init+0x2f0>)
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	4a5d      	ldr	r2, [pc, #372]	; (800eff8 <HAL_GPIO_Init+0x2f0>)
 800ee82:	f043 0301 	orr.w	r3, r3, #1
 800ee86:	6193      	str	r3, [r2, #24]
 800ee88:	4b5b      	ldr	r3, [pc, #364]	; (800eff8 <HAL_GPIO_Init+0x2f0>)
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	60bb      	str	r3, [r7, #8]
 800ee92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ee94:	4a59      	ldr	r2, [pc, #356]	; (800effc <HAL_GPIO_Init+0x2f4>)
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	089b      	lsrs	r3, r3, #2
 800ee9a:	3302      	adds	r3, #2
 800ee9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	f003 0303 	and.w	r3, r3, #3
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	220f      	movs	r2, #15
 800eeac:	fa02 f303 	lsl.w	r3, r2, r3
 800eeb0:	43db      	mvns	r3, r3
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800eebe:	d025      	beq.n	800ef0c <HAL_GPIO_Init+0x204>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a4f      	ldr	r2, [pc, #316]	; (800f000 <HAL_GPIO_Init+0x2f8>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d01f      	beq.n	800ef08 <HAL_GPIO_Init+0x200>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a4e      	ldr	r2, [pc, #312]	; (800f004 <HAL_GPIO_Init+0x2fc>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d019      	beq.n	800ef04 <HAL_GPIO_Init+0x1fc>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a4d      	ldr	r2, [pc, #308]	; (800f008 <HAL_GPIO_Init+0x300>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d013      	beq.n	800ef00 <HAL_GPIO_Init+0x1f8>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a4c      	ldr	r2, [pc, #304]	; (800f00c <HAL_GPIO_Init+0x304>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d00d      	beq.n	800eefc <HAL_GPIO_Init+0x1f4>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a4b      	ldr	r2, [pc, #300]	; (800f010 <HAL_GPIO_Init+0x308>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d007      	beq.n	800eef8 <HAL_GPIO_Init+0x1f0>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a4a      	ldr	r2, [pc, #296]	; (800f014 <HAL_GPIO_Init+0x30c>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d101      	bne.n	800eef4 <HAL_GPIO_Init+0x1ec>
 800eef0:	2306      	movs	r3, #6
 800eef2:	e00c      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800eef4:	2307      	movs	r3, #7
 800eef6:	e00a      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800eef8:	2305      	movs	r3, #5
 800eefa:	e008      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800eefc:	2304      	movs	r3, #4
 800eefe:	e006      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800ef00:	2303      	movs	r3, #3
 800ef02:	e004      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800ef04:	2302      	movs	r3, #2
 800ef06:	e002      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e000      	b.n	800ef0e <HAL_GPIO_Init+0x206>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	f002 0203 	and.w	r2, r2, #3
 800ef14:	0092      	lsls	r2, r2, #2
 800ef16:	4093      	lsls	r3, r2
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ef1e:	4937      	ldr	r1, [pc, #220]	; (800effc <HAL_GPIO_Init+0x2f4>)
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	089b      	lsrs	r3, r3, #2
 800ef24:	3302      	adds	r3, #2
 800ef26:	693a      	ldr	r2, [r7, #16]
 800ef28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ef2c:	4b3a      	ldr	r3, [pc, #232]	; (800f018 <HAL_GPIO_Init+0x310>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	43db      	mvns	r3, r3
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	4013      	ands	r3, r2
 800ef3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d003      	beq.n	800ef50 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ef50:	4a31      	ldr	r2, [pc, #196]	; (800f018 <HAL_GPIO_Init+0x310>)
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ef56:	4b30      	ldr	r3, [pc, #192]	; (800f018 <HAL_GPIO_Init+0x310>)
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	43db      	mvns	r3, r3
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	4013      	ands	r3, r2
 800ef64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d003      	beq.n	800ef7a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800ef72:	693a      	ldr	r2, [r7, #16]
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ef7a:	4a27      	ldr	r2, [pc, #156]	; (800f018 <HAL_GPIO_Init+0x310>)
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ef80:	4b25      	ldr	r3, [pc, #148]	; (800f018 <HAL_GPIO_Init+0x310>)
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	43db      	mvns	r3, r3
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d003      	beq.n	800efa4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	4313      	orrs	r3, r2
 800efa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800efa4:	4a1c      	ldr	r2, [pc, #112]	; (800f018 <HAL_GPIO_Init+0x310>)
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800efaa:	4b1b      	ldr	r3, [pc, #108]	; (800f018 <HAL_GPIO_Init+0x310>)
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	43db      	mvns	r3, r3
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	4013      	ands	r3, r2
 800efb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	685b      	ldr	r3, [r3, #4]
 800efbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d003      	beq.n	800efce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800efc6:	693a      	ldr	r2, [r7, #16]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4313      	orrs	r3, r2
 800efcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800efce:	4a12      	ldr	r2, [pc, #72]	; (800f018 <HAL_GPIO_Init+0x310>)
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	3301      	adds	r3, #1
 800efd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	fa22 f303 	lsr.w	r3, r2, r3
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f47f ae97 	bne.w	800ed18 <HAL_GPIO_Init+0x10>
  }
}
 800efea:	bf00      	nop
 800efec:	371c      	adds	r7, #28
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	40021000 	.word	0x40021000
 800effc:	40010000 	.word	0x40010000
 800f000:	48000400 	.word	0x48000400
 800f004:	48000800 	.word	0x48000800
 800f008:	48000c00 	.word	0x48000c00
 800f00c:	48001000 	.word	0x48001000
 800f010:	48001400 	.word	0x48001400
 800f014:	48001800 	.word	0x48001800
 800f018:	40010400 	.word	0x40010400

0800f01c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b087      	sub	sp, #28
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800f02a:	e0c4      	b.n	800f1b6 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f02c:	2201      	movs	r2, #1
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	fa02 f303 	lsl.w	r3, r2, r3
 800f034:	683a      	ldr	r2, [r7, #0]
 800f036:	4013      	ands	r3, r2
 800f038:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f000 80b7 	beq.w	800f1b0 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800f042:	4a63      	ldr	r2, [pc, #396]	; (800f1d0 <HAL_GPIO_DeInit+0x1b4>)
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	089b      	lsrs	r3, r3, #2
 800f048:	3302      	adds	r3, #2
 800f04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f04e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	f003 0303 	and.w	r3, r3, #3
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	220f      	movs	r2, #15
 800f05a:	fa02 f303 	lsl.w	r3, r2, r3
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	4013      	ands	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800f06a:	d025      	beq.n	800f0b8 <HAL_GPIO_DeInit+0x9c>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4a59      	ldr	r2, [pc, #356]	; (800f1d4 <HAL_GPIO_DeInit+0x1b8>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d01f      	beq.n	800f0b4 <HAL_GPIO_DeInit+0x98>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	4a58      	ldr	r2, [pc, #352]	; (800f1d8 <HAL_GPIO_DeInit+0x1bc>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d019      	beq.n	800f0b0 <HAL_GPIO_DeInit+0x94>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a57      	ldr	r2, [pc, #348]	; (800f1dc <HAL_GPIO_DeInit+0x1c0>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d013      	beq.n	800f0ac <HAL_GPIO_DeInit+0x90>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a56      	ldr	r2, [pc, #344]	; (800f1e0 <HAL_GPIO_DeInit+0x1c4>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00d      	beq.n	800f0a8 <HAL_GPIO_DeInit+0x8c>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a55      	ldr	r2, [pc, #340]	; (800f1e4 <HAL_GPIO_DeInit+0x1c8>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d007      	beq.n	800f0a4 <HAL_GPIO_DeInit+0x88>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a54      	ldr	r2, [pc, #336]	; (800f1e8 <HAL_GPIO_DeInit+0x1cc>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d101      	bne.n	800f0a0 <HAL_GPIO_DeInit+0x84>
 800f09c:	2306      	movs	r3, #6
 800f09e:	e00c      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0a0:	2307      	movs	r3, #7
 800f0a2:	e00a      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0a4:	2305      	movs	r3, #5
 800f0a6:	e008      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0a8:	2304      	movs	r3, #4
 800f0aa:	e006      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0ac:	2303      	movs	r3, #3
 800f0ae:	e004      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	e002      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e000      	b.n	800f0ba <HAL_GPIO_DeInit+0x9e>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	f002 0203 	and.w	r2, r2, #3
 800f0c0:	0092      	lsls	r2, r2, #2
 800f0c2:	4093      	lsls	r3, r2
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d132      	bne.n	800f130 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800f0ca:	4b48      	ldr	r3, [pc, #288]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	43db      	mvns	r3, r3
 800f0d2:	4946      	ldr	r1, [pc, #280]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0d4:	4013      	ands	r3, r2
 800f0d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800f0d8:	4b44      	ldr	r3, [pc, #272]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0da:	685a      	ldr	r2, [r3, #4]
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	43db      	mvns	r3, r3
 800f0e0:	4942      	ldr	r1, [pc, #264]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800f0e6:	4b41      	ldr	r3, [pc, #260]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0e8:	689a      	ldr	r2, [r3, #8]
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	43db      	mvns	r3, r3
 800f0ee:	493f      	ldr	r1, [pc, #252]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0f0:	4013      	ands	r3, r2
 800f0f2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800f0f4:	4b3d      	ldr	r3, [pc, #244]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0f6:	68da      	ldr	r2, [r3, #12]
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	43db      	mvns	r3, r3
 800f0fc:	493b      	ldr	r1, [pc, #236]	; (800f1ec <HAL_GPIO_DeInit+0x1d0>)
 800f0fe:	4013      	ands	r3, r2
 800f100:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f003 0303 	and.w	r3, r3, #3
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	220f      	movs	r2, #15
 800f10c:	fa02 f303 	lsl.w	r3, r2, r3
 800f110:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800f112:	4a2f      	ldr	r2, [pc, #188]	; (800f1d0 <HAL_GPIO_DeInit+0x1b4>)
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	089b      	lsrs	r3, r3, #2
 800f118:	3302      	adds	r3, #2
 800f11a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	43da      	mvns	r2, r3
 800f122:	482b      	ldr	r0, [pc, #172]	; (800f1d0 <HAL_GPIO_DeInit+0x1b4>)
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	089b      	lsrs	r3, r3, #2
 800f128:	400a      	ands	r2, r1
 800f12a:	3302      	adds	r3, #2
 800f12c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	2103      	movs	r1, #3
 800f13a:	fa01 f303 	lsl.w	r3, r1, r3
 800f13e:	43db      	mvns	r3, r3
 800f140:	401a      	ands	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	08da      	lsrs	r2, r3, #3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	3208      	adds	r2, #8
 800f14e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f003 0307 	and.w	r3, r3, #7
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	220f      	movs	r2, #15
 800f15c:	fa02 f303 	lsl.w	r3, r2, r3
 800f160:	43db      	mvns	r3, r3
 800f162:	697a      	ldr	r2, [r7, #20]
 800f164:	08d2      	lsrs	r2, r2, #3
 800f166:	4019      	ands	r1, r3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	3208      	adds	r2, #8
 800f16c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	689a      	ldr	r2, [r3, #8]
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	005b      	lsls	r3, r3, #1
 800f178:	2103      	movs	r1, #3
 800f17a:	fa01 f303 	lsl.w	r3, r1, r3
 800f17e:	43db      	mvns	r3, r3
 800f180:	401a      	ands	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	2101      	movs	r1, #1
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	fa01 f303 	lsl.w	r3, r1, r3
 800f192:	43db      	mvns	r3, r3
 800f194:	401a      	ands	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68da      	ldr	r2, [r3, #12]
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	2103      	movs	r1, #3
 800f1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800f1a8:	43db      	mvns	r3, r3
 800f1aa:	401a      	ands	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	60da      	str	r2, [r3, #12]
    }

    position++;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f47f af34 	bne.w	800f02c <HAL_GPIO_DeInit+0x10>
  }
}
 800f1c4:	bf00      	nop
 800f1c6:	371c      	adds	r7, #28
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	40010000 	.word	0x40010000
 800f1d4:	48000400 	.word	0x48000400
 800f1d8:	48000800 	.word	0x48000800
 800f1dc:	48000c00 	.word	0x48000c00
 800f1e0:	48001000 	.word	0x48001000
 800f1e4:	48001400 	.word	0x48001400
 800f1e8:	48001800 	.word	0x48001800
 800f1ec:	40010400 	.word	0x40010400

0800f1f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	807b      	strh	r3, [r7, #2]
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f200:	787b      	ldrb	r3, [r7, #1]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d003      	beq.n	800f20e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f206:	887a      	ldrh	r2, [r7, #2]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f20c:	e002      	b.n	800f214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f20e:	887a      	ldrh	r2, [r7, #2]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f214:	bf00      	nop
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f22e:	2301      	movs	r3, #1
 800f230:	e081      	b.n	800f336 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d106      	bne.n	800f24c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7fb fd16 	bl	800ac78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2224      	movs	r2, #36	; 0x24
 800f250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f022 0201 	bic.w	r2, r2, #1
 800f262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	689a      	ldr	r2, [r3, #8]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	2b01      	cmp	r3, #1
 800f288:	d107      	bne.n	800f29a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	689a      	ldr	r2, [r3, #8]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f296:	609a      	str	r2, [r3, #8]
 800f298:	e006      	b.n	800f2a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	689a      	ldr	r2, [r3, #8]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f2a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	2b02      	cmp	r3, #2
 800f2ae:	d104      	bne.n	800f2ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	6812      	ldr	r2, [r2, #0]
 800f2c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f2c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68da      	ldr	r2, [r3, #12]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f2dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691a      	ldr	r2, [r3, #16]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	695b      	ldr	r3, [r3, #20]
 800f2e6:	ea42 0103 	orr.w	r1, r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	021a      	lsls	r2, r3, #8
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	430a      	orrs	r2, r1
 800f2f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	69d9      	ldr	r1, [r3, #28]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6a1a      	ldr	r2, [r3, #32]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	430a      	orrs	r2, r1
 800f306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f042 0201 	orr.w	r2, r2, #1
 800f316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2220      	movs	r2, #32
 800f322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b082      	sub	sp, #8
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d101      	bne.n	800f350 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800f34c:	2301      	movs	r3, #1
 800f34e:	e021      	b.n	800f394 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2224      	movs	r2, #36	; 0x24
 800f354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	681a      	ldr	r2, [r3, #0]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f022 0201 	bic.w	r2, r2, #1
 800f366:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7fb fcc9 	bl	800ad00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af02      	add	r7, sp, #8
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	607a      	str	r2, [r7, #4]
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	817b      	strh	r3, [r7, #10]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	2b20      	cmp	r3, #32
 800f3ba:	f040 80da 	bne.w	800f572 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d101      	bne.n	800f3cc <HAL_I2C_Master_Transmit+0x30>
 800f3c8:	2302      	movs	r3, #2
 800f3ca:	e0d3      	b.n	800f574 <HAL_I2C_Master_Transmit+0x1d8>
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f3d4:	f7fc fddc 	bl	800bf90 <HAL_GetTick>
 800f3d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	2332      	movs	r3, #50	; 0x32
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f000 fcbc 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e0be      	b.n	800f574 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2221      	movs	r2, #33	; 0x21
 800f3fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2210      	movs	r2, #16
 800f402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	893a      	ldrh	r2, [r7, #8]
 800f416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f422:	b29b      	uxth	r3, r3
 800f424:	2bff      	cmp	r3, #255	; 0xff
 800f426:	d90e      	bls.n	800f446 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	22ff      	movs	r2, #255	; 0xff
 800f42c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f432:	b2da      	uxtb	r2, r3
 800f434:	8979      	ldrh	r1, [r7, #10]
 800f436:	4b51      	ldr	r3, [pc, #324]	; (800f57c <HAL_I2C_Master_Transmit+0x1e0>)
 800f438:	9300      	str	r3, [sp, #0]
 800f43a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f000 fe1e 	bl	8010080 <I2C_TransferConfig>
 800f444:	e06c      	b.n	800f520 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f454:	b2da      	uxtb	r2, r3
 800f456:	8979      	ldrh	r1, [r7, #10]
 800f458:	4b48      	ldr	r3, [pc, #288]	; (800f57c <HAL_I2C_Master_Transmit+0x1e0>)
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f000 fe0d 	bl	8010080 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800f466:	e05b      	b.n	800f520 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f468:	697a      	ldr	r2, [r7, #20]
 800f46a:	6a39      	ldr	r1, [r7, #32]
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f000 fcb9 	bl	800fde4 <I2C_WaitOnTXISFlagUntilTimeout>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800f478:	2301      	movs	r3, #1
 800f47a:	e07b      	b.n	800f574 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f480:	781a      	ldrb	r2, [r3, #0]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48c:	1c5a      	adds	r2, r3, #1
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f496:	b29b      	uxth	r3, r3
 800f498:	3b01      	subs	r3, #1
 800f49a:	b29a      	uxth	r2, r3
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d034      	beq.n	800f520 <HAL_I2C_Master_Transmit+0x184>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d130      	bne.n	800f520 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	2180      	movs	r1, #128	; 0x80
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f000 fc4b 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e04d      	b.n	800f574 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	2bff      	cmp	r3, #255	; 0xff
 800f4e0:	d90e      	bls.n	800f500 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	22ff      	movs	r2, #255	; 0xff
 800f4e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4ec:	b2da      	uxtb	r2, r3
 800f4ee:	8979      	ldrh	r1, [r7, #10]
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f000 fdc1 	bl	8010080 <I2C_TransferConfig>
 800f4fe:	e00f      	b.n	800f520 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f504:	b29a      	uxth	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	8979      	ldrh	r1, [r7, #10]
 800f512:	2300      	movs	r3, #0
 800f514:	9300      	str	r3, [sp, #0]
 800f516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f51a:	68f8      	ldr	r0, [r7, #12]
 800f51c:	f000 fdb0 	bl	8010080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f524:	b29b      	uxth	r3, r3
 800f526:	2b00      	cmp	r3, #0
 800f528:	d19e      	bne.n	800f468 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	6a39      	ldr	r1, [r7, #32]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f000 fc98 	bl	800fe64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800f53a:	2301      	movs	r3, #1
 800f53c:	e01a      	b.n	800f574 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2220      	movs	r2, #32
 800f544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	6859      	ldr	r1, [r3, #4]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	4b0b      	ldr	r3, [pc, #44]	; (800f580 <HAL_I2C_Master_Transmit+0x1e4>)
 800f552:	400b      	ands	r3, r1
 800f554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2220      	movs	r2, #32
 800f55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f56e:	2300      	movs	r3, #0
 800f570:	e000      	b.n	800f574 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800f572:	2302      	movs	r3, #2
  }
}
 800f574:	4618      	mov	r0, r3
 800f576:	3718      	adds	r7, #24
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	80002000 	.word	0x80002000
 800f580:	fe00e800 	.word	0xfe00e800

0800f584 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b088      	sub	sp, #32
 800f588:	af02      	add	r7, sp, #8
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	607a      	str	r2, [r7, #4]
 800f58e:	461a      	mov	r2, r3
 800f590:	460b      	mov	r3, r1
 800f592:	817b      	strh	r3, [r7, #10]
 800f594:	4613      	mov	r3, r2
 800f596:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b20      	cmp	r3, #32
 800f5a2:	f040 80db 	bne.w	800f75c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d101      	bne.n	800f5b4 <HAL_I2C_Master_Receive+0x30>
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	e0d4      	b.n	800f75e <HAL_I2C_Master_Receive+0x1da>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f5bc:	f7fc fce8 	bl	800bf90 <HAL_GetTick>
 800f5c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	9300      	str	r3, [sp, #0]
 800f5c6:	2332      	movs	r3, #50	; 0x32
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f000 fbc8 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e0bf      	b.n	800f75e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2222      	movs	r2, #34	; 0x22
 800f5e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2210      	movs	r2, #16
 800f5ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	893a      	ldrh	r2, [r7, #8]
 800f5fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2200      	movs	r2, #0
 800f604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	2bff      	cmp	r3, #255	; 0xff
 800f60e:	d90e      	bls.n	800f62e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	22ff      	movs	r2, #255	; 0xff
 800f614:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	8979      	ldrh	r1, [r7, #10]
 800f61e:	4b52      	ldr	r3, [pc, #328]	; (800f768 <HAL_I2C_Master_Receive+0x1e4>)
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 fd2a 	bl	8010080 <I2C_TransferConfig>
 800f62c:	e06d      	b.n	800f70a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f632:	b29a      	uxth	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	8979      	ldrh	r1, [r7, #10]
 800f640:	4b49      	ldr	r3, [pc, #292]	; (800f768 <HAL_I2C_Master_Receive+0x1e4>)
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 fd19 	bl	8010080 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800f64e:	e05c      	b.n	800f70a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	6a39      	ldr	r1, [r7, #32]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	f000 fc41 	bl	800fedc <I2C_WaitOnRXNEFlagUntilTimeout>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d001      	beq.n	800f664 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800f660:	2301      	movs	r3, #1
 800f662:	e07c      	b.n	800f75e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66e:	b2d2      	uxtb	r2, r2
 800f670:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f676:	1c5a      	adds	r2, r3, #1
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f680:	3b01      	subs	r3, #1
 800f682:	b29a      	uxth	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f68c:	b29b      	uxth	r3, r3
 800f68e:	3b01      	subs	r3, #1
 800f690:	b29a      	uxth	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d034      	beq.n	800f70a <HAL_I2C_Master_Receive+0x186>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d130      	bne.n	800f70a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	6a3b      	ldr	r3, [r7, #32]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	2180      	movs	r1, #128	; 0x80
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f000 fb56 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e04d      	b.n	800f75e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	2bff      	cmp	r3, #255	; 0xff
 800f6ca:	d90e      	bls.n	800f6ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	22ff      	movs	r2, #255	; 0xff
 800f6d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6d6:	b2da      	uxtb	r2, r3
 800f6d8:	8979      	ldrh	r1, [r7, #10]
 800f6da:	2300      	movs	r3, #0
 800f6dc:	9300      	str	r3, [sp, #0]
 800f6de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f000 fccc 	bl	8010080 <I2C_TransferConfig>
 800f6e8:	e00f      	b.n	800f70a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	8979      	ldrh	r1, [r7, #10]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f000 fcbb 	bl	8010080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f70e:	b29b      	uxth	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d19d      	bne.n	800f650 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f714:	697a      	ldr	r2, [r7, #20]
 800f716:	6a39      	ldr	r1, [r7, #32]
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f000 fba3 	bl	800fe64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800f724:	2301      	movs	r3, #1
 800f726:	e01a      	b.n	800f75e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2220      	movs	r2, #32
 800f72e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	6859      	ldr	r1, [r3, #4]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	4b0c      	ldr	r3, [pc, #48]	; (800f76c <HAL_I2C_Master_Receive+0x1e8>)
 800f73c:	400b      	ands	r3, r1
 800f73e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2220      	movs	r2, #32
 800f744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f758:	2300      	movs	r3, #0
 800f75a:	e000      	b.n	800f75e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800f75c:	2302      	movs	r3, #2
  }
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	80002400 	.word	0x80002400
 800f76c:	fe00e800 	.word	0xfe00e800

0800f770 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af02      	add	r7, sp, #8
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	4608      	mov	r0, r1
 800f77a:	4611      	mov	r1, r2
 800f77c:	461a      	mov	r2, r3
 800f77e:	4603      	mov	r3, r0
 800f780:	817b      	strh	r3, [r7, #10]
 800f782:	460b      	mov	r3, r1
 800f784:	813b      	strh	r3, [r7, #8]
 800f786:	4613      	mov	r3, r2
 800f788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b20      	cmp	r3, #32
 800f794:	f040 80f9 	bne.w	800f98a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f798:	6a3b      	ldr	r3, [r7, #32]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <HAL_I2C_Mem_Write+0x34>
 800f79e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d105      	bne.n	800f7b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	e0ed      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d101      	bne.n	800f7be <HAL_I2C_Mem_Write+0x4e>
 800f7ba:	2302      	movs	r3, #2
 800f7bc:	e0e6      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f7c6:	f7fc fbe3 	bl	800bf90 <HAL_GetTick>
 800f7ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	9300      	str	r3, [sp, #0]
 800f7d0:	2332      	movs	r3, #50	; 0x32
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f000 fac3 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e0d1      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2221      	movs	r2, #33	; 0x21
 800f7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2240      	movs	r2, #64	; 0x40
 800f7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	6a3a      	ldr	r2, [r7, #32]
 800f802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f808:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f810:	88f8      	ldrh	r0, [r7, #6]
 800f812:	893a      	ldrh	r2, [r7, #8]
 800f814:	8979      	ldrh	r1, [r7, #10]
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	9301      	str	r3, [sp, #4]
 800f81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	4603      	mov	r3, r0
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f9d3 	bl	800fbcc <I2C_RequestMemoryWrite>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d005      	beq.n	800f838 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	e0a9      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	2bff      	cmp	r3, #255	; 0xff
 800f840:	d90e      	bls.n	800f860 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	22ff      	movs	r2, #255	; 0xff
 800f846:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	8979      	ldrh	r1, [r7, #10]
 800f850:	2300      	movs	r3, #0
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f858:	68f8      	ldr	r0, [r7, #12]
 800f85a:	f000 fc11 	bl	8010080 <I2C_TransferConfig>
 800f85e:	e00f      	b.n	800f880 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f864:	b29a      	uxth	r2, r3
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	8979      	ldrh	r1, [r7, #10]
 800f872:	2300      	movs	r3, #0
 800f874:	9300      	str	r3, [sp, #0]
 800f876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f000 fc00 	bl	8010080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f880:	697a      	ldr	r2, [r7, #20]
 800f882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f000 faad 	bl	800fde4 <I2C_WaitOnTXISFlagUntilTimeout>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d001      	beq.n	800f894 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800f890:	2301      	movs	r3, #1
 800f892:	e07b      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f898:	781a      	ldrb	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8bc:	3b01      	subs	r3, #1
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d034      	beq.n	800f938 <HAL_I2C_Mem_Write+0x1c8>
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d130      	bne.n	800f938 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8dc:	2200      	movs	r2, #0
 800f8de:	2180      	movs	r1, #128	; 0x80
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f000 fa3f 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	e04d      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	2bff      	cmp	r3, #255	; 0xff
 800f8f8:	d90e      	bls.n	800f918 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	22ff      	movs	r2, #255	; 0xff
 800f8fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f904:	b2da      	uxtb	r2, r3
 800f906:	8979      	ldrh	r1, [r7, #10]
 800f908:	2300      	movs	r3, #0
 800f90a:	9300      	str	r3, [sp, #0]
 800f90c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f000 fbb5 	bl	8010080 <I2C_TransferConfig>
 800f916:	e00f      	b.n	800f938 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f926:	b2da      	uxtb	r2, r3
 800f928:	8979      	ldrh	r1, [r7, #10]
 800f92a:	2300      	movs	r3, #0
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f000 fba4 	bl	8010080 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d19e      	bne.n	800f880 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f000 fa8c 	bl	800fe64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800f952:	2301      	movs	r3, #1
 800f954:	e01a      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2220      	movs	r2, #32
 800f95c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	6859      	ldr	r1, [r3, #4]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	4b0a      	ldr	r3, [pc, #40]	; (800f994 <HAL_I2C_Mem_Write+0x224>)
 800f96a:	400b      	ands	r3, r1
 800f96c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2220      	movs	r2, #32
 800f972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2200      	movs	r2, #0
 800f982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	e000      	b.n	800f98c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800f98a:	2302      	movs	r3, #2
  }
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3718      	adds	r7, #24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	fe00e800 	.word	0xfe00e800

0800f998 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b088      	sub	sp, #32
 800f99c:	af02      	add	r7, sp, #8
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	4608      	mov	r0, r1
 800f9a2:	4611      	mov	r1, r2
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	817b      	strh	r3, [r7, #10]
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	813b      	strh	r3, [r7, #8]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b20      	cmp	r3, #32
 800f9bc:	f040 80fd 	bne.w	800fbba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9c0:	6a3b      	ldr	r3, [r7, #32]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <HAL_I2C_Mem_Read+0x34>
 800f9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	e0f1      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d101      	bne.n	800f9e6 <HAL_I2C_Mem_Read+0x4e>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	e0ea      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f9ee:	f7fc facf 	bl	800bf90 <HAL_GetTick>
 800f9f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	2332      	movs	r3, #50	; 0x32
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fa00:	68f8      	ldr	r0, [r7, #12]
 800fa02:	f000 f9af 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e0d5      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2222      	movs	r2, #34	; 0x22
 800fa14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2240      	movs	r2, #64	; 0x40
 800fa1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6a3a      	ldr	r2, [r7, #32]
 800fa2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fa38:	88f8      	ldrh	r0, [r7, #6]
 800fa3a:	893a      	ldrh	r2, [r7, #8]
 800fa3c:	8979      	ldrh	r1, [r7, #10]
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	9301      	str	r3, [sp, #4]
 800fa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa44:	9300      	str	r3, [sp, #0]
 800fa46:	4603      	mov	r3, r0
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 f913 	bl	800fc74 <I2C_RequestMemoryRead>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d005      	beq.n	800fa60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	e0ad      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	2bff      	cmp	r3, #255	; 0xff
 800fa68:	d90e      	bls.n	800fa88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	22ff      	movs	r2, #255	; 0xff
 800fa6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	8979      	ldrh	r1, [r7, #10]
 800fa78:	4b52      	ldr	r3, [pc, #328]	; (800fbc4 <HAL_I2C_Mem_Read+0x22c>)
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f000 fafd 	bl	8010080 <I2C_TransferConfig>
 800fa86:	e00f      	b.n	800faa8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa96:	b2da      	uxtb	r2, r3
 800fa98:	8979      	ldrh	r1, [r7, #10]
 800fa9a:	4b4a      	ldr	r3, [pc, #296]	; (800fbc4 <HAL_I2C_Mem_Read+0x22c>)
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f000 faec 	bl	8010080 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faae:	2200      	movs	r2, #0
 800fab0:	2104      	movs	r1, #4
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 f956 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d001      	beq.n	800fac2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800fabe:	2301      	movs	r3, #1
 800fac0:	e07c      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800facc:	b2d2      	uxtb	r2, r2
 800face:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fade:	3b01      	subs	r3, #1
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faea:	b29b      	uxth	r3, r3
 800faec:	3b01      	subs	r3, #1
 800faee:	b29a      	uxth	r2, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d034      	beq.n	800fb68 <HAL_I2C_Mem_Read+0x1d0>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d130      	bne.n	800fb68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	2180      	movs	r1, #128	; 0x80
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 f927 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d001      	beq.n	800fb20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e04d      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	2bff      	cmp	r3, #255	; 0xff
 800fb28:	d90e      	bls.n	800fb48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	22ff      	movs	r2, #255	; 0xff
 800fb2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	8979      	ldrh	r1, [r7, #10]
 800fb38:	2300      	movs	r3, #0
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 fa9d 	bl	8010080 <I2C_TransferConfig>
 800fb46:	e00f      	b.n	800fb68 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb56:	b2da      	uxtb	r2, r3
 800fb58:	8979      	ldrh	r1, [r7, #10]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	9300      	str	r3, [sp, #0]
 800fb5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	f000 fa8c 	bl	8010080 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d19a      	bne.n	800faa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	f000 f974 	bl	800fe64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	e01a      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2220      	movs	r2, #32
 800fb8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	6859      	ldr	r1, [r3, #4]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	4b0b      	ldr	r3, [pc, #44]	; (800fbc8 <HAL_I2C_Mem_Read+0x230>)
 800fb9a:	400b      	ands	r3, r1
 800fb9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2220      	movs	r2, #32
 800fba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	e000      	b.n	800fbbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800fbba:	2302      	movs	r3, #2
  }
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	80002400 	.word	0x80002400
 800fbc8:	fe00e800 	.word	0xfe00e800

0800fbcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af02      	add	r7, sp, #8
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	4608      	mov	r0, r1
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4603      	mov	r3, r0
 800fbdc:	817b      	strh	r3, [r7, #10]
 800fbde:	460b      	mov	r3, r1
 800fbe0:	813b      	strh	r3, [r7, #8]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fbe6:	88fb      	ldrh	r3, [r7, #6]
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	8979      	ldrh	r1, [r7, #10]
 800fbec:	4b20      	ldr	r3, [pc, #128]	; (800fc70 <I2C_RequestMemoryWrite+0xa4>)
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f000 fa43 	bl	8010080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fbfa:	69fa      	ldr	r2, [r7, #28]
 800fbfc:	69b9      	ldr	r1, [r7, #24]
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f000 f8f0 	bl	800fde4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fc04:	4603      	mov	r3, r0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e02c      	b.n	800fc68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fc0e:	88fb      	ldrh	r3, [r7, #6]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d105      	bne.n	800fc20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fc14:	893b      	ldrh	r3, [r7, #8]
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	629a      	str	r2, [r3, #40]	; 0x28
 800fc1e:	e015      	b.n	800fc4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fc20:	893b      	ldrh	r3, [r7, #8]
 800fc22:	0a1b      	lsrs	r3, r3, #8
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc2e:	69fa      	ldr	r2, [r7, #28]
 800fc30:	69b9      	ldr	r1, [r7, #24]
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f000 f8d6 	bl	800fde4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	e012      	b.n	800fc68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fc42:	893b      	ldrh	r3, [r7, #8]
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	2200      	movs	r2, #0
 800fc54:	2180      	movs	r1, #128	; 0x80
 800fc56:	68f8      	ldr	r0, [r7, #12]
 800fc58:	f000 f884 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	80002000 	.word	0x80002000

0800fc74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af02      	add	r7, sp, #8
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	4608      	mov	r0, r1
 800fc7e:	4611      	mov	r1, r2
 800fc80:	461a      	mov	r2, r3
 800fc82:	4603      	mov	r3, r0
 800fc84:	817b      	strh	r3, [r7, #10]
 800fc86:	460b      	mov	r3, r1
 800fc88:	813b      	strh	r3, [r7, #8]
 800fc8a:	4613      	mov	r3, r2
 800fc8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fc8e:	88fb      	ldrh	r3, [r7, #6]
 800fc90:	b2da      	uxtb	r2, r3
 800fc92:	8979      	ldrh	r1, [r7, #10]
 800fc94:	4b20      	ldr	r3, [pc, #128]	; (800fd18 <I2C_RequestMemoryRead+0xa4>)
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	2300      	movs	r3, #0
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f000 f9f0 	bl	8010080 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fca0:	69fa      	ldr	r2, [r7, #28]
 800fca2:	69b9      	ldr	r1, [r7, #24]
 800fca4:	68f8      	ldr	r0, [r7, #12]
 800fca6:	f000 f89d 	bl	800fde4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e02c      	b.n	800fd0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fcb4:	88fb      	ldrh	r3, [r7, #6]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d105      	bne.n	800fcc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fcba:	893b      	ldrh	r3, [r7, #8]
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	629a      	str	r2, [r3, #40]	; 0x28
 800fcc4:	e015      	b.n	800fcf2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fcc6:	893b      	ldrh	r3, [r7, #8]
 800fcc8:	0a1b      	lsrs	r3, r3, #8
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	b2da      	uxtb	r2, r3
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcd4:	69fa      	ldr	r2, [r7, #28]
 800fcd6:	69b9      	ldr	r1, [r7, #24]
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f000 f883 	bl	800fde4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fce4:	2301      	movs	r3, #1
 800fce6:	e012      	b.n	800fd0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fce8:	893b      	ldrh	r3, [r7, #8]
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	9300      	str	r3, [sp, #0]
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	2140      	movs	r1, #64	; 0x40
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 f831 	bl	800fd64 <I2C_WaitOnFlagUntilTimeout>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	e000      	b.n	800fd0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	80002000 	.word	0x80002000

0800fd1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	699b      	ldr	r3, [r3, #24]
 800fd2a:	f003 0302 	and.w	r3, r3, #2
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	d103      	bne.n	800fd3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2200      	movs	r2, #0
 800fd38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	699b      	ldr	r3, [r3, #24]
 800fd40:	f003 0301 	and.w	r3, r3, #1
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d007      	beq.n	800fd58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	699a      	ldr	r2, [r3, #24]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f042 0201 	orr.w	r2, r2, #1
 800fd56:	619a      	str	r2, [r3, #24]
  }
}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	603b      	str	r3, [r7, #0]
 800fd70:	4613      	mov	r3, r2
 800fd72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fd74:	e022      	b.n	800fdbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd7c:	d01e      	beq.n	800fdbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd7e:	f7fc f907 	bl	800bf90 <HAL_GetTick>
 800fd82:	4602      	mov	r2, r0
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	1ad3      	subs	r3, r2, r3
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d302      	bcc.n	800fd94 <I2C_WaitOnFlagUntilTimeout+0x30>
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d113      	bne.n	800fdbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd98:	f043 0220 	orr.w	r2, r3, #32
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2220      	movs	r2, #32
 800fda4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e00f      	b.n	800fddc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	699a      	ldr	r2, [r3, #24]
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	4013      	ands	r3, r2
 800fdc6:	68ba      	ldr	r2, [r7, #8]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	bf0c      	ite	eq
 800fdcc:	2301      	moveq	r3, #1
 800fdce:	2300      	movne	r3, #0
 800fdd0:	b2db      	uxtb	r3, r3
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d0cd      	beq.n	800fd76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fdf0:	e02c      	b.n	800fe4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	68b9      	ldr	r1, [r7, #8]
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f000 f8dc 	bl	800ffb4 <I2C_IsAcknowledgeFailed>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e02a      	b.n	800fe5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0c:	d01e      	beq.n	800fe4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe0e:	f7fc f8bf 	bl	800bf90 <HAL_GetTick>
 800fe12:	4602      	mov	r2, r0
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	1ad3      	subs	r3, r2, r3
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d302      	bcc.n	800fe24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d113      	bne.n	800fe4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe28:	f043 0220 	orr.w	r2, r3, #32
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2220      	movs	r2, #32
 800fe34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e007      	b.n	800fe5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	699b      	ldr	r3, [r3, #24]
 800fe52:	f003 0302 	and.w	r3, r3, #2
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d1cb      	bne.n	800fdf2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fe70:	e028      	b.n	800fec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	68b9      	ldr	r1, [r7, #8]
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 f89c 	bl	800ffb4 <I2C_IsAcknowledgeFailed>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fe82:	2301      	movs	r3, #1
 800fe84:	e026      	b.n	800fed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe86:	f7fc f883 	bl	800bf90 <HAL_GetTick>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	1ad3      	subs	r3, r2, r3
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d302      	bcc.n	800fe9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d113      	bne.n	800fec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fea0:	f043 0220 	orr.w	r2, r3, #32
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2220      	movs	r2, #32
 800feac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2200      	movs	r2, #0
 800febc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800fec0:	2301      	movs	r3, #1
 800fec2:	e007      	b.n	800fed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	699b      	ldr	r3, [r3, #24]
 800feca:	f003 0320 	and.w	r3, r3, #32
 800fece:	2b20      	cmp	r3, #32
 800fed0:	d1cf      	bne.n	800fe72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800fee8:	e055      	b.n	800ff96 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	68b9      	ldr	r1, [r7, #8]
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f000 f860 	bl	800ffb4 <I2C_IsAcknowledgeFailed>
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d001      	beq.n	800fefe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800fefa:	2301      	movs	r3, #1
 800fefc:	e053      	b.n	800ffa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	699b      	ldr	r3, [r3, #24]
 800ff04:	f003 0320 	and.w	r3, r3, #32
 800ff08:	2b20      	cmp	r3, #32
 800ff0a:	d129      	bne.n	800ff60 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	699b      	ldr	r3, [r3, #24]
 800ff12:	f003 0304 	and.w	r3, r3, #4
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d105      	bne.n	800ff26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e03f      	b.n	800ffa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2220      	movs	r2, #32
 800ff2c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	6859      	ldr	r1, [r3, #4]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	4b1d      	ldr	r3, [pc, #116]	; (800ffb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800ff3a:	400b      	ands	r3, r1
 800ff3c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2220      	movs	r2, #32
 800ff48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e022      	b.n	800ffa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff60:	f7fc f816 	bl	800bf90 <HAL_GetTick>
 800ff64:	4602      	mov	r2, r0
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d302      	bcc.n	800ff76 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d10f      	bne.n	800ff96 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff7a:	f043 0220 	orr.w	r2, r3, #32
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2220      	movs	r2, #32
 800ff86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	e007      	b.n	800ffa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	699b      	ldr	r3, [r3, #24]
 800ff9c:	f003 0304 	and.w	r3, r3, #4
 800ffa0:	2b04      	cmp	r3, #4
 800ffa2:	d1a2      	bne.n	800feea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	fe00e800 	.word	0xfe00e800

0800ffb4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	699b      	ldr	r3, [r3, #24]
 800ffc6:	f003 0310 	and.w	r3, r3, #16
 800ffca:	2b10      	cmp	r3, #16
 800ffcc:	d151      	bne.n	8010072 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ffce:	e022      	b.n	8010016 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffd6:	d01e      	beq.n	8010016 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffd8:	f7fb ffda 	bl	800bf90 <HAL_GetTick>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d302      	bcc.n	800ffee <I2C_IsAcknowledgeFailed+0x3a>
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d113      	bne.n	8010016 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fff2:	f043 0220 	orr.w	r2, r3, #32
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2220      	movs	r2, #32
 800fffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2200      	movs	r2, #0
 801000e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8010012:	2301      	movs	r3, #1
 8010014:	e02e      	b.n	8010074 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	699b      	ldr	r3, [r3, #24]
 801001c:	f003 0320 	and.w	r3, r3, #32
 8010020:	2b20      	cmp	r3, #32
 8010022:	d1d5      	bne.n	800ffd0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2210      	movs	r2, #16
 801002a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2220      	movs	r2, #32
 8010032:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f7ff fe71 	bl	800fd1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	6859      	ldr	r1, [r3, #4]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	4b0d      	ldr	r3, [pc, #52]	; (801007c <I2C_IsAcknowledgeFailed+0xc8>)
 8010046:	400b      	ands	r3, r1
 8010048:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801004e:	f043 0204 	orr.w	r2, r3, #4
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2220      	movs	r2, #32
 801005a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2200      	movs	r2, #0
 801006a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	e000      	b.n	8010074 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8010072:	2300      	movs	r3, #0
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	fe00e800 	.word	0xfe00e800

08010080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8010080:	b480      	push	{r7}
 8010082:	b085      	sub	sp, #20
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	607b      	str	r3, [r7, #4]
 801008a:	460b      	mov	r3, r1
 801008c:	817b      	strh	r3, [r7, #10]
 801008e:	4613      	mov	r3, r2
 8010090:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	685a      	ldr	r2, [r3, #4]
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	0d5b      	lsrs	r3, r3, #21
 801009c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80100a0:	4b0d      	ldr	r3, [pc, #52]	; (80100d8 <I2C_TransferConfig+0x58>)
 80100a2:	430b      	orrs	r3, r1
 80100a4:	43db      	mvns	r3, r3
 80100a6:	ea02 0103 	and.w	r1, r2, r3
 80100aa:	897b      	ldrh	r3, [r7, #10]
 80100ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80100b0:	7a7b      	ldrb	r3, [r7, #9]
 80100b2:	041b      	lsls	r3, r3, #16
 80100b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80100b8:	431a      	orrs	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	431a      	orrs	r2, r3
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	431a      	orrs	r2, r3
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	430a      	orrs	r2, r1
 80100c8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80100ca:	bf00      	nop
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	03ff63ff 	.word	0x03ff63ff

080100dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	2b20      	cmp	r3, #32
 80100f0:	d138      	bne.n	8010164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d101      	bne.n	8010100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80100fc:	2302      	movs	r3, #2
 80100fe:	e032      	b.n	8010166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2224      	movs	r2, #36	; 0x24
 801010c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f022 0201 	bic.w	r2, r2, #1
 801011e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801012e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6819      	ldr	r1, [r3, #0]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	430a      	orrs	r2, r1
 801013e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f042 0201 	orr.w	r2, r2, #1
 801014e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2220      	movs	r2, #32
 8010154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010160:	2300      	movs	r3, #0
 8010162:	e000      	b.n	8010166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010164:	2302      	movs	r3, #2
  }
}
 8010166:	4618      	mov	r0, r3
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr

08010172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010172:	b480      	push	{r7}
 8010174:	b085      	sub	sp, #20
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b20      	cmp	r3, #32
 8010186:	d139      	bne.n	80101fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801018e:	2b01      	cmp	r3, #1
 8010190:	d101      	bne.n	8010196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010192:	2302      	movs	r3, #2
 8010194:	e033      	b.n	80101fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2201      	movs	r2, #1
 801019a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2224      	movs	r2, #36	; 0x24
 80101a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f022 0201 	bic.w	r2, r2, #1
 80101b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80101c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	021b      	lsls	r3, r3, #8
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	4313      	orrs	r3, r2
 80101ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f042 0201 	orr.w	r2, r2, #1
 80101e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2220      	movs	r2, #32
 80101ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	e000      	b.n	80101fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80101fc:	2302      	movs	r3, #2
  }
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3714      	adds	r7, #20
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
	...

0801020c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8010212:	2300      	movs	r3, #0
 8010214:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8010216:	4b49      	ldr	r3, [pc, #292]	; (801033c <HAL_RCC_DeInit+0x130>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a48      	ldr	r2, [pc, #288]	; (801033c <HAL_RCC_DeInit+0x130>)
 801021c:	f043 0301 	orr.w	r3, r3, #1
 8010220:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8010222:	f7fb feb5 	bl	800bf90 <HAL_GetTick>
 8010226:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8010228:	e008      	b.n	801023c <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801022a:	f7fb feb1 	bl	800bf90 <HAL_GetTick>
 801022e:	4602      	mov	r2, r0
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	2b02      	cmp	r3, #2
 8010236:	d901      	bls.n	801023c <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8010238:	2303      	movs	r3, #3
 801023a:	e07b      	b.n	8010334 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 801023c:	4b3f      	ldr	r3, [pc, #252]	; (801033c <HAL_RCC_DeInit+0x130>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f003 0302 	and.w	r3, r3, #2
 8010244:	2b00      	cmp	r3, #0
 8010246:	d0f0      	beq.n	801022a <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8010248:	4b3c      	ldr	r3, [pc, #240]	; (801033c <HAL_RCC_DeInit+0x130>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010250:	4a3a      	ldr	r2, [pc, #232]	; (801033c <HAL_RCC_DeInit+0x130>)
 8010252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010256:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8010258:	4b38      	ldr	r3, [pc, #224]	; (801033c <HAL_RCC_DeInit+0x130>)
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	4937      	ldr	r1, [pc, #220]	; (801033c <HAL_RCC_DeInit+0x130>)
 801025e:	4b38      	ldr	r3, [pc, #224]	; (8010340 <HAL_RCC_DeInit+0x134>)
 8010260:	4013      	ands	r3, r2
 8010262:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8010264:	f7fb fe94 	bl	800bf90 <HAL_GetTick>
 8010268:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 801026a:	e00a      	b.n	8010282 <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801026c:	f7fb fe90 	bl	800bf90 <HAL_GetTick>
 8010270:	4602      	mov	r2, r0
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	f241 3288 	movw	r2, #5000	; 0x1388
 801027a:	4293      	cmp	r3, r2
 801027c:	d901      	bls.n	8010282 <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 801027e:	2303      	movs	r3, #3
 8010280:	e058      	b.n	8010334 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8010282:	4b2e      	ldr	r3, [pc, #184]	; (801033c <HAL_RCC_DeInit+0x130>)
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	f003 030c 	and.w	r3, r3, #12
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1ee      	bne.n	801026c <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 801028e:	4b2d      	ldr	r3, [pc, #180]	; (8010344 <HAL_RCC_DeInit+0x138>)
 8010290:	4a2d      	ldr	r2, [pc, #180]	; (8010348 <HAL_RCC_DeInit+0x13c>)
 8010292:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8010294:	4b2d      	ldr	r3, [pc, #180]	; (801034c <HAL_RCC_DeInit+0x140>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4618      	mov	r0, r3
 801029a:	f7fb fe35 	bl	800bf08 <HAL_InitTick>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 80102a4:	2301      	movs	r3, #1
 80102a6:	e045      	b.n	8010334 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 80102a8:	4b24      	ldr	r3, [pc, #144]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4a23      	ldr	r2, [pc, #140]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80102b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80102b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80102b8:	4b20      	ldr	r3, [pc, #128]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a1f      	ldr	r2, [pc, #124]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80102c2:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80102c4:	f7fb fe64 	bl	800bf90 <HAL_GetTick>
 80102c8:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80102ca:	e008      	b.n	80102de <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80102cc:	f7fb fe60 	bl	800bf90 <HAL_GetTick>
 80102d0:	4602      	mov	r2, r0
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	d901      	bls.n	80102de <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 80102da:	2303      	movs	r3, #3
 80102dc:	e02a      	b.n	8010334 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80102de:	4b17      	ldr	r3, [pc, #92]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1f0      	bne.n	80102cc <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80102ea:	4b14      	ldr	r3, [pc, #80]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102ec:	2200      	movs	r2, #0
 80102ee:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 80102f0:	4b12      	ldr	r3, [pc, #72]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102f2:	2200      	movs	r2, #0
 80102f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 80102f6:	4b11      	ldr	r3, [pc, #68]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80102fc:	4b0f      	ldr	r3, [pc, #60]	; (801033c <HAL_RCC_DeInit+0x130>)
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	4a0e      	ldr	r2, [pc, #56]	; (801033c <HAL_RCC_DeInit+0x130>)
 8010302:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8010306:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8010308:	4b0c      	ldr	r3, [pc, #48]	; (801033c <HAL_RCC_DeInit+0x130>)
 801030a:	2200      	movs	r2, #0
 801030c:	609a      	str	r2, [r3, #8]
 801030e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010312:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	fa93 f3a3 	rbit	r3, r3
 801031a:	607b      	str	r3, [r7, #4]
  return result;
 801031c:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 801031e:	fab3 f383 	clz	r3, r3
 8010322:	b2db      	uxtb	r3, r3
 8010324:	461a      	mov	r2, r3
 8010326:	4b0a      	ldr	r3, [pc, #40]	; (8010350 <HAL_RCC_DeInit+0x144>)
 8010328:	4413      	add	r3, r2
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	461a      	mov	r2, r3
 801032e:	2301      	movs	r3, #1
 8010330:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8010332:	2300      	movs	r3, #0
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	40021000 	.word	0x40021000
 8010340:	f8ffc00c 	.word	0xf8ffc00c
 8010344:	20000000 	.word	0x20000000
 8010348:	007a1200 	.word	0x007a1200
 801034c:	20000004 	.word	0x20000004
 8010350:	10908120 	.word	0x10908120

08010354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 801035a:	af00      	add	r7, sp, #0
 801035c:	1d3b      	adds	r3, r7, #4
 801035e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010360:	1d3b      	adds	r3, r7, #4
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d102      	bne.n	801036e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8010368:	2301      	movs	r3, #1
 801036a:	f000 bf01 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801036e:	1d3b      	adds	r3, r7, #4
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f003 0301 	and.w	r3, r3, #1
 8010378:	2b00      	cmp	r3, #0
 801037a:	f000 8160 	beq.w	801063e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 801037e:	4bae      	ldr	r3, [pc, #696]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	f003 030c 	and.w	r3, r3, #12
 8010386:	2b04      	cmp	r3, #4
 8010388:	d00c      	beq.n	80103a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801038a:	4bab      	ldr	r3, [pc, #684]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	f003 030c 	and.w	r3, r3, #12
 8010392:	2b08      	cmp	r3, #8
 8010394:	d159      	bne.n	801044a <HAL_RCC_OscConfig+0xf6>
 8010396:	4ba8      	ldr	r3, [pc, #672]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 801039e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103a2:	d152      	bne.n	801044a <HAL_RCC_OscConfig+0xf6>
 80103a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80103a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80103b0:	fa93 f3a3 	rbit	r3, r3
 80103b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80103b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80103bc:	fab3 f383 	clz	r3, r3
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	095b      	lsrs	r3, r3, #5
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	f043 0301 	orr.w	r3, r3, #1
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d102      	bne.n	80103d6 <HAL_RCC_OscConfig+0x82>
 80103d0:	4b99      	ldr	r3, [pc, #612]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	e015      	b.n	8010402 <HAL_RCC_OscConfig+0xae>
 80103d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80103da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80103e2:	fa93 f3a3 	rbit	r3, r3
 80103e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80103ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80103ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80103f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80103f6:	fa93 f3a3 	rbit	r3, r3
 80103fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80103fe:	4b8e      	ldr	r3, [pc, #568]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010406:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 801040a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801040e:	fa92 f2a2 	rbit	r2, r2
 8010412:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8010416:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801041a:	fab2 f282 	clz	r2, r2
 801041e:	b2d2      	uxtb	r2, r2
 8010420:	f042 0220 	orr.w	r2, r2, #32
 8010424:	b2d2      	uxtb	r2, r2
 8010426:	f002 021f 	and.w	r2, r2, #31
 801042a:	2101      	movs	r1, #1
 801042c:	fa01 f202 	lsl.w	r2, r1, r2
 8010430:	4013      	ands	r3, r2
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 8102 	beq.w	801063c <HAL_RCC_OscConfig+0x2e8>
 8010438:	1d3b      	adds	r3, r7, #4
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	f040 80fc 	bne.w	801063c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8010444:	2301      	movs	r3, #1
 8010446:	f000 be93 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801044a:	1d3b      	adds	r3, r7, #4
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010454:	d106      	bne.n	8010464 <HAL_RCC_OscConfig+0x110>
 8010456:	4b78      	ldr	r3, [pc, #480]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4a77      	ldr	r2, [pc, #476]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 801045c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010460:	6013      	str	r3, [r2, #0]
 8010462:	e030      	b.n	80104c6 <HAL_RCC_OscConfig+0x172>
 8010464:	1d3b      	adds	r3, r7, #4
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10c      	bne.n	8010488 <HAL_RCC_OscConfig+0x134>
 801046e:	4b72      	ldr	r3, [pc, #456]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4a71      	ldr	r2, [pc, #452]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010478:	6013      	str	r3, [r2, #0]
 801047a:	4b6f      	ldr	r3, [pc, #444]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4a6e      	ldr	r2, [pc, #440]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	e01e      	b.n	80104c6 <HAL_RCC_OscConfig+0x172>
 8010488:	1d3b      	adds	r3, r7, #4
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010492:	d10c      	bne.n	80104ae <HAL_RCC_OscConfig+0x15a>
 8010494:	4b68      	ldr	r3, [pc, #416]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a67      	ldr	r2, [pc, #412]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 801049a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801049e:	6013      	str	r3, [r2, #0]
 80104a0:	4b65      	ldr	r3, [pc, #404]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a64      	ldr	r2, [pc, #400]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80104a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104aa:	6013      	str	r3, [r2, #0]
 80104ac:	e00b      	b.n	80104c6 <HAL_RCC_OscConfig+0x172>
 80104ae:	4b62      	ldr	r3, [pc, #392]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	4a61      	ldr	r2, [pc, #388]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80104b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104b8:	6013      	str	r3, [r2, #0]
 80104ba:	4b5f      	ldr	r3, [pc, #380]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4a5e      	ldr	r2, [pc, #376]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80104c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80104c4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80104c6:	1d3b      	adds	r3, r7, #4
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d059      	beq.n	8010584 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104d0:	f7fb fd5e 	bl	800bf90 <HAL_GetTick>
 80104d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80104d8:	e00a      	b.n	80104f0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80104da:	f7fb fd59 	bl	800bf90 <HAL_GetTick>
 80104de:	4602      	mov	r2, r0
 80104e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	2b64      	cmp	r3, #100	; 0x64
 80104e8:	d902      	bls.n	80104f0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80104ea:	2303      	movs	r3, #3
 80104ec:	f000 be40 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>
 80104f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80104f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80104fc:	fa93 f3a3 	rbit	r3, r3
 8010500:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8010504:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010508:	fab3 f383 	clz	r3, r3
 801050c:	b2db      	uxtb	r3, r3
 801050e:	095b      	lsrs	r3, r3, #5
 8010510:	b2db      	uxtb	r3, r3
 8010512:	f043 0301 	orr.w	r3, r3, #1
 8010516:	b2db      	uxtb	r3, r3
 8010518:	2b01      	cmp	r3, #1
 801051a:	d102      	bne.n	8010522 <HAL_RCC_OscConfig+0x1ce>
 801051c:	4b46      	ldr	r3, [pc, #280]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	e015      	b.n	801054e <HAL_RCC_OscConfig+0x1fa>
 8010522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010526:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801052a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801052e:	fa93 f3a3 	rbit	r3, r3
 8010532:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8010536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801053a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 801053e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8010542:	fa93 f3a3 	rbit	r3, r3
 8010546:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 801054a:	4b3b      	ldr	r3, [pc, #236]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 801054c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801054e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010552:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8010556:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801055a:	fa92 f2a2 	rbit	r2, r2
 801055e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8010562:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8010566:	fab2 f282 	clz	r2, r2
 801056a:	b2d2      	uxtb	r2, r2
 801056c:	f042 0220 	orr.w	r2, r2, #32
 8010570:	b2d2      	uxtb	r2, r2
 8010572:	f002 021f 	and.w	r2, r2, #31
 8010576:	2101      	movs	r1, #1
 8010578:	fa01 f202 	lsl.w	r2, r1, r2
 801057c:	4013      	ands	r3, r2
 801057e:	2b00      	cmp	r3, #0
 8010580:	d0ab      	beq.n	80104da <HAL_RCC_OscConfig+0x186>
 8010582:	e05c      	b.n	801063e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010584:	f7fb fd04 	bl	800bf90 <HAL_GetTick>
 8010588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801058c:	e00a      	b.n	80105a4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801058e:	f7fb fcff 	bl	800bf90 <HAL_GetTick>
 8010592:	4602      	mov	r2, r0
 8010594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	2b64      	cmp	r3, #100	; 0x64
 801059c:	d902      	bls.n	80105a4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 801059e:	2303      	movs	r3, #3
 80105a0:	f000 bde6 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>
 80105a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80105a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80105b0:	fa93 f3a3 	rbit	r3, r3
 80105b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80105b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80105bc:	fab3 f383 	clz	r3, r3
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	095b      	lsrs	r3, r3, #5
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	f043 0301 	orr.w	r3, r3, #1
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d102      	bne.n	80105d6 <HAL_RCC_OscConfig+0x282>
 80105d0:	4b19      	ldr	r3, [pc, #100]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	e015      	b.n	8010602 <HAL_RCC_OscConfig+0x2ae>
 80105d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80105da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80105de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80105e2:	fa93 f3a3 	rbit	r3, r3
 80105e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80105ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80105ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80105f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80105f6:	fa93 f3a3 	rbit	r3, r3
 80105fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80105fe:	4b0e      	ldr	r3, [pc, #56]	; (8010638 <HAL_RCC_OscConfig+0x2e4>)
 8010600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010606:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 801060a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801060e:	fa92 f2a2 	rbit	r2, r2
 8010612:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8010616:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801061a:	fab2 f282 	clz	r2, r2
 801061e:	b2d2      	uxtb	r2, r2
 8010620:	f042 0220 	orr.w	r2, r2, #32
 8010624:	b2d2      	uxtb	r2, r2
 8010626:	f002 021f 	and.w	r2, r2, #31
 801062a:	2101      	movs	r1, #1
 801062c:	fa01 f202 	lsl.w	r2, r1, r2
 8010630:	4013      	ands	r3, r2
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1ab      	bne.n	801058e <HAL_RCC_OscConfig+0x23a>
 8010636:	e002      	b.n	801063e <HAL_RCC_OscConfig+0x2ea>
 8010638:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801063c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801063e:	1d3b      	adds	r3, r7, #4
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f003 0302 	and.w	r3, r3, #2
 8010648:	2b00      	cmp	r3, #0
 801064a:	f000 8170 	beq.w	801092e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801064e:	4bd0      	ldr	r3, [pc, #832]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	f003 030c 	and.w	r3, r3, #12
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00c      	beq.n	8010674 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801065a:	4bcd      	ldr	r3, [pc, #820]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	f003 030c 	and.w	r3, r3, #12
 8010662:	2b08      	cmp	r3, #8
 8010664:	d16d      	bne.n	8010742 <HAL_RCC_OscConfig+0x3ee>
 8010666:	4bca      	ldr	r3, [pc, #808]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 801066e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010672:	d166      	bne.n	8010742 <HAL_RCC_OscConfig+0x3ee>
 8010674:	2302      	movs	r3, #2
 8010676:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801067a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801067e:	fa93 f3a3 	rbit	r3, r3
 8010682:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8010686:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801068a:	fab3 f383 	clz	r3, r3
 801068e:	b2db      	uxtb	r3, r3
 8010690:	095b      	lsrs	r3, r3, #5
 8010692:	b2db      	uxtb	r3, r3
 8010694:	f043 0301 	orr.w	r3, r3, #1
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b01      	cmp	r3, #1
 801069c:	d102      	bne.n	80106a4 <HAL_RCC_OscConfig+0x350>
 801069e:	4bbc      	ldr	r3, [pc, #752]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	e013      	b.n	80106cc <HAL_RCC_OscConfig+0x378>
 80106a4:	2302      	movs	r3, #2
 80106a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80106aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80106ae:	fa93 f3a3 	rbit	r3, r3
 80106b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80106b6:	2302      	movs	r3, #2
 80106b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80106bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80106c0:	fa93 f3a3 	rbit	r3, r3
 80106c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80106c8:	4bb1      	ldr	r3, [pc, #708]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 80106ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106cc:	2202      	movs	r2, #2
 80106ce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80106d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80106d6:	fa92 f2a2 	rbit	r2, r2
 80106da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80106de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80106e2:	fab2 f282 	clz	r2, r2
 80106e6:	b2d2      	uxtb	r2, r2
 80106e8:	f042 0220 	orr.w	r2, r2, #32
 80106ec:	b2d2      	uxtb	r2, r2
 80106ee:	f002 021f 	and.w	r2, r2, #31
 80106f2:	2101      	movs	r1, #1
 80106f4:	fa01 f202 	lsl.w	r2, r1, r2
 80106f8:	4013      	ands	r3, r2
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d007      	beq.n	801070e <HAL_RCC_OscConfig+0x3ba>
 80106fe:	1d3b      	adds	r3, r7, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d002      	beq.n	801070e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8010708:	2301      	movs	r3, #1
 801070a:	f000 bd31 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801070e:	4ba0      	ldr	r3, [pc, #640]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010716:	1d3b      	adds	r3, r7, #4
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	691b      	ldr	r3, [r3, #16]
 801071c:	21f8      	movs	r1, #248	; 0xf8
 801071e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010722:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8010726:	fa91 f1a1 	rbit	r1, r1
 801072a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 801072e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8010732:	fab1 f181 	clz	r1, r1
 8010736:	b2c9      	uxtb	r1, r1
 8010738:	408b      	lsls	r3, r1
 801073a:	4995      	ldr	r1, [pc, #596]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 801073c:	4313      	orrs	r3, r2
 801073e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010740:	e0f5      	b.n	801092e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010742:	1d3b      	adds	r3, r7, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	f000 8085 	beq.w	8010858 <HAL_RCC_OscConfig+0x504>
 801074e:	2301      	movs	r3, #1
 8010750:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010754:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8010758:	fa93 f3a3 	rbit	r3, r3
 801075c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8010760:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010764:	fab3 f383 	clz	r3, r3
 8010768:	b2db      	uxtb	r3, r3
 801076a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801076e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	461a      	mov	r2, r3
 8010776:	2301      	movs	r3, #1
 8010778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801077a:	f7fb fc09 	bl	800bf90 <HAL_GetTick>
 801077e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010782:	e00a      	b.n	801079a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010784:	f7fb fc04 	bl	800bf90 <HAL_GetTick>
 8010788:	4602      	mov	r2, r0
 801078a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	2b02      	cmp	r3, #2
 8010792:	d902      	bls.n	801079a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8010794:	2303      	movs	r3, #3
 8010796:	f000 bceb 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>
 801079a:	2302      	movs	r3, #2
 801079c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80107a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80107a4:	fa93 f3a3 	rbit	r3, r3
 80107a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80107ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107b0:	fab3 f383 	clz	r3, r3
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	095b      	lsrs	r3, r3, #5
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	f043 0301 	orr.w	r3, r3, #1
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d102      	bne.n	80107ca <HAL_RCC_OscConfig+0x476>
 80107c4:	4b72      	ldr	r3, [pc, #456]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	e013      	b.n	80107f2 <HAL_RCC_OscConfig+0x49e>
 80107ca:	2302      	movs	r3, #2
 80107cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80107d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80107d4:	fa93 f3a3 	rbit	r3, r3
 80107d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80107dc:	2302      	movs	r3, #2
 80107de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80107e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80107e6:	fa93 f3a3 	rbit	r3, r3
 80107ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80107ee:	4b68      	ldr	r3, [pc, #416]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 80107f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f2:	2202      	movs	r2, #2
 80107f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80107f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80107fc:	fa92 f2a2 	rbit	r2, r2
 8010800:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8010804:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010808:	fab2 f282 	clz	r2, r2
 801080c:	b2d2      	uxtb	r2, r2
 801080e:	f042 0220 	orr.w	r2, r2, #32
 8010812:	b2d2      	uxtb	r2, r2
 8010814:	f002 021f 	and.w	r2, r2, #31
 8010818:	2101      	movs	r1, #1
 801081a:	fa01 f202 	lsl.w	r2, r1, r2
 801081e:	4013      	ands	r3, r2
 8010820:	2b00      	cmp	r3, #0
 8010822:	d0af      	beq.n	8010784 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010824:	4b5a      	ldr	r3, [pc, #360]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801082c:	1d3b      	adds	r3, r7, #4
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	691b      	ldr	r3, [r3, #16]
 8010832:	21f8      	movs	r1, #248	; 0xf8
 8010834:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010838:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 801083c:	fa91 f1a1 	rbit	r1, r1
 8010840:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8010844:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8010848:	fab1 f181 	clz	r1, r1
 801084c:	b2c9      	uxtb	r1, r1
 801084e:	408b      	lsls	r3, r1
 8010850:	494f      	ldr	r1, [pc, #316]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 8010852:	4313      	orrs	r3, r2
 8010854:	600b      	str	r3, [r1, #0]
 8010856:	e06a      	b.n	801092e <HAL_RCC_OscConfig+0x5da>
 8010858:	2301      	movs	r3, #1
 801085a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801085e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010862:	fa93 f3a3 	rbit	r3, r3
 8010866:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 801086a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801086e:	fab3 f383 	clz	r3, r3
 8010872:	b2db      	uxtb	r3, r3
 8010874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8010878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	461a      	mov	r2, r3
 8010880:	2300      	movs	r3, #0
 8010882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010884:	f7fb fb84 	bl	800bf90 <HAL_GetTick>
 8010888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801088c:	e00a      	b.n	80108a4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801088e:	f7fb fb7f 	bl	800bf90 <HAL_GetTick>
 8010892:	4602      	mov	r2, r0
 8010894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	2b02      	cmp	r3, #2
 801089c:	d902      	bls.n	80108a4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 801089e:	2303      	movs	r3, #3
 80108a0:	f000 bc66 	b.w	8011170 <HAL_RCC_OscConfig+0xe1c>
 80108a4:	2302      	movs	r3, #2
 80108a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80108aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80108ae:	fa93 f3a3 	rbit	r3, r3
 80108b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80108b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80108ba:	fab3 f383 	clz	r3, r3
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	095b      	lsrs	r3, r3, #5
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	f043 0301 	orr.w	r3, r3, #1
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d102      	bne.n	80108d4 <HAL_RCC_OscConfig+0x580>
 80108ce:	4b30      	ldr	r3, [pc, #192]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	e013      	b.n	80108fc <HAL_RCC_OscConfig+0x5a8>
 80108d4:	2302      	movs	r3, #2
 80108d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80108da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80108de:	fa93 f3a3 	rbit	r3, r3
 80108e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80108e6:	2302      	movs	r3, #2
 80108e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80108ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80108f0:	fa93 f3a3 	rbit	r3, r3
 80108f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80108f8:	4b25      	ldr	r3, [pc, #148]	; (8010990 <HAL_RCC_OscConfig+0x63c>)
 80108fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fc:	2202      	movs	r2, #2
 80108fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8010902:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010906:	fa92 f2a2 	rbit	r2, r2
 801090a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 801090e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010912:	fab2 f282 	clz	r2, r2
 8010916:	b2d2      	uxtb	r2, r2
 8010918:	f042 0220 	orr.w	r2, r2, #32
 801091c:	b2d2      	uxtb	r2, r2
 801091e:	f002 021f 	and.w	r2, r2, #31
 8010922:	2101      	movs	r1, #1
 8010924:	fa01 f202 	lsl.w	r2, r1, r2
 8010928:	4013      	ands	r3, r2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d1af      	bne.n	801088e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801092e:	1d3b      	adds	r3, r7, #4
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f003 0308 	and.w	r3, r3, #8
 8010938:	2b00      	cmp	r3, #0
 801093a:	f000 80da 	beq.w	8010af2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801093e:	1d3b      	adds	r3, r7, #4
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	695b      	ldr	r3, [r3, #20]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d069      	beq.n	8010a1c <HAL_RCC_OscConfig+0x6c8>
 8010948:	2301      	movs	r3, #1
 801094a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801094e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010952:	fa93 f3a3 	rbit	r3, r3
 8010956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 801095a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801095e:	fab3 f383 	clz	r3, r3
 8010962:	b2db      	uxtb	r3, r3
 8010964:	461a      	mov	r2, r3
 8010966:	4b0b      	ldr	r3, [pc, #44]	; (8010994 <HAL_RCC_OscConfig+0x640>)
 8010968:	4413      	add	r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	461a      	mov	r2, r3
 801096e:	2301      	movs	r3, #1
 8010970:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010972:	f7fb fb0d 	bl	800bf90 <HAL_GetTick>
 8010976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801097a:	e00d      	b.n	8010998 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801097c:	f7fb fb08 	bl	800bf90 <HAL_GetTick>
 8010980:	4602      	mov	r2, r0
 8010982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010986:	1ad3      	subs	r3, r2, r3
 8010988:	2b02      	cmp	r3, #2
 801098a:	d905      	bls.n	8010998 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 801098c:	2303      	movs	r3, #3
 801098e:	e3ef      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8010990:	40021000 	.word	0x40021000
 8010994:	10908120 	.word	0x10908120
 8010998:	2302      	movs	r3, #2
 801099a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801099e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80109a2:	fa93 f2a3 	rbit	r2, r3
 80109a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80109b0:	2202      	movs	r2, #2
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	fa93 f2a3 	rbit	r2, r3
 80109be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80109c2:	601a      	str	r2, [r3, #0]
 80109c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80109c8:	2202      	movs	r2, #2
 80109ca:	601a      	str	r2, [r3, #0]
 80109cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	fa93 f2a3 	rbit	r2, r3
 80109d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80109da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80109dc:	4ba4      	ldr	r3, [pc, #656]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 80109de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80109e4:	2102      	movs	r1, #2
 80109e6:	6019      	str	r1, [r3, #0]
 80109e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	fa93 f1a3 	rbit	r1, r3
 80109f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80109f6:	6019      	str	r1, [r3, #0]
  return result;
 80109f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	fab3 f383 	clz	r3, r3
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	f003 031f 	and.w	r3, r3, #31
 8010a0e:	2101      	movs	r1, #1
 8010a10:	fa01 f303 	lsl.w	r3, r1, r3
 8010a14:	4013      	ands	r3, r2
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d0b0      	beq.n	801097c <HAL_RCC_OscConfig+0x628>
 8010a1a:	e06a      	b.n	8010af2 <HAL_RCC_OscConfig+0x79e>
 8010a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8010a20:	2201      	movs	r2, #1
 8010a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010a24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	fa93 f2a3 	rbit	r2, r3
 8010a2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010a32:	601a      	str	r2, [r3, #0]
  return result;
 8010a34:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8010a38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010a3a:	fab3 f383 	clz	r3, r3
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	461a      	mov	r2, r3
 8010a42:	4b8c      	ldr	r3, [pc, #560]	; (8010c74 <HAL_RCC_OscConfig+0x920>)
 8010a44:	4413      	add	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	461a      	mov	r2, r3
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010a4e:	f7fb fa9f 	bl	800bf90 <HAL_GetTick>
 8010a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010a56:	e009      	b.n	8010a6c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010a58:	f7fb fa9a 	bl	800bf90 <HAL_GetTick>
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d901      	bls.n	8010a6c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	e381      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8010a6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010a70:	2202      	movs	r2, #2
 8010a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010a74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	fa93 f2a3 	rbit	r2, r3
 8010a7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8010a82:	601a      	str	r2, [r3, #0]
 8010a84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010a88:	2202      	movs	r2, #2
 8010a8a:	601a      	str	r2, [r3, #0]
 8010a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	fa93 f2a3 	rbit	r2, r3
 8010a96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8010a9a:	601a      	str	r2, [r3, #0]
 8010a9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	fa93 f2a3 	rbit	r2, r3
 8010aae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010ab2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ab4:	4b6e      	ldr	r3, [pc, #440]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ab8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010abc:	2102      	movs	r1, #2
 8010abe:	6019      	str	r1, [r3, #0]
 8010ac0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	fa93 f1a3 	rbit	r1, r3
 8010aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010ace:	6019      	str	r1, [r3, #0]
  return result;
 8010ad0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	fab3 f383 	clz	r3, r3
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f003 031f 	and.w	r3, r3, #31
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8010aec:	4013      	ands	r3, r2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1b2      	bne.n	8010a58 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010af2:	1d3b      	adds	r3, r7, #4
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f003 0304 	and.w	r3, r3, #4
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	f000 8157 	beq.w	8010db0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010b02:	2300      	movs	r3, #0
 8010b04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010b08:	4b59      	ldr	r3, [pc, #356]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010b0a:	69db      	ldr	r3, [r3, #28]
 8010b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d112      	bne.n	8010b3a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010b14:	4b56      	ldr	r3, [pc, #344]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010b16:	69db      	ldr	r3, [r3, #28]
 8010b18:	4a55      	ldr	r2, [pc, #340]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b1e:	61d3      	str	r3, [r2, #28]
 8010b20:	4b53      	ldr	r3, [pc, #332]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010b22:	69db      	ldr	r3, [r3, #28]
 8010b24:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8010b28:	f107 030c 	add.w	r3, r7, #12
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	f107 030c 	add.w	r3, r7, #12
 8010b32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8010b34:	2301      	movs	r3, #1
 8010b36:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b3a:	4b4f      	ldr	r3, [pc, #316]	; (8010c78 <HAL_RCC_OscConfig+0x924>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d11a      	bne.n	8010b7c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010b46:	4b4c      	ldr	r3, [pc, #304]	; (8010c78 <HAL_RCC_OscConfig+0x924>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a4b      	ldr	r2, [pc, #300]	; (8010c78 <HAL_RCC_OscConfig+0x924>)
 8010b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010b52:	f7fb fa1d 	bl	800bf90 <HAL_GetTick>
 8010b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b5a:	e009      	b.n	8010b70 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010b5c:	f7fb fa18 	bl	800bf90 <HAL_GetTick>
 8010b60:	4602      	mov	r2, r0
 8010b62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	2b64      	cmp	r3, #100	; 0x64
 8010b6a:	d901      	bls.n	8010b70 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8010b6c:	2303      	movs	r3, #3
 8010b6e:	e2ff      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010b70:	4b41      	ldr	r3, [pc, #260]	; (8010c78 <HAL_RCC_OscConfig+0x924>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d0ef      	beq.n	8010b5c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b7c:	1d3b      	adds	r3, r7, #4
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d106      	bne.n	8010b94 <HAL_RCC_OscConfig+0x840>
 8010b86:	4b3a      	ldr	r3, [pc, #232]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010b88:	6a1b      	ldr	r3, [r3, #32]
 8010b8a:	4a39      	ldr	r2, [pc, #228]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010b8c:	f043 0301 	orr.w	r3, r3, #1
 8010b90:	6213      	str	r3, [r2, #32]
 8010b92:	e02f      	b.n	8010bf4 <HAL_RCC_OscConfig+0x8a0>
 8010b94:	1d3b      	adds	r3, r7, #4
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689b      	ldr	r3, [r3, #8]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d10c      	bne.n	8010bb8 <HAL_RCC_OscConfig+0x864>
 8010b9e:	4b34      	ldr	r3, [pc, #208]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010ba0:	6a1b      	ldr	r3, [r3, #32]
 8010ba2:	4a33      	ldr	r2, [pc, #204]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010ba4:	f023 0301 	bic.w	r3, r3, #1
 8010ba8:	6213      	str	r3, [r2, #32]
 8010baa:	4b31      	ldr	r3, [pc, #196]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	4a30      	ldr	r2, [pc, #192]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bb0:	f023 0304 	bic.w	r3, r3, #4
 8010bb4:	6213      	str	r3, [r2, #32]
 8010bb6:	e01d      	b.n	8010bf4 <HAL_RCC_OscConfig+0x8a0>
 8010bb8:	1d3b      	adds	r3, r7, #4
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	689b      	ldr	r3, [r3, #8]
 8010bbe:	2b05      	cmp	r3, #5
 8010bc0:	d10c      	bne.n	8010bdc <HAL_RCC_OscConfig+0x888>
 8010bc2:	4b2b      	ldr	r3, [pc, #172]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bc4:	6a1b      	ldr	r3, [r3, #32]
 8010bc6:	4a2a      	ldr	r2, [pc, #168]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bc8:	f043 0304 	orr.w	r3, r3, #4
 8010bcc:	6213      	str	r3, [r2, #32]
 8010bce:	4b28      	ldr	r3, [pc, #160]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	4a27      	ldr	r2, [pc, #156]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bd4:	f043 0301 	orr.w	r3, r3, #1
 8010bd8:	6213      	str	r3, [r2, #32]
 8010bda:	e00b      	b.n	8010bf4 <HAL_RCC_OscConfig+0x8a0>
 8010bdc:	4b24      	ldr	r3, [pc, #144]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bde:	6a1b      	ldr	r3, [r3, #32]
 8010be0:	4a23      	ldr	r2, [pc, #140]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010be2:	f023 0301 	bic.w	r3, r3, #1
 8010be6:	6213      	str	r3, [r2, #32]
 8010be8:	4b21      	ldr	r3, [pc, #132]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bea:	6a1b      	ldr	r3, [r3, #32]
 8010bec:	4a20      	ldr	r2, [pc, #128]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010bee:	f023 0304 	bic.w	r3, r3, #4
 8010bf2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010bf4:	1d3b      	adds	r3, r7, #4
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d06a      	beq.n	8010cd4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010bfe:	f7fb f9c7 	bl	800bf90 <HAL_GetTick>
 8010c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010c06:	e00b      	b.n	8010c20 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010c08:	f7fb f9c2 	bl	800bf90 <HAL_GetTick>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d901      	bls.n	8010c20 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8010c1c:	2303      	movs	r3, #3
 8010c1e:	e2a7      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8010c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010c24:	2202      	movs	r2, #2
 8010c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	fa93 f2a3 	rbit	r2, r3
 8010c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010c36:	601a      	str	r2, [r3, #0]
 8010c38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010c3c:	2202      	movs	r2, #2
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	fa93 f2a3 	rbit	r2, r3
 8010c4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010c4e:	601a      	str	r2, [r3, #0]
  return result;
 8010c50:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010c54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010c56:	fab3 f383 	clz	r3, r3
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	095b      	lsrs	r3, r3, #5
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	f043 0302 	orr.w	r3, r3, #2
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d108      	bne.n	8010c7c <HAL_RCC_OscConfig+0x928>
 8010c6a:	4b01      	ldr	r3, [pc, #4]	; (8010c70 <HAL_RCC_OscConfig+0x91c>)
 8010c6c:	6a1b      	ldr	r3, [r3, #32]
 8010c6e:	e013      	b.n	8010c98 <HAL_RCC_OscConfig+0x944>
 8010c70:	40021000 	.word	0x40021000
 8010c74:	10908120 	.word	0x10908120
 8010c78:	40007000 	.word	0x40007000
 8010c7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010c80:	2202      	movs	r2, #2
 8010c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010c84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	fa93 f2a3 	rbit	r2, r3
 8010c8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010c92:	601a      	str	r2, [r3, #0]
 8010c94:	4bc0      	ldr	r3, [pc, #768]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c98:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8010c9c:	2102      	movs	r1, #2
 8010c9e:	6011      	str	r1, [r2, #0]
 8010ca0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8010ca4:	6812      	ldr	r2, [r2, #0]
 8010ca6:	fa92 f1a2 	rbit	r1, r2
 8010caa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8010cae:	6011      	str	r1, [r2, #0]
  return result;
 8010cb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8010cb4:	6812      	ldr	r2, [r2, #0]
 8010cb6:	fab2 f282 	clz	r2, r2
 8010cba:	b2d2      	uxtb	r2, r2
 8010cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cc0:	b2d2      	uxtb	r2, r2
 8010cc2:	f002 021f 	and.w	r2, r2, #31
 8010cc6:	2101      	movs	r1, #1
 8010cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8010ccc:	4013      	ands	r3, r2
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d09a      	beq.n	8010c08 <HAL_RCC_OscConfig+0x8b4>
 8010cd2:	e063      	b.n	8010d9c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010cd4:	f7fb f95c 	bl	800bf90 <HAL_GetTick>
 8010cd8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010cdc:	e00b      	b.n	8010cf6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010cde:	f7fb f957 	bl	800bf90 <HAL_GetTick>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010ce8:	1ad3      	subs	r3, r2, r3
 8010cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d901      	bls.n	8010cf6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8010cf2:	2303      	movs	r3, #3
 8010cf4:	e23c      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8010cf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010cfa:	2202      	movs	r2, #2
 8010cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010cfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	fa93 f2a3 	rbit	r2, r3
 8010d08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010d0c:	601a      	str	r2, [r3, #0]
 8010d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010d12:	2202      	movs	r2, #2
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	fa93 f2a3 	rbit	r2, r3
 8010d20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010d24:	601a      	str	r2, [r3, #0]
  return result;
 8010d26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010d2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010d2c:	fab3 f383 	clz	r3, r3
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	095b      	lsrs	r3, r3, #5
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	f043 0302 	orr.w	r3, r3, #2
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	2b02      	cmp	r3, #2
 8010d3e:	d102      	bne.n	8010d46 <HAL_RCC_OscConfig+0x9f2>
 8010d40:	4b95      	ldr	r3, [pc, #596]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010d42:	6a1b      	ldr	r3, [r3, #32]
 8010d44:	e00d      	b.n	8010d62 <HAL_RCC_OscConfig+0xa0e>
 8010d46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010d4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	fa93 f2a3 	rbit	r2, r3
 8010d58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	4b8e      	ldr	r3, [pc, #568]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d62:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8010d66:	2102      	movs	r1, #2
 8010d68:	6011      	str	r1, [r2, #0]
 8010d6a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8010d6e:	6812      	ldr	r2, [r2, #0]
 8010d70:	fa92 f1a2 	rbit	r1, r2
 8010d74:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8010d78:	6011      	str	r1, [r2, #0]
  return result;
 8010d7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8010d7e:	6812      	ldr	r2, [r2, #0]
 8010d80:	fab2 f282 	clz	r2, r2
 8010d84:	b2d2      	uxtb	r2, r2
 8010d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d8a:	b2d2      	uxtb	r2, r2
 8010d8c:	f002 021f 	and.w	r2, r2, #31
 8010d90:	2101      	movs	r1, #1
 8010d92:	fa01 f202 	lsl.w	r2, r1, r2
 8010d96:	4013      	ands	r3, r2
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d1a0      	bne.n	8010cde <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010d9c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d105      	bne.n	8010db0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010da4:	4b7c      	ldr	r3, [pc, #496]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010da6:	69db      	ldr	r3, [r3, #28]
 8010da8:	4a7b      	ldr	r2, [pc, #492]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010dae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010db0:	1d3b      	adds	r3, r7, #4
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 81d9 	beq.w	801116e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010dbc:	4b76      	ldr	r3, [pc, #472]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	f003 030c 	and.w	r3, r3, #12
 8010dc4:	2b08      	cmp	r3, #8
 8010dc6:	f000 81a6 	beq.w	8011116 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010dca:	1d3b      	adds	r3, r7, #4
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	699b      	ldr	r3, [r3, #24]
 8010dd0:	2b02      	cmp	r3, #2
 8010dd2:	f040 811e 	bne.w	8011012 <HAL_RCC_OscConfig+0xcbe>
 8010dd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010dda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010de0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	fa93 f2a3 	rbit	r2, r3
 8010dea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010dee:	601a      	str	r2, [r3, #0]
  return result;
 8010df0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010df4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010df6:	fab3 f383 	clz	r3, r3
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8010e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	461a      	mov	r2, r3
 8010e08:	2300      	movs	r3, #0
 8010e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010e0c:	f7fb f8c0 	bl	800bf90 <HAL_GetTick>
 8010e10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010e14:	e009      	b.n	8010e2a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010e16:	f7fb f8bb 	bl	800bf90 <HAL_GetTick>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d901      	bls.n	8010e2a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8010e26:	2303      	movs	r3, #3
 8010e28:	e1a2      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8010e2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010e34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	fa93 f2a3 	rbit	r2, r3
 8010e3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010e42:	601a      	str	r2, [r3, #0]
  return result;
 8010e44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010e48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010e4a:	fab3 f383 	clz	r3, r3
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	095b      	lsrs	r3, r3, #5
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	f043 0301 	orr.w	r3, r3, #1
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d102      	bne.n	8010e64 <HAL_RCC_OscConfig+0xb10>
 8010e5e:	4b4e      	ldr	r3, [pc, #312]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	e01b      	b.n	8010e9c <HAL_RCC_OscConfig+0xb48>
 8010e64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010e6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	fa93 f2a3 	rbit	r2, r3
 8010e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010e7c:	601a      	str	r2, [r3, #0]
 8010e7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010e86:	601a      	str	r2, [r3, #0]
 8010e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	fa93 f2a3 	rbit	r2, r3
 8010e92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010e96:	601a      	str	r2, [r3, #0]
 8010e98:	4b3f      	ldr	r3, [pc, #252]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e9c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010ea0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8010ea4:	6011      	str	r1, [r2, #0]
 8010ea6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010eaa:	6812      	ldr	r2, [r2, #0]
 8010eac:	fa92 f1a2 	rbit	r1, r2
 8010eb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010eb4:	6011      	str	r1, [r2, #0]
  return result;
 8010eb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010eba:	6812      	ldr	r2, [r2, #0]
 8010ebc:	fab2 f282 	clz	r2, r2
 8010ec0:	b2d2      	uxtb	r2, r2
 8010ec2:	f042 0220 	orr.w	r2, r2, #32
 8010ec6:	b2d2      	uxtb	r2, r2
 8010ec8:	f002 021f 	and.w	r2, r2, #31
 8010ecc:	2101      	movs	r1, #1
 8010ece:	fa01 f202 	lsl.w	r2, r1, r2
 8010ed2:	4013      	ands	r3, r2
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d19e      	bne.n	8010e16 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010ed8:	4b2f      	ldr	r3, [pc, #188]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010edc:	f023 020f 	bic.w	r2, r3, #15
 8010ee0:	1d3b      	adds	r3, r7, #4
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee6:	492c      	ldr	r1, [pc, #176]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8010eec:	4b2a      	ldr	r3, [pc, #168]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8010ef4:	1d3b      	adds	r3, r7, #4
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	6a19      	ldr	r1, [r3, #32]
 8010efa:	1d3b      	adds	r3, r7, #4
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	69db      	ldr	r3, [r3, #28]
 8010f00:	430b      	orrs	r3, r1
 8010f02:	4925      	ldr	r1, [pc, #148]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010f04:	4313      	orrs	r3, r2
 8010f06:	604b      	str	r3, [r1, #4]
 8010f08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010f12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	fa93 f2a3 	rbit	r2, r3
 8010f1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010f20:	601a      	str	r2, [r3, #0]
  return result;
 8010f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010f26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010f28:	fab3 f383 	clz	r3, r3
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8010f32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	461a      	mov	r2, r3
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010f3e:	f7fb f827 	bl	800bf90 <HAL_GetTick>
 8010f42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010f46:	e009      	b.n	8010f5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010f48:	f7fb f822 	bl	800bf90 <HAL_GetTick>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	2b02      	cmp	r3, #2
 8010f56:	d901      	bls.n	8010f5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8010f58:	2303      	movs	r3, #3
 8010f5a:	e109      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8010f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010f66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	fa93 f2a3 	rbit	r2, r3
 8010f70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f74:	601a      	str	r2, [r3, #0]
  return result;
 8010f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010f7c:	fab3 f383 	clz	r3, r3
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	095b      	lsrs	r3, r3, #5
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	f043 0301 	orr.w	r3, r3, #1
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d105      	bne.n	8010f9c <HAL_RCC_OscConfig+0xc48>
 8010f90:	4b01      	ldr	r3, [pc, #4]	; (8010f98 <HAL_RCC_OscConfig+0xc44>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	e01e      	b.n	8010fd4 <HAL_RCC_OscConfig+0xc80>
 8010f96:	bf00      	nop
 8010f98:	40021000 	.word	0x40021000
 8010f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	fa93 f2a3 	rbit	r2, r3
 8010fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fb4:	601a      	str	r2, [r3, #0]
 8010fb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010fbe:	601a      	str	r2, [r3, #0]
 8010fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	fa93 f2a3 	rbit	r2, r3
 8010fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	4b6a      	ldr	r3, [pc, #424]	; (801117c <HAL_RCC_OscConfig+0xe28>)
 8010fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8010fdc:	6011      	str	r1, [r2, #0]
 8010fde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010fe2:	6812      	ldr	r2, [r2, #0]
 8010fe4:	fa92 f1a2 	rbit	r1, r2
 8010fe8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010fec:	6011      	str	r1, [r2, #0]
  return result;
 8010fee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010ff2:	6812      	ldr	r2, [r2, #0]
 8010ff4:	fab2 f282 	clz	r2, r2
 8010ff8:	b2d2      	uxtb	r2, r2
 8010ffa:	f042 0220 	orr.w	r2, r2, #32
 8010ffe:	b2d2      	uxtb	r2, r2
 8011000:	f002 021f 	and.w	r2, r2, #31
 8011004:	2101      	movs	r1, #1
 8011006:	fa01 f202 	lsl.w	r2, r1, r2
 801100a:	4013      	ands	r3, r2
 801100c:	2b00      	cmp	r3, #0
 801100e:	d09b      	beq.n	8010f48 <HAL_RCC_OscConfig+0xbf4>
 8011010:	e0ad      	b.n	801116e <HAL_RCC_OscConfig+0xe1a>
 8011012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801101a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801101c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	fa93 f2a3 	rbit	r2, r3
 8011026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801102a:	601a      	str	r2, [r3, #0]
  return result;
 801102c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011030:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011032:	fab3 f383 	clz	r3, r3
 8011036:	b2db      	uxtb	r3, r3
 8011038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 801103c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	461a      	mov	r2, r3
 8011044:	2300      	movs	r3, #0
 8011046:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011048:	f7fa ffa2 	bl	800bf90 <HAL_GetTick>
 801104c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011050:	e009      	b.n	8011066 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011052:	f7fa ff9d 	bl	800bf90 <HAL_GetTick>
 8011056:	4602      	mov	r2, r0
 8011058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	2b02      	cmp	r3, #2
 8011060:	d901      	bls.n	8011066 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8011062:	2303      	movs	r3, #3
 8011064:	e084      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
 8011066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801106a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801106e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	fa93 f2a3 	rbit	r2, r3
 801107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801107e:	601a      	str	r2, [r3, #0]
  return result;
 8011080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011086:	fab3 f383 	clz	r3, r3
 801108a:	b2db      	uxtb	r3, r3
 801108c:	095b      	lsrs	r3, r3, #5
 801108e:	b2db      	uxtb	r3, r3
 8011090:	f043 0301 	orr.w	r3, r3, #1
 8011094:	b2db      	uxtb	r3, r3
 8011096:	2b01      	cmp	r3, #1
 8011098:	d102      	bne.n	80110a0 <HAL_RCC_OscConfig+0xd4c>
 801109a:	4b38      	ldr	r3, [pc, #224]	; (801117c <HAL_RCC_OscConfig+0xe28>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	e01b      	b.n	80110d8 <HAL_RCC_OscConfig+0xd84>
 80110a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80110a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	fa93 f2a3 	rbit	r2, r3
 80110b4:	f107 0320 	add.w	r3, r7, #32
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	f107 031c 	add.w	r3, r7, #28
 80110be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	f107 031c 	add.w	r3, r7, #28
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	fa93 f2a3 	rbit	r2, r3
 80110ce:	f107 0318 	add.w	r3, r7, #24
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	4b29      	ldr	r3, [pc, #164]	; (801117c <HAL_RCC_OscConfig+0xe28>)
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	f107 0214 	add.w	r2, r7, #20
 80110dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80110e0:	6011      	str	r1, [r2, #0]
 80110e2:	f107 0214 	add.w	r2, r7, #20
 80110e6:	6812      	ldr	r2, [r2, #0]
 80110e8:	fa92 f1a2 	rbit	r1, r2
 80110ec:	f107 0210 	add.w	r2, r7, #16
 80110f0:	6011      	str	r1, [r2, #0]
  return result;
 80110f2:	f107 0210 	add.w	r2, r7, #16
 80110f6:	6812      	ldr	r2, [r2, #0]
 80110f8:	fab2 f282 	clz	r2, r2
 80110fc:	b2d2      	uxtb	r2, r2
 80110fe:	f042 0220 	orr.w	r2, r2, #32
 8011102:	b2d2      	uxtb	r2, r2
 8011104:	f002 021f 	and.w	r2, r2, #31
 8011108:	2101      	movs	r1, #1
 801110a:	fa01 f202 	lsl.w	r2, r1, r2
 801110e:	4013      	ands	r3, r2
 8011110:	2b00      	cmp	r3, #0
 8011112:	d19e      	bne.n	8011052 <HAL_RCC_OscConfig+0xcfe>
 8011114:	e02b      	b.n	801116e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011116:	1d3b      	adds	r3, r7, #4
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	699b      	ldr	r3, [r3, #24]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d101      	bne.n	8011124 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	e025      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011124:	4b15      	ldr	r3, [pc, #84]	; (801117c <HAL_RCC_OscConfig+0xe28>)
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 801112c:	4b13      	ldr	r3, [pc, #76]	; (801117c <HAL_RCC_OscConfig+0xe28>)
 801112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011130:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8011134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8011138:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 801113c:	1d3b      	adds	r3, r7, #4
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	69db      	ldr	r3, [r3, #28]
 8011142:	429a      	cmp	r2, r3
 8011144:	d111      	bne.n	801116a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8011146:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801114a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 801114e:	1d3b      	adds	r3, r7, #4
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8011154:	429a      	cmp	r2, r3
 8011156:	d108      	bne.n	801116a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8011158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801115c:	f003 020f 	and.w	r2, r3, #15
 8011160:	1d3b      	adds	r3, r7, #4
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8011166:	429a      	cmp	r2, r3
 8011168:	d001      	beq.n	801116e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 801116a:	2301      	movs	r3, #1
 801116c:	e000      	b.n	8011170 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	40021000 	.word	0x40021000

08011180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b09e      	sub	sp, #120	; 0x78
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 801118a:	2300      	movs	r3, #0
 801118c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8011194:	2301      	movs	r3, #1
 8011196:	e162      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011198:	4b90      	ldr	r3, [pc, #576]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f003 0307 	and.w	r3, r3, #7
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d910      	bls.n	80111c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80111a6:	4b8d      	ldr	r3, [pc, #564]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f023 0207 	bic.w	r2, r3, #7
 80111ae:	498b      	ldr	r1, [pc, #556]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	4313      	orrs	r3, r2
 80111b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80111b6:	4b89      	ldr	r3, [pc, #548]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f003 0307 	and.w	r3, r3, #7
 80111be:	683a      	ldr	r2, [r7, #0]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d001      	beq.n	80111c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80111c4:	2301      	movs	r3, #1
 80111c6:	e14a      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f003 0302 	and.w	r3, r3, #2
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d008      	beq.n	80111e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80111d4:	4b82      	ldr	r3, [pc, #520]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	689b      	ldr	r3, [r3, #8]
 80111e0:	497f      	ldr	r1, [pc, #508]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 80111e2:	4313      	orrs	r3, r2
 80111e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	f003 0301 	and.w	r3, r3, #1
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	f000 80dc 	beq.w	80113ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d13c      	bne.n	8011276 <HAL_RCC_ClockConfig+0xf6>
 80111fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011200:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011204:	fa93 f3a3 	rbit	r3, r3
 8011208:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 801120a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801120c:	fab3 f383 	clz	r3, r3
 8011210:	b2db      	uxtb	r3, r3
 8011212:	095b      	lsrs	r3, r3, #5
 8011214:	b2db      	uxtb	r3, r3
 8011216:	f043 0301 	orr.w	r3, r3, #1
 801121a:	b2db      	uxtb	r3, r3
 801121c:	2b01      	cmp	r3, #1
 801121e:	d102      	bne.n	8011226 <HAL_RCC_ClockConfig+0xa6>
 8011220:	4b6f      	ldr	r3, [pc, #444]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	e00f      	b.n	8011246 <HAL_RCC_ClockConfig+0xc6>
 8011226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801122a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801122c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801122e:	fa93 f3a3 	rbit	r3, r3
 8011232:	667b      	str	r3, [r7, #100]	; 0x64
 8011234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011238:	663b      	str	r3, [r7, #96]	; 0x60
 801123a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801123c:	fa93 f3a3 	rbit	r3, r3
 8011240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011242:	4b67      	ldr	r3, [pc, #412]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 8011244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801124a:	65ba      	str	r2, [r7, #88]	; 0x58
 801124c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801124e:	fa92 f2a2 	rbit	r2, r2
 8011252:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8011254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011256:	fab2 f282 	clz	r2, r2
 801125a:	b2d2      	uxtb	r2, r2
 801125c:	f042 0220 	orr.w	r2, r2, #32
 8011260:	b2d2      	uxtb	r2, r2
 8011262:	f002 021f 	and.w	r2, r2, #31
 8011266:	2101      	movs	r1, #1
 8011268:	fa01 f202 	lsl.w	r2, r1, r2
 801126c:	4013      	ands	r3, r2
 801126e:	2b00      	cmp	r3, #0
 8011270:	d17b      	bne.n	801136a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	e0f3      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	2b02      	cmp	r3, #2
 801127c:	d13c      	bne.n	80112f8 <HAL_RCC_ClockConfig+0x178>
 801127e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011286:	fa93 f3a3 	rbit	r3, r3
 801128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801128c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801128e:	fab3 f383 	clz	r3, r3
 8011292:	b2db      	uxtb	r3, r3
 8011294:	095b      	lsrs	r3, r3, #5
 8011296:	b2db      	uxtb	r3, r3
 8011298:	f043 0301 	orr.w	r3, r3, #1
 801129c:	b2db      	uxtb	r3, r3
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d102      	bne.n	80112a8 <HAL_RCC_ClockConfig+0x128>
 80112a2:	4b4f      	ldr	r3, [pc, #316]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	e00f      	b.n	80112c8 <HAL_RCC_ClockConfig+0x148>
 80112a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80112ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112b0:	fa93 f3a3 	rbit	r3, r3
 80112b4:	647b      	str	r3, [r7, #68]	; 0x44
 80112b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80112ba:	643b      	str	r3, [r7, #64]	; 0x40
 80112bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112be:	fa93 f3a3 	rbit	r3, r3
 80112c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112c4:	4b46      	ldr	r3, [pc, #280]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 80112c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80112cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80112ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112d0:	fa92 f2a2 	rbit	r2, r2
 80112d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80112d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112d8:	fab2 f282 	clz	r2, r2
 80112dc:	b2d2      	uxtb	r2, r2
 80112de:	f042 0220 	orr.w	r2, r2, #32
 80112e2:	b2d2      	uxtb	r2, r2
 80112e4:	f002 021f 	and.w	r2, r2, #31
 80112e8:	2101      	movs	r1, #1
 80112ea:	fa01 f202 	lsl.w	r2, r1, r2
 80112ee:	4013      	ands	r3, r2
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d13a      	bne.n	801136a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80112f4:	2301      	movs	r3, #1
 80112f6:	e0b2      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
 80112f8:	2302      	movs	r3, #2
 80112fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fe:	fa93 f3a3 	rbit	r3, r3
 8011302:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8011304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011306:	fab3 f383 	clz	r3, r3
 801130a:	b2db      	uxtb	r3, r3
 801130c:	095b      	lsrs	r3, r3, #5
 801130e:	b2db      	uxtb	r3, r3
 8011310:	f043 0301 	orr.w	r3, r3, #1
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b01      	cmp	r3, #1
 8011318:	d102      	bne.n	8011320 <HAL_RCC_ClockConfig+0x1a0>
 801131a:	4b31      	ldr	r3, [pc, #196]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	e00d      	b.n	801133c <HAL_RCC_ClockConfig+0x1bc>
 8011320:	2302      	movs	r3, #2
 8011322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011326:	fa93 f3a3 	rbit	r3, r3
 801132a:	627b      	str	r3, [r7, #36]	; 0x24
 801132c:	2302      	movs	r3, #2
 801132e:	623b      	str	r3, [r7, #32]
 8011330:	6a3b      	ldr	r3, [r7, #32]
 8011332:	fa93 f3a3 	rbit	r3, r3
 8011336:	61fb      	str	r3, [r7, #28]
 8011338:	4b29      	ldr	r3, [pc, #164]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 801133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801133c:	2202      	movs	r2, #2
 801133e:	61ba      	str	r2, [r7, #24]
 8011340:	69ba      	ldr	r2, [r7, #24]
 8011342:	fa92 f2a2 	rbit	r2, r2
 8011346:	617a      	str	r2, [r7, #20]
  return result;
 8011348:	697a      	ldr	r2, [r7, #20]
 801134a:	fab2 f282 	clz	r2, r2
 801134e:	b2d2      	uxtb	r2, r2
 8011350:	f042 0220 	orr.w	r2, r2, #32
 8011354:	b2d2      	uxtb	r2, r2
 8011356:	f002 021f 	and.w	r2, r2, #31
 801135a:	2101      	movs	r1, #1
 801135c:	fa01 f202 	lsl.w	r2, r1, r2
 8011360:	4013      	ands	r3, r2
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8011366:	2301      	movs	r3, #1
 8011368:	e079      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801136a:	4b1d      	ldr	r3, [pc, #116]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	f023 0203 	bic.w	r2, r3, #3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	491a      	ldr	r1, [pc, #104]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 8011378:	4313      	orrs	r3, r2
 801137a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801137c:	f7fa fe08 	bl	800bf90 <HAL_GetTick>
 8011380:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011382:	e00a      	b.n	801139a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011384:	f7fa fe04 	bl	800bf90 <HAL_GetTick>
 8011388:	4602      	mov	r2, r0
 801138a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801138c:	1ad3      	subs	r3, r2, r3
 801138e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011392:	4293      	cmp	r3, r2
 8011394:	d901      	bls.n	801139a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8011396:	2303      	movs	r3, #3
 8011398:	e061      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801139a:	4b11      	ldr	r3, [pc, #68]	; (80113e0 <HAL_RCC_ClockConfig+0x260>)
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	f003 020c 	and.w	r2, r3, #12
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d1eb      	bne.n	8011384 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80113ac:	4b0b      	ldr	r3, [pc, #44]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f003 0307 	and.w	r3, r3, #7
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d214      	bcs.n	80113e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113ba:	4b08      	ldr	r3, [pc, #32]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f023 0207 	bic.w	r2, r3, #7
 80113c2:	4906      	ldr	r1, [pc, #24]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	4313      	orrs	r3, r2
 80113c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80113ca:	4b04      	ldr	r3, [pc, #16]	; (80113dc <HAL_RCC_ClockConfig+0x25c>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f003 0307 	and.w	r3, r3, #7
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d005      	beq.n	80113e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80113d8:	2301      	movs	r3, #1
 80113da:	e040      	b.n	801145e <HAL_RCC_ClockConfig+0x2de>
 80113dc:	40022000 	.word	0x40022000
 80113e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f003 0304 	and.w	r3, r3, #4
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d008      	beq.n	8011402 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80113f0:	4b1d      	ldr	r3, [pc, #116]	; (8011468 <HAL_RCC_ClockConfig+0x2e8>)
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	491a      	ldr	r1, [pc, #104]	; (8011468 <HAL_RCC_ClockConfig+0x2e8>)
 80113fe:	4313      	orrs	r3, r2
 8011400:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f003 0308 	and.w	r3, r3, #8
 801140a:	2b00      	cmp	r3, #0
 801140c:	d009      	beq.n	8011422 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801140e:	4b16      	ldr	r3, [pc, #88]	; (8011468 <HAL_RCC_ClockConfig+0x2e8>)
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	691b      	ldr	r3, [r3, #16]
 801141a:	00db      	lsls	r3, r3, #3
 801141c:	4912      	ldr	r1, [pc, #72]	; (8011468 <HAL_RCC_ClockConfig+0x2e8>)
 801141e:	4313      	orrs	r3, r2
 8011420:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011422:	f000 f829 	bl	8011478 <HAL_RCC_GetSysClockFreq>
 8011426:	4601      	mov	r1, r0
 8011428:	4b0f      	ldr	r3, [pc, #60]	; (8011468 <HAL_RCC_ClockConfig+0x2e8>)
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011430:	22f0      	movs	r2, #240	; 0xf0
 8011432:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011434:	693a      	ldr	r2, [r7, #16]
 8011436:	fa92 f2a2 	rbit	r2, r2
 801143a:	60fa      	str	r2, [r7, #12]
  return result;
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	fab2 f282 	clz	r2, r2
 8011442:	b2d2      	uxtb	r2, r2
 8011444:	40d3      	lsrs	r3, r2
 8011446:	4a09      	ldr	r2, [pc, #36]	; (801146c <HAL_RCC_ClockConfig+0x2ec>)
 8011448:	5cd3      	ldrb	r3, [r2, r3]
 801144a:	fa21 f303 	lsr.w	r3, r1, r3
 801144e:	4a08      	ldr	r2, [pc, #32]	; (8011470 <HAL_RCC_ClockConfig+0x2f0>)
 8011450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8011452:	4b08      	ldr	r3, [pc, #32]	; (8011474 <HAL_RCC_ClockConfig+0x2f4>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	4618      	mov	r0, r3
 8011458:	f7fa fd56 	bl	800bf08 <HAL_InitTick>
  
  return HAL_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3778      	adds	r7, #120	; 0x78
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	40021000 	.word	0x40021000
 801146c:	08012974 	.word	0x08012974
 8011470:	20000000 	.word	0x20000000
 8011474:	20000004 	.word	0x20000004

08011478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011478:	b480      	push	{r7}
 801147a:	b08b      	sub	sp, #44	; 0x2c
 801147c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 801147e:	2300      	movs	r3, #0
 8011480:	61fb      	str	r3, [r7, #28]
 8011482:	2300      	movs	r3, #0
 8011484:	61bb      	str	r3, [r7, #24]
 8011486:	2300      	movs	r3, #0
 8011488:	627b      	str	r3, [r7, #36]	; 0x24
 801148a:	2300      	movs	r3, #0
 801148c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 801148e:	2300      	movs	r3, #0
 8011490:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8011492:	4b2a      	ldr	r3, [pc, #168]	; (801153c <HAL_RCC_GetSysClockFreq+0xc4>)
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	f003 030c 	and.w	r3, r3, #12
 801149e:	2b04      	cmp	r3, #4
 80114a0:	d002      	beq.n	80114a8 <HAL_RCC_GetSysClockFreq+0x30>
 80114a2:	2b08      	cmp	r3, #8
 80114a4:	d003      	beq.n	80114ae <HAL_RCC_GetSysClockFreq+0x36>
 80114a6:	e03f      	b.n	8011528 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80114a8:	4b25      	ldr	r3, [pc, #148]	; (8011540 <HAL_RCC_GetSysClockFreq+0xc8>)
 80114aa:	623b      	str	r3, [r7, #32]
      break;
 80114ac:	e03f      	b.n	801152e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80114ae:	69fb      	ldr	r3, [r7, #28]
 80114b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80114b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80114b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80114ba:	68ba      	ldr	r2, [r7, #8]
 80114bc:	fa92 f2a2 	rbit	r2, r2
 80114c0:	607a      	str	r2, [r7, #4]
  return result;
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	fab2 f282 	clz	r2, r2
 80114c8:	b2d2      	uxtb	r2, r2
 80114ca:	40d3      	lsrs	r3, r2
 80114cc:	4a1d      	ldr	r2, [pc, #116]	; (8011544 <HAL_RCC_GetSysClockFreq+0xcc>)
 80114ce:	5cd3      	ldrb	r3, [r2, r3]
 80114d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80114d2:	4b1a      	ldr	r3, [pc, #104]	; (801153c <HAL_RCC_GetSysClockFreq+0xc4>)
 80114d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d6:	f003 030f 	and.w	r3, r3, #15
 80114da:	220f      	movs	r2, #15
 80114dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80114de:	693a      	ldr	r2, [r7, #16]
 80114e0:	fa92 f2a2 	rbit	r2, r2
 80114e4:	60fa      	str	r2, [r7, #12]
  return result;
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	fab2 f282 	clz	r2, r2
 80114ec:	b2d2      	uxtb	r2, r2
 80114ee:	40d3      	lsrs	r3, r2
 80114f0:	4a15      	ldr	r2, [pc, #84]	; (8011548 <HAL_RCC_GetSysClockFreq+0xd0>)
 80114f2:	5cd3      	ldrb	r3, [r2, r3]
 80114f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d008      	beq.n	8011512 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8011500:	4a0f      	ldr	r2, [pc, #60]	; (8011540 <HAL_RCC_GetSysClockFreq+0xc8>)
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	fbb2 f2f3 	udiv	r2, r2, r3
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	fb02 f303 	mul.w	r3, r2, r3
 801150e:	627b      	str	r3, [r7, #36]	; 0x24
 8011510:	e007      	b.n	8011522 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8011512:	4a0b      	ldr	r2, [pc, #44]	; (8011540 <HAL_RCC_GetSysClockFreq+0xc8>)
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	fbb2 f2f3 	udiv	r2, r2, r3
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	fb02 f303 	mul.w	r3, r2, r3
 8011520:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	623b      	str	r3, [r7, #32]
      break;
 8011526:	e002      	b.n	801152e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8011528:	4b05      	ldr	r3, [pc, #20]	; (8011540 <HAL_RCC_GetSysClockFreq+0xc8>)
 801152a:	623b      	str	r3, [r7, #32]
      break;
 801152c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801152e:	6a3b      	ldr	r3, [r7, #32]
}
 8011530:	4618      	mov	r0, r3
 8011532:	372c      	adds	r7, #44	; 0x2c
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr
 801153c:	40021000 	.word	0x40021000
 8011540:	007a1200 	.word	0x007a1200
 8011544:	08012984 	.word	0x08012984
 8011548:	08012994 	.word	0x08012994

0801154c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b092      	sub	sp, #72	; 0x48
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011554:	2300      	movs	r3, #0
 8011556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8011558:	2300      	movs	r3, #0
 801155a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011564:	2b00      	cmp	r3, #0
 8011566:	f000 80d7 	beq.w	8011718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 801156a:	2300      	movs	r3, #0
 801156c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011570:	4b4e      	ldr	r3, [pc, #312]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8011572:	69db      	ldr	r3, [r3, #28]
 8011574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011578:	2b00      	cmp	r3, #0
 801157a:	d10e      	bne.n	801159a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801157c:	4b4b      	ldr	r3, [pc, #300]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801157e:	69db      	ldr	r3, [r3, #28]
 8011580:	4a4a      	ldr	r2, [pc, #296]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8011582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011586:	61d3      	str	r3, [r2, #28]
 8011588:	4b48      	ldr	r3, [pc, #288]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801158a:	69db      	ldr	r3, [r3, #28]
 801158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011590:	60bb      	str	r3, [r7, #8]
 8011592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011594:	2301      	movs	r3, #1
 8011596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801159a:	4b45      	ldr	r3, [pc, #276]	; (80116b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d118      	bne.n	80115d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80115a6:	4b42      	ldr	r3, [pc, #264]	; (80116b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a41      	ldr	r2, [pc, #260]	; (80116b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80115ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80115b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80115b2:	f7fa fced 	bl	800bf90 <HAL_GetTick>
 80115b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80115b8:	e008      	b.n	80115cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80115ba:	f7fa fce9 	bl	800bf90 <HAL_GetTick>
 80115be:	4602      	mov	r2, r0
 80115c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115c2:	1ad3      	subs	r3, r2, r3
 80115c4:	2b64      	cmp	r3, #100	; 0x64
 80115c6:	d901      	bls.n	80115cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80115c8:	2303      	movs	r3, #3
 80115ca:	e1d6      	b.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80115cc:	4b38      	ldr	r3, [pc, #224]	; (80116b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d0f0      	beq.n	80115ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80115d8:	4b34      	ldr	r3, [pc, #208]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80115da:	6a1b      	ldr	r3, [r3, #32]
 80115dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80115e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80115e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f000 8084 	beq.w	80116f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80115f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d07c      	beq.n	80116f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80115f8:	4b2c      	ldr	r3, [pc, #176]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80115fa:	6a1b      	ldr	r3, [r3, #32]
 80115fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160a:	fa93 f3a3 	rbit	r3, r3
 801160e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8011610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8011612:	fab3 f383 	clz	r3, r3
 8011616:	b2db      	uxtb	r3, r3
 8011618:	461a      	mov	r2, r3
 801161a:	4b26      	ldr	r3, [pc, #152]	; (80116b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 801161c:	4413      	add	r3, r2
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	461a      	mov	r2, r3
 8011622:	2301      	movs	r3, #1
 8011624:	6013      	str	r3, [r2, #0]
 8011626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801162a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	fa93 f3a3 	rbit	r3, r3
 8011632:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8011634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011636:	fab3 f383 	clz	r3, r3
 801163a:	b2db      	uxtb	r3, r3
 801163c:	461a      	mov	r2, r3
 801163e:	4b1d      	ldr	r3, [pc, #116]	; (80116b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8011640:	4413      	add	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	461a      	mov	r2, r3
 8011646:	2300      	movs	r3, #0
 8011648:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 801164a:	4a18      	ldr	r2, [pc, #96]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 801164c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801164e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8011650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011652:	f003 0301 	and.w	r3, r3, #1
 8011656:	2b00      	cmp	r3, #0
 8011658:	d04b      	beq.n	80116f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801165a:	f7fa fc99 	bl	800bf90 <HAL_GetTick>
 801165e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011660:	e00a      	b.n	8011678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011662:	f7fa fc95 	bl	800bf90 <HAL_GetTick>
 8011666:	4602      	mov	r2, r0
 8011668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801166a:	1ad3      	subs	r3, r2, r3
 801166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011670:	4293      	cmp	r3, r2
 8011672:	d901      	bls.n	8011678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8011674:	2303      	movs	r3, #3
 8011676:	e180      	b.n	801197a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8011678:	2302      	movs	r3, #2
 801167a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167e:	fa93 f3a3 	rbit	r3, r3
 8011682:	627b      	str	r3, [r7, #36]	; 0x24
 8011684:	2302      	movs	r3, #2
 8011686:	623b      	str	r3, [r7, #32]
 8011688:	6a3b      	ldr	r3, [r7, #32]
 801168a:	fa93 f3a3 	rbit	r3, r3
 801168e:	61fb      	str	r3, [r7, #28]
  return result;
 8011690:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011692:	fab3 f383 	clz	r3, r3
 8011696:	b2db      	uxtb	r3, r3
 8011698:	095b      	lsrs	r3, r3, #5
 801169a:	b2db      	uxtb	r3, r3
 801169c:	f043 0302 	orr.w	r3, r3, #2
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	2b02      	cmp	r3, #2
 80116a4:	d108      	bne.n	80116b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80116a6:	4b01      	ldr	r3, [pc, #4]	; (80116ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80116a8:	6a1b      	ldr	r3, [r3, #32]
 80116aa:	e00d      	b.n	80116c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80116ac:	40021000 	.word	0x40021000
 80116b0:	40007000 	.word	0x40007000
 80116b4:	10908100 	.word	0x10908100
 80116b8:	2302      	movs	r3, #2
 80116ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	fa93 f3a3 	rbit	r3, r3
 80116c2:	617b      	str	r3, [r7, #20]
 80116c4:	4ba0      	ldr	r3, [pc, #640]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80116c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c8:	2202      	movs	r2, #2
 80116ca:	613a      	str	r2, [r7, #16]
 80116cc:	693a      	ldr	r2, [r7, #16]
 80116ce:	fa92 f2a2 	rbit	r2, r2
 80116d2:	60fa      	str	r2, [r7, #12]
  return result;
 80116d4:	68fa      	ldr	r2, [r7, #12]
 80116d6:	fab2 f282 	clz	r2, r2
 80116da:	b2d2      	uxtb	r2, r2
 80116dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80116e0:	b2d2      	uxtb	r2, r2
 80116e2:	f002 021f 	and.w	r2, r2, #31
 80116e6:	2101      	movs	r1, #1
 80116e8:	fa01 f202 	lsl.w	r2, r1, r2
 80116ec:	4013      	ands	r3, r2
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d0b7      	beq.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80116f2:	4b95      	ldr	r3, [pc, #596]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80116f4:	6a1b      	ldr	r3, [r3, #32]
 80116f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	4992      	ldr	r1, [pc, #584]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011700:	4313      	orrs	r3, r2
 8011702:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011708:	2b01      	cmp	r3, #1
 801170a:	d105      	bne.n	8011718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801170c:	4b8e      	ldr	r3, [pc, #568]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801170e:	69db      	ldr	r3, [r3, #28]
 8011710:	4a8d      	ldr	r2, [pc, #564]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	f003 0301 	and.w	r3, r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	d008      	beq.n	8011736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011724:	4b88      	ldr	r3, [pc, #544]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011728:	f023 0203 	bic.w	r2, r3, #3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	4985      	ldr	r1, [pc, #532]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011732:	4313      	orrs	r3, r2
 8011734:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f003 0302 	and.w	r3, r3, #2
 801173e:	2b00      	cmp	r3, #0
 8011740:	d008      	beq.n	8011754 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011742:	4b81      	ldr	r3, [pc, #516]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	497e      	ldr	r1, [pc, #504]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011750:	4313      	orrs	r3, r2
 8011752:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f003 0304 	and.w	r3, r3, #4
 801175c:	2b00      	cmp	r3, #0
 801175e:	d008      	beq.n	8011772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011760:	4b79      	ldr	r3, [pc, #484]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	691b      	ldr	r3, [r3, #16]
 801176c:	4976      	ldr	r1, [pc, #472]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801176e:	4313      	orrs	r3, r2
 8011770:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f003 0320 	and.w	r3, r3, #32
 801177a:	2b00      	cmp	r3, #0
 801177c:	d008      	beq.n	8011790 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801177e:	4b72      	ldr	r3, [pc, #456]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011782:	f023 0210 	bic.w	r2, r3, #16
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	69db      	ldr	r3, [r3, #28]
 801178a:	496f      	ldr	r1, [pc, #444]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801178c:	4313      	orrs	r3, r2
 801178e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011798:	2b00      	cmp	r3, #0
 801179a:	d008      	beq.n	80117ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 801179c:	4b6a      	ldr	r3, [pc, #424]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117a8:	4967      	ldr	r1, [pc, #412]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80117aa:	4313      	orrs	r3, r2
 80117ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d008      	beq.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80117ba:	4b63      	ldr	r3, [pc, #396]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80117bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117be:	f023 0220 	bic.w	r2, r3, #32
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a1b      	ldr	r3, [r3, #32]
 80117c6:	4960      	ldr	r1, [pc, #384]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80117c8:	4313      	orrs	r3, r2
 80117ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d008      	beq.n	80117ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80117d8:	4b5b      	ldr	r3, [pc, #364]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80117da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e4:	4958      	ldr	r1, [pc, #352]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80117e6:	4313      	orrs	r3, r2
 80117e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f003 0308 	and.w	r3, r3, #8
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d008      	beq.n	8011808 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80117f6:	4b54      	ldr	r3, [pc, #336]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80117f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	695b      	ldr	r3, [r3, #20]
 8011802:	4951      	ldr	r1, [pc, #324]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011804:	4313      	orrs	r3, r2
 8011806:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f003 0310 	and.w	r3, r3, #16
 8011810:	2b00      	cmp	r3, #0
 8011812:	d008      	beq.n	8011826 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011814:	4b4c      	ldr	r3, [pc, #304]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	699b      	ldr	r3, [r3, #24]
 8011820:	4949      	ldr	r1, [pc, #292]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011822:	4313      	orrs	r3, r2
 8011824:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801182e:	2b00      	cmp	r3, #0
 8011830:	d008      	beq.n	8011844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8011832:	4b45      	ldr	r3, [pc, #276]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801183e:	4942      	ldr	r1, [pc, #264]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011840:	4313      	orrs	r3, r2
 8011842:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801184c:	2b00      	cmp	r3, #0
 801184e:	d008      	beq.n	8011862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8011850:	4b3d      	ldr	r3, [pc, #244]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011854:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801185c:	493a      	ldr	r1, [pc, #232]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801185e:	4313      	orrs	r3, r2
 8011860:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801186a:	2b00      	cmp	r3, #0
 801186c:	d008      	beq.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 801186e:	4b36      	ldr	r3, [pc, #216]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011872:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187a:	4933      	ldr	r1, [pc, #204]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801187c:	4313      	orrs	r3, r2
 801187e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011888:	2b00      	cmp	r3, #0
 801188a:	d008      	beq.n	801189e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 801188c:	4b2e      	ldr	r3, [pc, #184]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011898:	492b      	ldr	r1, [pc, #172]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 801189a:	4313      	orrs	r3, r2
 801189c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d008      	beq.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80118aa:	4b27      	ldr	r3, [pc, #156]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80118ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118b6:	4924      	ldr	r1, [pc, #144]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80118b8:	4313      	orrs	r3, r2
 80118ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d008      	beq.n	80118da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80118c8:	4b1f      	ldr	r3, [pc, #124]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80118ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d4:	491c      	ldr	r1, [pc, #112]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80118d6:	4313      	orrs	r3, r2
 80118d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d008      	beq.n	80118f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80118e6:	4b18      	ldr	r3, [pc, #96]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80118e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118f2:	4915      	ldr	r1, [pc, #84]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80118f4:	4313      	orrs	r3, r2
 80118f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011900:	2b00      	cmp	r3, #0
 8011902:	d008      	beq.n	8011916 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8011904:	4b10      	ldr	r3, [pc, #64]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011908:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011910:	490d      	ldr	r1, [pc, #52]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011912:	4313      	orrs	r3, r2
 8011914:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801191e:	2b00      	cmp	r3, #0
 8011920:	d008      	beq.n	8011934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8011922:	4b09      	ldr	r3, [pc, #36]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011926:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801192e:	4906      	ldr	r1, [pc, #24]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011930:	4313      	orrs	r3, r2
 8011932:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00c      	beq.n	801195a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8011940:	4b01      	ldr	r3, [pc, #4]	; (8011948 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8011942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011944:	e002      	b.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8011946:	bf00      	nop
 8011948:	40021000 	.word	0x40021000
 801194c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011954:	490b      	ldr	r1, [pc, #44]	; (8011984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8011956:	4313      	orrs	r3, r2
 8011958:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011962:	2b00      	cmp	r3, #0
 8011964:	d008      	beq.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8011966:	4b07      	ldr	r3, [pc, #28]	; (8011984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8011968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801196a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011972:	4904      	ldr	r1, [pc, #16]	; (8011984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8011974:	4313      	orrs	r3, r2
 8011976:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3748      	adds	r7, #72	; 0x48
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	40021000 	.word	0x40021000

08011988 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b082      	sub	sp, #8
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d101      	bne.n	801199a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8011996:	2301      	movs	r3, #1
 8011998:	e083      	b.n	8011aa2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	7f5b      	ldrb	r3, [r3, #29]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2200      	movs	r2, #0
 80119a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f7f9 f9c6 	bl	800ad3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2202      	movs	r2, #2
 80119b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	22ca      	movs	r2, #202	; 0xca
 80119bc:	625a      	str	r2, [r3, #36]	; 0x24
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2253      	movs	r2, #83	; 0x53
 80119c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 f897 	bl	8011afa <RTC_EnterInitMode>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d008      	beq.n	80119e4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	22ff      	movs	r2, #255	; 0xff
 80119d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2204      	movs	r2, #4
 80119de:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80119e0:	2301      	movs	r3, #1
 80119e2:	e05e      	b.n	8011aa2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	689b      	ldr	r3, [r3, #8]
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	6812      	ldr	r2, [r2, #0]
 80119ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80119f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6899      	ldr	r1, [r3, #8]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	685a      	ldr	r2, [r3, #4]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	691b      	ldr	r3, [r3, #16]
 8011a06:	431a      	orrs	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	695b      	ldr	r3, [r3, #20]
 8011a0c:	431a      	orrs	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	430a      	orrs	r2, r1
 8011a14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	68d2      	ldr	r2, [r2, #12]
 8011a1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	6919      	ldr	r1, [r3, #16]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	689b      	ldr	r3, [r3, #8]
 8011a2a:	041a      	lsls	r2, r3, #16
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	430a      	orrs	r2, r1
 8011a32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	68da      	ldr	r2, [r3, #12]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011a42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	f003 0320 	and.w	r3, r3, #32
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d10e      	bne.n	8011a70 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 f829 	bl	8011aaa <HAL_RTC_WaitForSynchro>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d008      	beq.n	8011a70 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	22ff      	movs	r2, #255	; 0xff
 8011a64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2204      	movs	r2, #4
 8011a6a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	e018      	b.n	8011aa2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011a7e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	699a      	ldr	r2, [r3, #24]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	430a      	orrs	r2, r1
 8011a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	22ff      	movs	r2, #255	; 0xff
 8011a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8011aa0:	2300      	movs	r3, #0
  }
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b084      	sub	sp, #16
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	68da      	ldr	r2, [r3, #12]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8011ac4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8011ac6:	f7fa fa63 	bl	800bf90 <HAL_GetTick>
 8011aca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011acc:	e009      	b.n	8011ae2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ace:	f7fa fa5f 	bl	800bf90 <HAL_GetTick>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011adc:	d901      	bls.n	8011ae2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8011ade:	2303      	movs	r3, #3
 8011ae0:	e007      	b.n	8011af2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	f003 0320 	and.w	r3, r3, #32
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d0ee      	beq.n	8011ace <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3710      	adds	r7, #16
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}

08011afa <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011afa:	b580      	push	{r7, lr}
 8011afc:	b084      	sub	sp, #16
 8011afe:	af00      	add	r7, sp, #0
 8011b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011b02:	2300      	movs	r3, #0
 8011b04:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d119      	bne.n	8011b48 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f04f 32ff 	mov.w	r2, #4294967295
 8011b1c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011b1e:	f7fa fa37 	bl	800bf90 <HAL_GetTick>
 8011b22:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b24:	e009      	b.n	8011b3a <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011b26:	f7fa fa33 	bl	800bf90 <HAL_GetTick>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011b34:	d901      	bls.n	8011b3a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8011b36:	2303      	movs	r3, #3
 8011b38:	e007      	b.n	8011b4a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d0ee      	beq.n	8011b26 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d101      	bne.n	8011b64 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011b60:	2301      	movs	r3, #1
 8011b62:	e084      	b.n	8011c6e <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2200      	movs	r2, #0
 8011b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d106      	bne.n	8011b84 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7f9 f902 	bl	800ad88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2202      	movs	r2, #2
 8011b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	681a      	ldr	r2, [r3, #0]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	68db      	ldr	r3, [r3, #12]
 8011ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011ba4:	d902      	bls.n	8011bac <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	60fb      	str	r3, [r7, #12]
 8011baa:	e002      	b.n	8011bb2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	68db      	ldr	r3, [r3, #12]
 8011bb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011bba:	d007      	beq.n	8011bcc <HAL_SPI_Init+0x7a>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011bc4:	d002      	beq.n	8011bcc <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d10b      	bne.n	8011bec <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011bdc:	d903      	bls.n	8011be6 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2202      	movs	r2, #2
 8011be2:	631a      	str	r2, [r3, #48]	; 0x30
 8011be4:	e002      	b.n	8011bec <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2201      	movs	r2, #1
 8011bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	431a      	orrs	r2, r3
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	431a      	orrs	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	695b      	ldr	r3, [r3, #20]
 8011c00:	431a      	orrs	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011c0a:	431a      	orrs	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	69db      	ldr	r3, [r3, #28]
 8011c10:	431a      	orrs	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6a1b      	ldr	r3, [r3, #32]
 8011c16:	ea42 0103 	orr.w	r1, r2, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	430a      	orrs	r2, r1
 8011c24:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	699b      	ldr	r3, [r3, #24]
 8011c2a:	0c1b      	lsrs	r3, r3, #16
 8011c2c:	f003 0204 	and.w	r2, r3, #4
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c34:	431a      	orrs	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	ea42 0103 	orr.w	r1, r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	430a      	orrs	r2, r1
 8011c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	69da      	ldr	r2, [r3, #28]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2201      	movs	r2, #1
 8011c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8011c6c:	2300      	movs	r3, #0
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b082      	sub	sp, #8
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8011c84:	2301      	movs	r3, #1
 8011c86:	e01a      	b.n	8011cbe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2202      	movs	r2, #2
 8011c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	681a      	ldr	r2, [r3, #0]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c9e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f7f9 f919 	bl	800aed8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}

08011cc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011cc6:	b580      	push	{r7, lr}
 8011cc8:	b088      	sub	sp, #32
 8011cca:	af00      	add	r7, sp, #0
 8011ccc:	60f8      	str	r0, [r7, #12]
 8011cce:	60b9      	str	r1, [r7, #8]
 8011cd0:	603b      	str	r3, [r7, #0]
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d101      	bne.n	8011ce8 <HAL_SPI_Transmit+0x22>
 8011ce4:	2302      	movs	r3, #2
 8011ce6:	e150      	b.n	8011f8a <HAL_SPI_Transmit+0x2c4>
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	2201      	movs	r2, #1
 8011cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011cf0:	f7fa f94e 	bl	800bf90 <HAL_GetTick>
 8011cf4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011cf6:	88fb      	ldrh	r3, [r7, #6]
 8011cf8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d002      	beq.n	8011d0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011d06:	2302      	movs	r3, #2
 8011d08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011d0a:	e135      	b.n	8011f78 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d002      	beq.n	8011d18 <HAL_SPI_Transmit+0x52>
 8011d12:	88fb      	ldrh	r3, [r7, #6]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d102      	bne.n	8011d1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011d1c:	e12c      	b.n	8011f78 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2203      	movs	r2, #3
 8011d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	88fa      	ldrh	r2, [r7, #6]
 8011d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	88fa      	ldrh	r2, [r7, #6]
 8011d3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2200      	movs	r2, #0
 8011d58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	689b      	ldr	r3, [r3, #8]
 8011d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d68:	d107      	bne.n	8011d7a <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011d78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d84:	2b40      	cmp	r3, #64	; 0x40
 8011d86:	d007      	beq.n	8011d98 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011da0:	d94b      	bls.n	8011e3a <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d002      	beq.n	8011db0 <HAL_SPI_Transmit+0xea>
 8011daa:	8afb      	ldrh	r3, [r7, #22]
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d13e      	bne.n	8011e2e <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011db4:	881a      	ldrh	r2, [r3, #0]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc0:	1c9a      	adds	r2, r3, #2
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011dd4:	e02b      	b.n	8011e2e <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	f003 0302 	and.w	r3, r3, #2
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	d112      	bne.n	8011e0a <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011de8:	881a      	ldrh	r2, [r3, #0]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011df4:	1c9a      	adds	r2, r3, #2
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	3b01      	subs	r3, #1
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011e08:	e011      	b.n	8011e2e <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e0a:	f7fa f8c1 	bl	800bf90 <HAL_GetTick>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	683a      	ldr	r2, [r7, #0]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d803      	bhi.n	8011e22 <HAL_SPI_Transmit+0x15c>
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e20:	d102      	bne.n	8011e28 <HAL_SPI_Transmit+0x162>
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d102      	bne.n	8011e2e <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8011e28:	2303      	movs	r3, #3
 8011e2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011e2c:	e0a4      	b.n	8011f78 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d1ce      	bne.n	8011dd6 <HAL_SPI_Transmit+0x110>
 8011e38:	e07c      	b.n	8011f34 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d002      	beq.n	8011e48 <HAL_SPI_Transmit+0x182>
 8011e42:	8afb      	ldrh	r3, [r7, #22]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d170      	bne.n	8011f2a <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d912      	bls.n	8011e78 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e56:	881a      	ldrh	r2, [r3, #0]
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e62:	1c9a      	adds	r2, r3, #2
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	3b02      	subs	r3, #2
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011e76:	e058      	b.n	8011f2a <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	330c      	adds	r3, #12
 8011e82:	7812      	ldrb	r2, [r2, #0]
 8011e84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e8a:	1c5a      	adds	r2, r3, #1
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	3b01      	subs	r3, #1
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8011e9e:	e044      	b.n	8011f2a <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	f003 0302 	and.w	r3, r3, #2
 8011eaa:	2b02      	cmp	r3, #2
 8011eac:	d12b      	bne.n	8011f06 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d912      	bls.n	8011ede <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ebc:	881a      	ldrh	r2, [r3, #0]
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec8:	1c9a      	adds	r2, r3, #2
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	3b02      	subs	r3, #2
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011edc:	e025      	b.n	8011f2a <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	330c      	adds	r3, #12
 8011ee8:	7812      	ldrb	r2, [r2, #0]
 8011eea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ef0:	1c5a      	adds	r2, r3, #1
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	3b01      	subs	r3, #1
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011f04:	e011      	b.n	8011f2a <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011f06:	f7fa f843 	bl	800bf90 <HAL_GetTick>
 8011f0a:	4602      	mov	r2, r0
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	1ad3      	subs	r3, r2, r3
 8011f10:	683a      	ldr	r2, [r7, #0]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d803      	bhi.n	8011f1e <HAL_SPI_Transmit+0x258>
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1c:	d102      	bne.n	8011f24 <HAL_SPI_Transmit+0x25e>
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d102      	bne.n	8011f2a <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8011f24:	2303      	movs	r3, #3
 8011f26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011f28:	e026      	b.n	8011f78 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d1b5      	bne.n	8011ea0 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011f34:	69ba      	ldr	r2, [r7, #24]
 8011f36:	6839      	ldr	r1, [r7, #0]
 8011f38:	68f8      	ldr	r0, [r7, #12]
 8011f3a:	f000 fc94 	bl	8012866 <SPI_EndRxTxTransaction>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2220      	movs	r2, #32
 8011f48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d10a      	bne.n	8011f68 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011f52:	2300      	movs	r3, #0
 8011f54:	613b      	str	r3, [r7, #16]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	613b      	str	r3, [r7, #16]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	613b      	str	r3, [r7, #16]
 8011f66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d002      	beq.n	8011f76 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8011f70:	2301      	movs	r3, #1
 8011f72:	77fb      	strb	r3, [r7, #31]
 8011f74:	e000      	b.n	8011f78 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8011f76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3720      	adds	r7, #32
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b088      	sub	sp, #32
 8011f96:	af02      	add	r7, sp, #8
 8011f98:	60f8      	str	r0, [r7, #12]
 8011f9a:	60b9      	str	r1, [r7, #8]
 8011f9c:	603b      	str	r3, [r7, #0]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011fae:	d112      	bne.n	8011fd6 <HAL_SPI_Receive+0x44>
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	689b      	ldr	r3, [r3, #8]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10e      	bne.n	8011fd6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2204      	movs	r2, #4
 8011fbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011fc0:	88fa      	ldrh	r2, [r7, #6]
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	9300      	str	r3, [sp, #0]
 8011fc6:	4613      	mov	r3, r2
 8011fc8:	68ba      	ldr	r2, [r7, #8]
 8011fca:	68b9      	ldr	r1, [r7, #8]
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f000 f908 	bl	80121e2 <HAL_SPI_TransmitReceive>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	e101      	b.n	80121da <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d101      	bne.n	8011fe4 <HAL_SPI_Receive+0x52>
 8011fe0:	2302      	movs	r3, #2
 8011fe2:	e0fa      	b.n	80121da <HAL_SPI_Receive+0x248>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011fec:	f7f9 ffd0 	bl	800bf90 <HAL_GetTick>
 8011ff0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d002      	beq.n	8012004 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8011ffe:	2302      	movs	r3, #2
 8012000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012002:	e0e1      	b.n	80121c8 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d002      	beq.n	8012010 <HAL_SPI_Receive+0x7e>
 801200a:	88fb      	ldrh	r3, [r7, #6]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d102      	bne.n	8012016 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012010:	2301      	movs	r3, #1
 8012012:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012014:	e0d8      	b.n	80121c8 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2204      	movs	r2, #4
 801201a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2200      	movs	r2, #0
 8012022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	88fa      	ldrh	r2, [r7, #6]
 801202e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	88fa      	ldrh	r2, [r7, #6]
 8012036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2200      	movs	r2, #0
 801203e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2200      	movs	r2, #0
 8012044:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2200      	movs	r2, #0
 801204a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2200      	movs	r2, #0
 8012050:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2200      	movs	r2, #0
 8012056:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012060:	d908      	bls.n	8012074 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	685a      	ldr	r2, [r3, #4]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012070:	605a      	str	r2, [r3, #4]
 8012072:	e007      	b.n	8012084 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	685a      	ldr	r2, [r3, #4]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012082:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801208c:	d107      	bne.n	801209e <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801209c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120a8:	2b40      	cmp	r3, #64	; 0x40
 80120aa:	d007      	beq.n	80120bc <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80120c4:	d867      	bhi.n	8012196 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80120c6:	e030      	b.n	801212a <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	f003 0301 	and.w	r3, r3, #1
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d117      	bne.n	8012106 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	f103 020c 	add.w	r2, r3, #12
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e2:	7812      	ldrb	r2, [r2, #0]
 80120e4:	b2d2      	uxtb	r2, r2
 80120e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ec:	1c5a      	adds	r2, r3, #1
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	3b01      	subs	r3, #1
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8012104:	e011      	b.n	801212a <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012106:	f7f9 ff43 	bl	800bf90 <HAL_GetTick>
 801210a:	4602      	mov	r2, r0
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	429a      	cmp	r2, r3
 8012114:	d803      	bhi.n	801211e <HAL_SPI_Receive+0x18c>
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801211c:	d102      	bne.n	8012124 <HAL_SPI_Receive+0x192>
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d102      	bne.n	801212a <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8012124:	2303      	movs	r3, #3
 8012126:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012128:	e04e      	b.n	80121c8 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012130:	b29b      	uxth	r3, r3
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1c8      	bne.n	80120c8 <HAL_SPI_Receive+0x136>
 8012136:	e034      	b.n	80121a2 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	f003 0301 	and.w	r3, r3, #1
 8012142:	2b01      	cmp	r3, #1
 8012144:	d115      	bne.n	8012172 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	68da      	ldr	r2, [r3, #12]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012150:	b292      	uxth	r2, r2
 8012152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012158:	1c9a      	adds	r2, r3, #2
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012164:	b29b      	uxth	r3, r3
 8012166:	3b01      	subs	r3, #1
 8012168:	b29a      	uxth	r2, r3
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8012170:	e011      	b.n	8012196 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012172:	f7f9 ff0d 	bl	800bf90 <HAL_GetTick>
 8012176:	4602      	mov	r2, r0
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	683a      	ldr	r2, [r7, #0]
 801217e:	429a      	cmp	r2, r3
 8012180:	d803      	bhi.n	801218a <HAL_SPI_Receive+0x1f8>
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012188:	d102      	bne.n	8012190 <HAL_SPI_Receive+0x1fe>
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d102      	bne.n	8012196 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8012190:	2303      	movs	r3, #3
 8012192:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012194:	e018      	b.n	80121c8 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801219c:	b29b      	uxth	r3, r3
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d1ca      	bne.n	8012138 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80121a2:	693a      	ldr	r2, [r7, #16]
 80121a4:	6839      	ldr	r1, [r7, #0]
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f000 fb05 	bl	80127b6 <SPI_EndRxTransaction>
 80121ac:	4603      	mov	r3, r0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2220      	movs	r2, #32
 80121b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d002      	beq.n	80121c6 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80121c0:	2301      	movs	r3, #1
 80121c2:	75fb      	strb	r3, [r7, #23]
 80121c4:	e000      	b.n	80121c8 <HAL_SPI_Receive+0x236>
  }

error :
 80121c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2201      	movs	r2, #1
 80121cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2200      	movs	r2, #0
 80121d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80121d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3718      	adds	r7, #24
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80121e2:	b580      	push	{r7, lr}
 80121e4:	b08a      	sub	sp, #40	; 0x28
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	60f8      	str	r0, [r7, #12]
 80121ea:	60b9      	str	r1, [r7, #8]
 80121ec:	607a      	str	r2, [r7, #4]
 80121ee:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80121f0:	2301      	movs	r3, #1
 80121f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80121f4:	2300      	movs	r3, #0
 80121f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012200:	2b01      	cmp	r3, #1
 8012202:	d101      	bne.n	8012208 <HAL_SPI_TransmitReceive+0x26>
 8012204:	2302      	movs	r3, #2
 8012206:	e1fb      	b.n	8012600 <HAL_SPI_TransmitReceive+0x41e>
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2201      	movs	r2, #1
 801220c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012210:	f7f9 febe 	bl	800bf90 <HAL_GetTick>
 8012214:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801221c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8012224:	887b      	ldrh	r3, [r7, #2]
 8012226:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8012228:	887b      	ldrh	r3, [r7, #2]
 801222a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801222c:	7efb      	ldrb	r3, [r7, #27]
 801222e:	2b01      	cmp	r3, #1
 8012230:	d00e      	beq.n	8012250 <HAL_SPI_TransmitReceive+0x6e>
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012238:	d106      	bne.n	8012248 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d102      	bne.n	8012248 <HAL_SPI_TransmitReceive+0x66>
 8012242:	7efb      	ldrb	r3, [r7, #27]
 8012244:	2b04      	cmp	r3, #4
 8012246:	d003      	beq.n	8012250 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8012248:	2302      	movs	r3, #2
 801224a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801224e:	e1cd      	b.n	80125ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d005      	beq.n	8012262 <HAL_SPI_TransmitReceive+0x80>
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <HAL_SPI_TransmitReceive+0x80>
 801225c:	887b      	ldrh	r3, [r7, #2]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d103      	bne.n	801226a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8012262:	2301      	movs	r3, #1
 8012264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8012268:	e1c0      	b.n	80125ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b04      	cmp	r3, #4
 8012274:	d003      	beq.n	801227e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2205      	movs	r2, #5
 801227a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2200      	movs	r2, #0
 8012282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	887a      	ldrh	r2, [r7, #2]
 801228e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	887a      	ldrh	r2, [r7, #2]
 8012296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	68ba      	ldr	r2, [r7, #8]
 801229e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	887a      	ldrh	r2, [r7, #2]
 80122a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	887a      	ldrh	r2, [r7, #2]
 80122aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2200      	movs	r2, #0
 80122b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2200      	movs	r2, #0
 80122b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80122c0:	d802      	bhi.n	80122c8 <HAL_SPI_TransmitReceive+0xe6>
 80122c2:	8a3b      	ldrh	r3, [r7, #16]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d908      	bls.n	80122da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	685a      	ldr	r2, [r3, #4]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80122d6:	605a      	str	r2, [r3, #4]
 80122d8:	e007      	b.n	80122ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	685a      	ldr	r2, [r3, #4]
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80122e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122f4:	2b40      	cmp	r3, #64	; 0x40
 80122f6:	d007      	beq.n	8012308 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012310:	d97c      	bls.n	801240c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <HAL_SPI_TransmitReceive+0x13e>
 801231a:	8a7b      	ldrh	r3, [r7, #18]
 801231c:	2b01      	cmp	r3, #1
 801231e:	d169      	bne.n	80123f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012324:	881a      	ldrh	r2, [r3, #0]
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012330:	1c9a      	adds	r2, r3, #2
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801233a:	b29b      	uxth	r3, r3
 801233c:	3b01      	subs	r3, #1
 801233e:	b29a      	uxth	r2, r3
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012344:	e056      	b.n	80123f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	f003 0302 	and.w	r3, r3, #2
 8012350:	2b02      	cmp	r3, #2
 8012352:	d11b      	bne.n	801238c <HAL_SPI_TransmitReceive+0x1aa>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012358:	b29b      	uxth	r3, r3
 801235a:	2b00      	cmp	r3, #0
 801235c:	d016      	beq.n	801238c <HAL_SPI_TransmitReceive+0x1aa>
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	2b01      	cmp	r3, #1
 8012362:	d113      	bne.n	801238c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012368:	881a      	ldrh	r2, [r3, #0]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012374:	1c9a      	adds	r2, r3, #2
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801237e:	b29b      	uxth	r3, r3
 8012380:	3b01      	subs	r3, #1
 8012382:	b29a      	uxth	r2, r3
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012388:	2300      	movs	r3, #0
 801238a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	f003 0301 	and.w	r3, r3, #1
 8012396:	2b01      	cmp	r3, #1
 8012398:	d11c      	bne.n	80123d4 <HAL_SPI_TransmitReceive+0x1f2>
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d016      	beq.n	80123d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	68da      	ldr	r2, [r3, #12]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b0:	b292      	uxth	r2, r2
 80123b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b8:	1c9a      	adds	r2, r3, #2
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	3b01      	subs	r3, #1
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80123d0:	2301      	movs	r3, #1
 80123d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80123d4:	f7f9 fddc 	bl	800bf90 <HAL_GetTick>
 80123d8:	4602      	mov	r2, r0
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d807      	bhi.n	80123f4 <HAL_SPI_TransmitReceive+0x212>
 80123e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ea:	d003      	beq.n	80123f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80123ec:	2303      	movs	r3, #3
 80123ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80123f2:	e0fb      	b.n	80125ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1a3      	bne.n	8012346 <HAL_SPI_TransmitReceive+0x164>
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012404:	b29b      	uxth	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d19d      	bne.n	8012346 <HAL_SPI_TransmitReceive+0x164>
 801240a:	e0df      	b.n	80125cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d003      	beq.n	801241c <HAL_SPI_TransmitReceive+0x23a>
 8012414:	8a7b      	ldrh	r3, [r7, #18]
 8012416:	2b01      	cmp	r3, #1
 8012418:	f040 80cb 	bne.w	80125b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012420:	b29b      	uxth	r3, r3
 8012422:	2b01      	cmp	r3, #1
 8012424:	d912      	bls.n	801244c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801242a:	881a      	ldrh	r2, [r3, #0]
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012436:	1c9a      	adds	r2, r3, #2
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012440:	b29b      	uxth	r3, r3
 8012442:	3b02      	subs	r3, #2
 8012444:	b29a      	uxth	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	87da      	strh	r2, [r3, #62]	; 0x3e
 801244a:	e0b2      	b.n	80125b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	330c      	adds	r3, #12
 8012456:	7812      	ldrb	r2, [r2, #0]
 8012458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801245e:	1c5a      	adds	r2, r3, #1
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012468:	b29b      	uxth	r3, r3
 801246a:	3b01      	subs	r3, #1
 801246c:	b29a      	uxth	r2, r3
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012472:	e09e      	b.n	80125b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	f003 0302 	and.w	r3, r3, #2
 801247e:	2b02      	cmp	r3, #2
 8012480:	d134      	bne.n	80124ec <HAL_SPI_TransmitReceive+0x30a>
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012486:	b29b      	uxth	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d02f      	beq.n	80124ec <HAL_SPI_TransmitReceive+0x30a>
 801248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248e:	2b01      	cmp	r3, #1
 8012490:	d12c      	bne.n	80124ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012496:	b29b      	uxth	r3, r3
 8012498:	2b01      	cmp	r3, #1
 801249a:	d912      	bls.n	80124c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a0:	881a      	ldrh	r2, [r3, #0]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ac:	1c9a      	adds	r2, r3, #2
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	3b02      	subs	r3, #2
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80124c0:	e012      	b.n	80124e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	330c      	adds	r3, #12
 80124cc:	7812      	ldrb	r2, [r2, #0]
 80124ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d4:	1c5a      	adds	r2, r3, #1
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124de:	b29b      	uxth	r3, r3
 80124e0:	3b01      	subs	r3, #1
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80124e8:	2300      	movs	r3, #0
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	f003 0301 	and.w	r3, r3, #1
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d148      	bne.n	801258c <HAL_SPI_TransmitReceive+0x3aa>
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012500:	b29b      	uxth	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	d042      	beq.n	801258c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801250c:	b29b      	uxth	r3, r3
 801250e:	2b01      	cmp	r3, #1
 8012510:	d923      	bls.n	801255a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	68da      	ldr	r2, [r3, #12]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801251c:	b292      	uxth	r2, r2
 801251e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012524:	1c9a      	adds	r2, r3, #2
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012530:	b29b      	uxth	r3, r3
 8012532:	3b02      	subs	r3, #2
 8012534:	b29a      	uxth	r2, r3
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012542:	b29b      	uxth	r3, r3
 8012544:	2b01      	cmp	r3, #1
 8012546:	d81f      	bhi.n	8012588 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	685a      	ldr	r2, [r3, #4]
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012556:	605a      	str	r2, [r3, #4]
 8012558:	e016      	b.n	8012588 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f103 020c 	add.w	r2, r3, #12
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012566:	7812      	ldrb	r2, [r2, #0]
 8012568:	b2d2      	uxtb	r2, r2
 801256a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012570:	1c5a      	adds	r2, r3, #1
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801257c:	b29b      	uxth	r3, r3
 801257e:	3b01      	subs	r3, #1
 8012580:	b29a      	uxth	r2, r3
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012588:	2301      	movs	r3, #1
 801258a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801258c:	f7f9 fd00 	bl	800bf90 <HAL_GetTick>
 8012590:	4602      	mov	r2, r0
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	1ad3      	subs	r3, r2, r3
 8012596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012598:	429a      	cmp	r2, r3
 801259a:	d803      	bhi.n	80125a4 <HAL_SPI_TransmitReceive+0x3c2>
 801259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a2:	d102      	bne.n	80125aa <HAL_SPI_TransmitReceive+0x3c8>
 80125a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d103      	bne.n	80125b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80125aa:	2303      	movs	r3, #3
 80125ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80125b0:	e01c      	b.n	80125ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125b6:	b29b      	uxth	r3, r3
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	f47f af5b 	bne.w	8012474 <HAL_SPI_TransmitReceive+0x292>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f47f af54 	bne.w	8012474 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80125cc:	69fa      	ldr	r2, [r7, #28]
 80125ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f000 f948 	bl	8012866 <SPI_EndRxTxTransaction>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d006      	beq.n	80125ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80125dc:	2301      	movs	r3, #1
 80125de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2220      	movs	r2, #32
 80125e6:	661a      	str	r2, [r3, #96]	; 0x60
 80125e8:	e000      	b.n	80125ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80125ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2201      	movs	r2, #1
 80125f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2200      	movs	r2, #0
 80125f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80125fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8012600:	4618      	mov	r0, r3
 8012602:	3728      	adds	r7, #40	; 0x28
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	603b      	str	r3, [r7, #0]
 8012614:	4613      	mov	r3, r2
 8012616:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012618:	e04c      	b.n	80126b4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012620:	d048      	beq.n	80126b4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012622:	f7f9 fcb5 	bl	800bf90 <HAL_GetTick>
 8012626:	4602      	mov	r2, r0
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	1ad3      	subs	r3, r2, r3
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	429a      	cmp	r2, r3
 8012630:	d902      	bls.n	8012638 <SPI_WaitFlagStateUntilTimeout+0x30>
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d13d      	bne.n	80126b4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	685a      	ldr	r2, [r3, #4]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012646:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	685b      	ldr	r3, [r3, #4]
 801264c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012650:	d111      	bne.n	8012676 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801265a:	d004      	beq.n	8012666 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012664:	d107      	bne.n	8012676 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801267e:	d10f      	bne.n	80126a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801268e:	601a      	str	r2, [r3, #0]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801269e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2201      	movs	r2, #1
 80126a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2200      	movs	r2, #0
 80126ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80126b0:	2303      	movs	r3, #3
 80126b2:	e00f      	b.n	80126d4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	689a      	ldr	r2, [r3, #8]
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	4013      	ands	r3, r2
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	bf0c      	ite	eq
 80126c4:	2301      	moveq	r3, #1
 80126c6:	2300      	movne	r3, #0
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	461a      	mov	r2, r3
 80126cc:	79fb      	ldrb	r3, [r7, #7]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d1a3      	bne.n	801261a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80126d2:	2300      	movs	r3, #0
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3710      	adds	r7, #16
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
 80126e8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80126ea:	e057      	b.n	801279c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80126f2:	d106      	bne.n	8012702 <SPI_WaitFifoStateUntilTimeout+0x26>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d103      	bne.n	8012702 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	330c      	adds	r3, #12
 8012700:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012708:	d048      	beq.n	801279c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801270a:	f7f9 fc41 	bl	800bf90 <HAL_GetTick>
 801270e:	4602      	mov	r2, r0
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	1ad3      	subs	r3, r2, r3
 8012714:	683a      	ldr	r2, [r7, #0]
 8012716:	429a      	cmp	r2, r3
 8012718:	d902      	bls.n	8012720 <SPI_WaitFifoStateUntilTimeout+0x44>
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d13d      	bne.n	801279c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	685a      	ldr	r2, [r3, #4]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801272e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012738:	d111      	bne.n	801275e <SPI_WaitFifoStateUntilTimeout+0x82>
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	689b      	ldr	r3, [r3, #8]
 801273e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012742:	d004      	beq.n	801274e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	689b      	ldr	r3, [r3, #8]
 8012748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801274c:	d107      	bne.n	801275e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801275c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012766:	d10f      	bne.n	8012788 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012776:	601a      	str	r2, [r3, #0]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	2201      	movs	r2, #1
 801278c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2200      	movs	r2, #0
 8012794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8012798:	2303      	movs	r3, #3
 801279a:	e008      	b.n	80127ae <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	689a      	ldr	r2, [r3, #8]
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	4013      	ands	r3, r2
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d19f      	bne.n	80126ec <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b086      	sub	sp, #24
 80127ba:	af02      	add	r7, sp, #8
 80127bc:	60f8      	str	r0, [r7, #12]
 80127be:	60b9      	str	r1, [r7, #8]
 80127c0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80127ca:	d111      	bne.n	80127f0 <SPI_EndRxTransaction+0x3a>
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127d4:	d004      	beq.n	80127e0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80127de:	d107      	bne.n	80127f0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80127ee:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	2200      	movs	r2, #0
 80127f8:	2180      	movs	r1, #128	; 0x80
 80127fa:	68f8      	ldr	r0, [r7, #12]
 80127fc:	f7ff ff04 	bl	8012608 <SPI_WaitFlagStateUntilTimeout>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d007      	beq.n	8012816 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801280a:	f043 0220 	orr.w	r2, r3, #32
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012812:	2303      	movs	r3, #3
 8012814:	e023      	b.n	801285e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801281e:	d11d      	bne.n	801285c <SPI_EndRxTransaction+0xa6>
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	689b      	ldr	r3, [r3, #8]
 8012824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012828:	d004      	beq.n	8012834 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012832:	d113      	bne.n	801285c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	2200      	movs	r2, #0
 801283c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	f7ff ff4b 	bl	80126dc <SPI_WaitFifoStateUntilTimeout>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d007      	beq.n	801285c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012850:	f043 0220 	orr.w	r2, r3, #32
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8012858:	2303      	movs	r3, #3
 801285a:	e000      	b.n	801285e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801285c:	2300      	movs	r3, #0
}
 801285e:	4618      	mov	r0, r3
 8012860:	3710      	adds	r7, #16
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}

08012866 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012866:	b580      	push	{r7, lr}
 8012868:	b086      	sub	sp, #24
 801286a:	af02      	add	r7, sp, #8
 801286c:	60f8      	str	r0, [r7, #12]
 801286e:	60b9      	str	r1, [r7, #8]
 8012870:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	9300      	str	r3, [sp, #0]
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	2200      	movs	r2, #0
 801287a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f7ff ff2c 	bl	80126dc <SPI_WaitFifoStateUntilTimeout>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d007      	beq.n	801289a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801288e:	f043 0220 	orr.w	r2, r3, #32
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012896:	2303      	movs	r3, #3
 8012898:	e027      	b.n	80128ea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	9300      	str	r3, [sp, #0]
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2200      	movs	r2, #0
 80128a2:	2180      	movs	r1, #128	; 0x80
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f7ff feaf 	bl	8012608 <SPI_WaitFlagStateUntilTimeout>
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d007      	beq.n	80128c0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128b4:	f043 0220 	orr.w	r2, r3, #32
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80128bc:	2303      	movs	r3, #3
 80128be:	e014      	b.n	80128ea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2200      	movs	r2, #0
 80128c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80128cc:	68f8      	ldr	r0, [r7, #12]
 80128ce:	f7ff ff05 	bl	80126dc <SPI_WaitFifoStateUntilTimeout>
 80128d2:	4603      	mov	r3, r0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d007      	beq.n	80128e8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128dc:	f043 0220 	orr.w	r2, r3, #32
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	e000      	b.n	80128ea <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80128e8:	2300      	movs	r3, #0
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3710      	adds	r7, #16
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
	...

080128f4 <__libc_init_array>:
 80128f4:	b570      	push	{r4, r5, r6, lr}
 80128f6:	4e0d      	ldr	r6, [pc, #52]	; (801292c <__libc_init_array+0x38>)
 80128f8:	4c0d      	ldr	r4, [pc, #52]	; (8012930 <__libc_init_array+0x3c>)
 80128fa:	1ba4      	subs	r4, r4, r6
 80128fc:	10a4      	asrs	r4, r4, #2
 80128fe:	2500      	movs	r5, #0
 8012900:	42a5      	cmp	r5, r4
 8012902:	d109      	bne.n	8012918 <__libc_init_array+0x24>
 8012904:	4e0b      	ldr	r6, [pc, #44]	; (8012934 <__libc_init_array+0x40>)
 8012906:	4c0c      	ldr	r4, [pc, #48]	; (8012938 <__libc_init_array+0x44>)
 8012908:	f000 f820 	bl	801294c <_init>
 801290c:	1ba4      	subs	r4, r4, r6
 801290e:	10a4      	asrs	r4, r4, #2
 8012910:	2500      	movs	r5, #0
 8012912:	42a5      	cmp	r5, r4
 8012914:	d105      	bne.n	8012922 <__libc_init_array+0x2e>
 8012916:	bd70      	pop	{r4, r5, r6, pc}
 8012918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801291c:	4798      	blx	r3
 801291e:	3501      	adds	r5, #1
 8012920:	e7ee      	b.n	8012900 <__libc_init_array+0xc>
 8012922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012926:	4798      	blx	r3
 8012928:	3501      	adds	r5, #1
 801292a:	e7f2      	b.n	8012912 <__libc_init_array+0x1e>
 801292c:	080129a4 	.word	0x080129a4
 8012930:	080129a4 	.word	0x080129a4
 8012934:	080129a4 	.word	0x080129a4
 8012938:	080129a8 	.word	0x080129a8

0801293c <memset>:
 801293c:	4402      	add	r2, r0
 801293e:	4603      	mov	r3, r0
 8012940:	4293      	cmp	r3, r2
 8012942:	d100      	bne.n	8012946 <memset+0xa>
 8012944:	4770      	bx	lr
 8012946:	f803 1b01 	strb.w	r1, [r3], #1
 801294a:	e7f9      	b.n	8012940 <memset+0x4>

0801294c <_init>:
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	bf00      	nop
 8012950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012952:	bc08      	pop	{r3}
 8012954:	469e      	mov	lr, r3
 8012956:	4770      	bx	lr

08012958 <_fini>:
 8012958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295a:	bf00      	nop
 801295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801295e:	bc08      	pop	{r3}
 8012960:	469e      	mov	lr, r3
 8012962:	4770      	bx	lr
